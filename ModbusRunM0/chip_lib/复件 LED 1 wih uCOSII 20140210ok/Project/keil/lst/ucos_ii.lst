L 1 "..\..\uCOS-II\Source\ucos_ii.c"
N/*
N*********************************************************************************************************
N*                                                uC/OS-II
N*                                          The Real-Time Kernel
N*
N*                              (c) Copyright 1992-2010, Micrium, Weston, FL
N*                                           All Rights Reserved
N*
N* File    : uCOS_II.C
N* By      : Jean J. Labrosse
N* Version : V2.92
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.  
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license 
N* its use in your product. We provide ALL the source code for your convenience and to help you experience 
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a 
N* licensing fee.
N*********************************************************************************************************
N*/
N
N#define  OS_GLOBALS                           /* Declare GLOBAL variables                              */
N#include <ucos_ii.h>
L 1 "..\..\uCOS-II\Source\ucos_ii.h" 1
N/*
N*********************************************************************************************************
N*                                                uC/OS-II
N*                                          The Real-Time Kernel
N*
N*                              (c) Copyright 1992-2010, Micrium, Weston, FL
N*                                           All Rights Reserved
N*
N* File    : uCOS_II.H
N* By      : Jean J. Labrosse
N* Version : V2.92
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
N* its use in your product. We provide ALL the source code for your convenience and to help you experience
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
N* licensing fee.
N*********************************************************************************************************
N*/
N
N#ifndef   OS_uCOS_II_H
N#define   OS_uCOS_II_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/*
N*********************************************************************************************************
N*                                          uC/OS-II VERSION NUMBER
N*********************************************************************************************************
N*/
N
N#define  OS_VERSION                 292u                /* Version of uC/OS-II (Vx.yy mult. by 100)    */
N
N/*
N*********************************************************************************************************
N*                                           INCLUDE HEADER FILES
N*********************************************************************************************************
N*/
N
N#include <app_cfg.h>
L 1 "..\..\Project\app_cfg.h" 1
N/*
N*********************************************************************************************************
N*                                              EXAMPLE CODE
N*
N*                          (c) Copyright 2003-2013; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                      APPLICATION CONFIGURATION
N*
N*                                     ST Microelectronics STM32
N*                                              on the
N*
N*                                     Micrium uC-Eval-STM32F107
N*                                        Evaluation Board
N*
N* Filename      : app_cfg.h
N* Version       : V1.00
N* Programmer(s) : EHS
N*********************************************************************************************************
N*/
N
N#ifndef  __APP_CFG_H__
N#define  __APP_CFG_H__
N
N
N/*
N*********************************************************************************************************
N*                                       MODULE ENABLE / DISABLE
N*********************************************************************************************************
N*/
N
N#define  APP_CFG_SERIAL_EN                          DEF_ENABLED
N
N
N//#define  BSP_CFG_LED_SPI2_EN                        DEF_ENABLED       /* Enable/disable LEDs on SPI port.                     */
N//#define  BSP_CFG_LED_PIOC_EN                        DEF_ENABLED       /* Enable/disable PIOC LEDs.                            */
N
N
N/*
N*********************************************************************************************************
N*                                              TASKS NAMES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                            TASK PRIORITIES
N*********************************************************************************************************
N*/
N
N#define  APP_TASK_START_PRIO                        4
N#define  APP_Test_PRIO                              5
N#define  APP_Test1_PRIO                             6
N
N#define  OS_TASK_TMR_PRIO                   (OS_LOWEST_PRIO - 2)
N
N
N/*
N*********************************************************************************************************
N*                                            TASK STACK SIZES
N*                             Size of the task stacks (# of OS_STK entries)
N*********************************************************************************************************
N*/
N
N#define  APP_TASK_START_STK_SIZE                    30
N#define  APP_TASK_Test_SIZE                         30
N#define  APP_TASK_Test1_SIZE                        30
N// #define  BUFF_SIZE                                  1000
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N/*
N*********************************************************************************************************
N*                                    BSP CONFIGURATION: RS-232
N*********************************************************************************************************
N*/
N
N//#define  BSP_CFG_SER_COMM_SEL             			BSP_SER_COMM_UART_02
N//#define  BSP_CFG_TS_TMR_SEL                    		2
N
N
N/*
N*********************************************************************************************************
N*                                     TRACE / DEBUG CONFIGURATION
N*********************************************************************************************************
N*/
N
N#if 0
S#define  TRACE_LEVEL_OFF                       		0
S#define  TRACE_LEVEL_INFO                      		1
S#define  TRACE_LEVEL_DEBUG                     		2
N#endif
N
N#define  APP_TRACE_LEVEL                			TRACE_LEVEL_INFO
N#define  APP_TRACE                      			BSP_Ser_Printf
N
N#define  APP_TRACE_INFO(x)            ((APP_TRACE_LEVEL >= TRACE_LEVEL_INFO)  ? (void)(APP_TRACE x) : (void)0)
N#define  APP_TRACE_DEBUG(x)           ((APP_TRACE_LEVEL >= TRACE_LEVEL_DEBUG) ? (void)(APP_TRACE x) : (void)0)
N
N
N
N#endif
L 45 "..\..\uCOS-II\Source\ucos_ii.h" 2
N#include <os_cfg.h>
L 1 "..\..\Project\os_cfg.h" 1
N/*
N*********************************************************************************************************
N*                                                uC/OS-II
N*                                          The Real-Time Kernel
N*                                  uC/OS-II Configuration File for V2.9x
N*
N*                               (c) Copyright 2005-2012, Micrium, Weston, FL
N*                                          All Rights Reserved
N*
N*
N* File    : OS_CFG.H
N* By      : JJL
N*
N* Version : V2.92.00
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
N* its use in your product. We provide ALL the source code for your convenience and to help you experience
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
N* licensing fee.
N*********************************************************************************************************
N*/
N
N#ifndef OS_CFG_H
N#define OS_CFG_H
N
N
N                                       /* ---------------------- MISCELLANEOUS ----------------------- */
N#define OS_APP_HOOKS_EN           1u   /* Application-defined hooks are called from the uC/OS-II hooks */
N#define OS_ARG_CHK_EN             0u   /* Enable (1) or Disable (0) argument checking                  */
N#define OS_CPU_HOOKS_EN           1u   /* uC/OS-II hooks are found in the processor port files         */
N
N#define OS_DEBUG_EN               1u   /* Enable(1) debug variables                                    */
N
N#define OS_EVENT_MULTI_EN         1u   /* Include code for OSEventPendMulti()                          */
N#define OS_EVENT_NAME_EN          1u   /* Enable names for Sem, Mutex, Mbox and Q                      */
N
N#define OS_LOWEST_PRIO            10u   /* Defines the lowest priority that can be assigned ...         */
N                                       /* ... MUST NEVER be higher than 254!                           */
N
N#define OS_MAX_EVENTS            10u   /* Max. number of event control blocks in your application      */
N#define OS_MAX_FLAGS              5u   /* Max. number of Event Flag Groups    in your application      */
N#define OS_MAX_MEM_PART           5u   /* Max. number of memory partitions                             */
N#define OS_MAX_QS                 3u   /* Max. number of queue control blocks in your application      */
N#define OS_MAX_TASKS              7u   /* Max. number of tasks in your application, MUST be >= 2       */
N
N#define OS_SCHED_LOCK_EN          1u   /* Include code for OSSchedLock() and OSSchedUnlock()           */
N
N#define OS_TICK_STEP_EN           1u   /* Enable tick stepping feature for uC/OS-View                  */
N#define OS_TICKS_PER_SEC       1000u   /* Set the number of ticks in one second                        */
N
N
N                                       /* --------------------- TASK STACK SIZE ---------------------- */
N#define OS_TASK_TMR_STK_SIZE    15u   /* Timer      task stack size (# of OS_STK wide entries)        */
N#define OS_TASK_STAT_STK_SIZE   15u   /* Statistics task stack size (# of OS_STK wide entries)        */
N#define OS_TASK_IDLE_STK_SIZE   15u   /* Idle       task stack size (# of OS_STK wide entries)        */
N
N
N                                       /* --------------------- TASK MANAGEMENT ---------------------- */
N#define OS_TASK_CHANGE_PRIO_EN    1u   /*     Include code for OSTaskChangePrio()                      */
N#define OS_TASK_CREATE_EN         1u   /*     Include code for OSTaskCreate()                          */
N#define OS_TASK_CREATE_EXT_EN     1u   /*     Include code for OSTaskCreateExt()                       */
N#define OS_TASK_DEL_EN            1u   /*     Include code for OSTaskDel()                             */
N#define OS_TASK_NAME_EN           1u   /*     Enable task names                                        */
N#define OS_TASK_PROFILE_EN        1u   /*     Include variables in OS_TCB for profiling                */
N#define OS_TASK_QUERY_EN          1u   /*     Include code for OSTaskQuery()                           */
N#define OS_TASK_REG_TBL_SIZE      1u   /*     Size of task variables array (#of INT32U entries)        */
N#define OS_TASK_STAT_EN           1u   /*     Enable (1) or Disable(0) the statistics task             */
N#define OS_TASK_STAT_STK_CHK_EN   1u   /*     Check task stacks from statistic task                    */
N#define OS_TASK_SUSPEND_EN        1u   /*     Include code for OSTaskSuspend() and OSTaskResume()      */
N#define OS_TASK_SW_HOOK_EN        1u   /*     Include code for OSTaskSwHook()                          */
N
N
N                                       /* ----------------------- EVENT FLAGS ------------------------ */
N#define OS_FLAG_EN                1u   /* Enable (1) or Disable (0) code generation for EVENT FLAGS    */
N#define OS_FLAG_ACCEPT_EN         1u   /*     Include code for OSFlagAccept()                          */
N#define OS_FLAG_DEL_EN            1u   /*     Include code for OSFlagDel()                             */
N#define OS_FLAG_NAME_EN           1u   /*     Enable names for event flag group                        */
N#define OS_FLAG_QUERY_EN          1u   /*     Include code for OSFlagQuery()                           */
N#define OS_FLAG_WAIT_CLR_EN       1u   /* Include code for Wait on Clear EVENT FLAGS                   */
N#define OS_FLAGS_NBITS            8u   /* Size in #bits of OS_FLAGS data type (8, 16 or 32)            */
N
N
N                                       /* -------------------- MESSAGE MAILBOXES --------------------- */
N#define OS_MBOX_EN                1u   /* Enable (1) or Disable (0) code generation for MAILBOXES      */
N#define OS_MBOX_ACCEPT_EN         1u   /*     Include code for OSMboxAccept()                          */
N#define OS_MBOX_DEL_EN            1u   /*     Include code for OSMboxDel()                             */
N#define OS_MBOX_PEND_ABORT_EN     1u   /*     Include code for OSMboxPendAbort()                       */
N#define OS_MBOX_POST_EN           1u   /*     Include code for OSMboxPost()                            */
N#define OS_MBOX_POST_OPT_EN       1u   /*     Include code for OSMboxPostOpt()                         */
N#define OS_MBOX_QUERY_EN          1u   /*     Include code for OSMboxQuery()                           */
N
N
N                                       /* --------------------- MEMORY MANAGEMENT -------------------- */
N#define OS_MEM_EN                 1u   /* Enable (1) or Disable (0) code generation for MEMORY MANAGER */
N#define OS_MEM_NAME_EN            1u   /*     Enable memory partition names                            */
N#define OS_MEM_QUERY_EN           1u   /*     Include code for OSMemQuery()                            */
N
N
N                                       /* ---------------- MUTUAL EXCLUSION SEMAPHORES --------------- */
N#define OS_MUTEX_EN               1u   /* Enable (1) or Disable (0) code generation for MUTEX          */
N#define OS_MUTEX_ACCEPT_EN        1u   /*     Include code for OSMutexAccept()                         */
N#define OS_MUTEX_DEL_EN           1u   /*     Include code for OSMutexDel()                            */
N#define OS_MUTEX_QUERY_EN         1u   /*     Include code for OSMutexQuery()                          */
N
N
N                                       /* ---------------------- MESSAGE QUEUES ---------------------- */
N#define OS_Q_EN                   0u   /* Enable (1) or Disable (0) code generation for QUEUES         */
N#define OS_Q_ACCEPT_EN            1u   /*     Include code for OSQAccept()                             */
N#define OS_Q_DEL_EN               1u   /*     Include code for OSQDel()                                */
N#define OS_Q_FLUSH_EN             1u   /*     Include code for OSQFlush()                              */
N#define OS_Q_PEND_ABORT_EN        1u   /*     Include code for OSQPendAbort()                          */
N#define OS_Q_POST_EN              1u   /*     Include code for OSQPost()                               */
N#define OS_Q_POST_FRONT_EN        1u   /*     Include code for OSQPostFront()                          */
N#define OS_Q_POST_OPT_EN          1u   /*     Include code for OSQPostOpt()                            */
N#define OS_Q_QUERY_EN             1u   /*     Include code for OSQQuery()                              */
N
N
N                                       /* ------------------------ SEMAPHORES ------------------------ */
N#define OS_SEM_EN                 1u   /* Enable (1) or Disable (0) code generation for SEMAPHORES     */
N#define OS_SEM_ACCEPT_EN          1u   /*    Include code for OSSemAccept()                            */
N#define OS_SEM_DEL_EN             1u   /*    Include code for OSSemDel()                               */
N#define OS_SEM_PEND_ABORT_EN      1u   /*    Include code for OSSemPendAbort()                         */
N#define OS_SEM_QUERY_EN           1u   /*    Include code for OSSemQuery()                             */
N#define OS_SEM_SET_EN             1u   /*    Include code for OSSemSet()                               */
N
N
N                                       /* --------------------- TIME MANAGEMENT ---------------------- */
N#define OS_TIME_DLY_HMSM_EN       1u   /*     Include code for OSTimeDlyHMSM()                         */
N#define OS_TIME_DLY_RESUME_EN     1u   /*     Include code for OSTimeDlyResume()                       */
N#define OS_TIME_GET_SET_EN        1u   /*     Include code for OSTimeGet() and OSTimeSet()             */
N#define OS_TIME_TICK_HOOK_EN      1u   /*     Include code for OSTimeTickHook()                        */
N
N
N                                       /* --------------------- TIMER MANAGEMENT --------------------- */
N#define OS_TMR_EN                 1u   /* Enable (1) or Disable (0) code generation for TIMERS         */
N#define OS_TMR_CFG_MAX            8u   /*     Maximum number of timers                                 */
N#define OS_TMR_CFG_NAME_EN        1u   /*     Determine timer names                                    */
N#define OS_TMR_CFG_WHEEL_SIZE     8u   /*     Size of timer wheel (#Spokes)                            */
N#define OS_TMR_CFG_TICKS_PER_SEC 10u   /*     Rate at which timer management task runs (Hz)            */
N
N#endif
L 46 "..\..\uCOS-II\Source\ucos_ii.h" 2
N#include <os_cpu.h>
L 1 "..\..\uCOS-II\Ports\ARM-Cortex-M0\Generic\RealView\os_cpu.h" 1
N/*
N*********************************************************************************************************
N*                                               uC/OS-II
N*                                         The Real-Time Kernel
N*
N*
N*                              (c) Copyright 2006-2012, Micrium, Weston, FL
N*                                          All Rights Reserved
N*
N*                                           ARM Cortex-M0 Port
N*
N* File      : OS_CPU.H
N* Version   : V2.92.07.00
N* By        : Jean J. Labrosse
N*             yng
N*
N* For       : ARMv6M Cortex-M0
N* Mode      : Thumb2
N* Toolchain : RealView Development Suite
N*             RealView Microcontroller Development Kit (MDK)
N*             ARM Developer Suite (ADS)
N*             Keil uVision
N*********************************************************************************************************
N*/
N
N#ifndef  OS_CPU_H
N#define  OS_CPU_H
N
N
N#ifdef   OS_CPU_GLOBALS
S#define  OS_CPU_EXT
N#else
N#define  OS_CPU_EXT  extern
N#endif
N
N#ifndef  OS_CPU_EXCEPT_STK_SIZE
N#define  OS_CPU_EXCEPT_STK_SIZE    64u          /* Default exception stack size is 128 OS_STK entries */
N#endif
N
N/*
N*********************************************************************************************************
N*                                              DATA TYPES
N*                                         (Compiler Specific)
N*********************************************************************************************************
N*/
N
Ntypedef unsigned char  BOOLEAN;
Ntypedef unsigned char  INT8U;                    /* Unsigned  8 bit quantity                           */
Ntypedef signed   char  INT8S;                    /* Signed    8 bit quantity                           */
Ntypedef unsigned short INT16U;                   /* Unsigned 16 bit quantity                           */
Ntypedef signed   short INT16S;                   /* Signed   16 bit quantity                           */
Ntypedef unsigned int   INT32U;                   /* Unsigned 32 bit quantity                           */
Ntypedef signed   int   INT32S;                   /* Signed   32 bit quantity                           */
Ntypedef float          FP32;                     /* Single precision floating point                    */
Ntypedef double         FP64;                     /* Double precision floating point                    */
N
Ntypedef unsigned int   OS_STK;                   /* Each stack entry is 32-bit wide                    */
Ntypedef unsigned int   OS_CPU_SR;                /* Define size of CPU status register (PSR = 32 bits) */
N
N/*
N*********************************************************************************************************
N*                                              Cortex-M3
N*                                      Critical Section Management
N*
N* Method #1:  Disable/Enable interrupts using simple instructions.  After critical section, interrupts
N*             will be enabled even if they were disabled before entering the critical section.
N*             NOT IMPLEMENTED
N*
N* Method #2:  Disable/Enable interrupts by preserving the state of interrupts.  In other words, if
N*             interrupts were disabled before entering the critical section, they will be disabled when
N*             leaving the critical section.
N*             NOT IMPLEMENTED
N*
N* Method #3:  Disable/Enable interrupts by preserving the state of interrupts.  Generally speaking you
N*             would store the state of the interrupt disable flag in the local variable 'cpu_sr' and then
N*             disable interrupts.  'cpu_sr' is allocated in all of uC/OS-II's functions that need to
N*             disable interrupts.  You would restore the interrupt disable state by copying back 'cpu_sr'
N*             into the CPU's status register.
N*********************************************************************************************************
N*/
N
N#define  OS_CRITICAL_METHOD   3u
N
N#if OS_CRITICAL_METHOD == 3u
X#if 3u == 3u
N#define  OS_ENTER_CRITICAL()  {cpu_sr = OS_CPU_SR_Save();}
N#define  OS_EXIT_CRITICAL()   {OS_CPU_SR_Restore(cpu_sr);}
N#endif
N
N/*
N*********************************************************************************************************
N*                                        Cortex-M3 Miscellaneous
N*********************************************************************************************************
N*/
N
N#define  OS_STK_GROWTH        1u                  /* Stack grows from HIGH to LOW memory on ARM        */
N
N#define  OS_TASK_SW()         OSCtxSw()
N
N/*
N*********************************************************************************************************
N*                                            GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
NOS_CPU_EXT  OS_STK   OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE];
Xextern  OS_STK   OS_CPU_ExceptStk[64u];
NOS_CPU_EXT  OS_STK  *OS_CPU_ExceptStkBase;
Xextern  OS_STK  *OS_CPU_ExceptStkBase;
N
N/*
N*********************************************************************************************************
N*                                              PROTOTYPES
N*********************************************************************************************************
N*/
N
N#if OS_CRITICAL_METHOD == 3u                      /* See OS_CPU_A.ASM                                  */
X#if 3u == 3u                       
NOS_CPU_SR  OS_CPU_SR_Save(void);
Nvoid       OS_CPU_SR_Restore(OS_CPU_SR cpu_sr);
N#endif
N
Nvoid       OSCtxSw(void);
Nvoid       OSIntCtxSw(void);
Nvoid       OSStartHighRdy(void);
N
Nvoid       OS_CPU_PendSVHandler(void);
N
N                                                  /* See OS_CPU_C.C                                    */
Nvoid       OS_CPU_SysTickHandler(void);
Nvoid       OS_CPU_SysTickInit(INT32U  cnts);
N#endif
L 47 "..\..\uCOS-II\Source\ucos_ii.h" 2
N
N/*
N*********************************************************************************************************
N*                                             MISCELLANEOUS
N*********************************************************************************************************
N*/
N
N#ifdef   OS_GLOBALS
N#define  OS_EXT
N#else
S#define  OS_EXT  extern
N#endif
N
N#ifndef  OS_FALSE
N#define  OS_FALSE                       0u
N#endif
N
N#ifndef  OS_TRUE
N#define  OS_TRUE                        1u
N#endif
N
N#define  OS_ASCII_NUL            (INT8U)0
N
N#define  OS_PRIO_SELF                0xFFu              /* Indicate SELF priority                      */
N
N#if OS_TASK_STAT_EN > 0u
X#if 1u > 0u
N#define  OS_N_SYS_TASKS                 2u              /* Number of system tasks                      */
N#else
S#define  OS_N_SYS_TASKS                 1u
N#endif
N
N#define  OS_TASK_STAT_PRIO  (OS_LOWEST_PRIO - 1u)       /* Statistic task priority                     */
N#define  OS_TASK_IDLE_PRIO  (OS_LOWEST_PRIO)            /* IDLE      task priority                     */
N
N#if OS_LOWEST_PRIO <= 63u
X#if 10u <= 63u
N#define  OS_EVENT_TBL_SIZE ((OS_LOWEST_PRIO) / 8u + 1u) /* Size of event table                         */
N#define  OS_RDY_TBL_SIZE   ((OS_LOWEST_PRIO) / 8u + 1u) /* Size of ready table                         */
N#else
S#define  OS_EVENT_TBL_SIZE ((OS_LOWEST_PRIO) / 16u + 1u)/* Size of event table                         */
S#define  OS_RDY_TBL_SIZE   ((OS_LOWEST_PRIO) / 16u + 1u)/* Size of ready table                         */
N#endif
N
N#define  OS_TASK_IDLE_ID            65535u              /* ID numbers for Idle, Stat and Timer tasks   */
N#define  OS_TASK_STAT_ID            65534u
N#define  OS_TASK_TMR_ID             65533u
N
N#define  OS_EVENT_EN           (((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u) || (OS_SEM_EN > 0u) || (OS_MUTEX_EN > 0u))
N
N#define  OS_TCB_RESERVED        ((OS_TCB *)1)
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                              TASK STATUS (Bit definition for OSTCBStat)
N*********************************************************************************************************
N*/
N#define  OS_STAT_RDY                 0x00u  /* Ready to run                                            */
N#define  OS_STAT_SEM                 0x01u  /* Pending on semaphore                                    */
N#define  OS_STAT_MBOX                0x02u  /* Pending on mailbox                                      */
N#define  OS_STAT_Q                   0x04u  /* Pending on queue                                        */
N#define  OS_STAT_SUSPEND             0x08u  /* Task is suspended                                       */
N#define  OS_STAT_MUTEX               0x10u  /* Pending on mutual exclusion semaphore                   */
N#define  OS_STAT_FLAG                0x20u  /* Pending on event flag group                             */
N#define  OS_STAT_MULTI               0x80u  /* Pending on multiple events                              */
N
N#define  OS_STAT_PEND_ANY         (OS_STAT_SEM | OS_STAT_MBOX | OS_STAT_Q | OS_STAT_MUTEX | OS_STAT_FLAG)
N
N/*
N*********************************************************************************************************
N*                           TASK PEND STATUS (Status codes for OSTCBStatPend)
N*********************************************************************************************************
N*/
N#define  OS_STAT_PEND_OK                0u  /* Pending status OK, not pending, or pending complete     */
N#define  OS_STAT_PEND_TO                1u  /* Pending timed out                                       */
N#define  OS_STAT_PEND_ABORT             2u  /* Pending aborted                                         */
N
N/*
N*********************************************************************************************************
N*                                        OS_EVENT types
N*********************************************************************************************************
N*/
N#define  OS_EVENT_TYPE_UNUSED           0u
N#define  OS_EVENT_TYPE_MBOX             1u
N#define  OS_EVENT_TYPE_Q                2u
N#define  OS_EVENT_TYPE_SEM              3u
N#define  OS_EVENT_TYPE_MUTEX            4u
N#define  OS_EVENT_TYPE_FLAG             5u
N
N#define  OS_TMR_TYPE                  100u  /* Used to identify Timers ...                             */
N                                            /* ... (Must be different value than OS_EVENT_TYPE_xxx)    */
N
N/*
N*********************************************************************************************************
N*                                         EVENT FLAGS
N*********************************************************************************************************
N*/
N#define  OS_FLAG_WAIT_CLR_ALL           0u  /* Wait for ALL    the bits specified to be CLR (i.e. 0)   */
N#define  OS_FLAG_WAIT_CLR_AND           0u
N
N#define  OS_FLAG_WAIT_CLR_ANY           1u  /* Wait for ANY of the bits specified to be CLR (i.e. 0)   */
N#define  OS_FLAG_WAIT_CLR_OR            1u
N
N#define  OS_FLAG_WAIT_SET_ALL           2u  /* Wait for ALL    the bits specified to be SET (i.e. 1)   */
N#define  OS_FLAG_WAIT_SET_AND           2u
N
N#define  OS_FLAG_WAIT_SET_ANY           3u  /* Wait for ANY of the bits specified to be SET (i.e. 1)   */
N#define  OS_FLAG_WAIT_SET_OR            3u
N
N
N#define  OS_FLAG_CONSUME             0x80u  /* Consume the flags if condition(s) satisfied             */
N
N
N#define  OS_FLAG_CLR                    0u
N#define  OS_FLAG_SET                    1u
N
N/*
N*********************************************************************************************************
N*                                   Values for OSTickStepState
N*
N* Note(s): This feature is used by uC/OS-View.
N*********************************************************************************************************
N*/
N
N#if OS_TICK_STEP_EN > 0u
X#if 1u > 0u
N#define  OS_TICK_STEP_DIS               0u  /* Stepping is disabled, tick runs as mormal               */
N#define  OS_TICK_STEP_WAIT              1u  /* Waiting for uC/OS-View to set OSTickStepState to _ONCE  */
N#define  OS_TICK_STEP_ONCE              2u  /* Process tick once and wait for next cmd from uC/OS-View */
N#endif
N
N/*
N*********************************************************************************************************
N*       Possible values for 'opt' argument of OSSemDel(), OSMboxDel(), OSQDel() and OSMutexDel()
N*********************************************************************************************************
N*/
N#define  OS_DEL_NO_PEND                 0u
N#define  OS_DEL_ALWAYS                  1u
N
N/*
N*********************************************************************************************************
N*                                        OS???Pend() OPTIONS
N*
N* These #defines are used to establish the options for OS???PendAbort().
N*********************************************************************************************************
N*/
N#define  OS_PEND_OPT_NONE               0u  /* NO option selected                                      */
N#define  OS_PEND_OPT_BROADCAST          1u  /* Broadcast action to ALL tasks waiting                   */
N
N/*
N*********************************************************************************************************
N*                                     OS???PostOpt() OPTIONS
N*
N* These #defines are used to establish the options for OSMboxPostOpt() and OSQPostOpt().
N*********************************************************************************************************
N*/
N#define  OS_POST_OPT_NONE            0x00u  /* NO option selected                                      */
N#define  OS_POST_OPT_BROADCAST       0x01u  /* Broadcast message to ALL tasks waiting                  */
N#define  OS_POST_OPT_FRONT           0x02u  /* Post to highest priority task waiting                   */
N#define  OS_POST_OPT_NO_SCHED        0x04u  /* Do not call the scheduler if this option is selected    */
N
N/*
N*********************************************************************************************************
N*                                 TASK OPTIONS (see OSTaskCreateExt())
N*********************************************************************************************************
N*/
N#define  OS_TASK_OPT_NONE          0x0000u  /* NO option selected                                      */
N#define  OS_TASK_OPT_STK_CHK       0x0001u  /* Enable stack checking for the task                      */
N#define  OS_TASK_OPT_STK_CLR       0x0002u  /* Clear the stack when the task is create                 */
N#define  OS_TASK_OPT_SAVE_FP       0x0004u  /* Save the contents of any floating-point registers       */
N
N/*
N*********************************************************************************************************
N*                            TIMER OPTIONS (see OSTmrStart() and OSTmrStop())
N*********************************************************************************************************
N*/
N#define  OS_TMR_OPT_NONE                0u  /* No option selected                                      */
N
N#define  OS_TMR_OPT_ONE_SHOT            1u  /* Timer will not automatically restart when it expires    */
N#define  OS_TMR_OPT_PERIODIC            2u  /* Timer will     automatically restart when it expires    */
N
N#define  OS_TMR_OPT_CALLBACK            3u  /* OSTmrStop() option to call 'callback' w/ timer arg.     */
N#define  OS_TMR_OPT_CALLBACK_ARG        4u  /* OSTmrStop() option to call 'callback' w/ new   arg.     */
N
N/*
N*********************************************************************************************************
N*                                            TIMER STATES
N*********************************************************************************************************
N*/
N#define  OS_TMR_STATE_UNUSED            0u
N#define  OS_TMR_STATE_STOPPED           1u
N#define  OS_TMR_STATE_COMPLETED         2u
N#define  OS_TMR_STATE_RUNNING           3u
N
N/*
N*********************************************************************************************************
N*                                             ERROR CODES
N*********************************************************************************************************
N*/
N#define OS_ERR_NONE                     0u
N
N#define OS_ERR_EVENT_TYPE               1u
N#define OS_ERR_PEND_ISR                 2u
N#define OS_ERR_POST_NULL_PTR            3u
N#define OS_ERR_PEVENT_NULL              4u
N#define OS_ERR_POST_ISR                 5u
N#define OS_ERR_QUERY_ISR                6u
N#define OS_ERR_INVALID_OPT              7u
N#define OS_ERR_ID_INVALID               8u
N#define OS_ERR_PDATA_NULL               9u
N
N#define OS_ERR_TIMEOUT                 10u
N#define OS_ERR_EVENT_NAME_TOO_LONG     11u
N#define OS_ERR_PNAME_NULL              12u
N#define OS_ERR_PEND_LOCKED             13u
N#define OS_ERR_PEND_ABORT              14u
N#define OS_ERR_DEL_ISR                 15u
N#define OS_ERR_CREATE_ISR              16u
N#define OS_ERR_NAME_GET_ISR            17u
N#define OS_ERR_NAME_SET_ISR            18u
N#define OS_ERR_ILLEGAL_CREATE_RUN_TIME 19u
N
N#define OS_ERR_MBOX_FULL               20u
N
N#define OS_ERR_Q_FULL                  30u
N#define OS_ERR_Q_EMPTY                 31u
N
N#define OS_ERR_PRIO_EXIST              40u
N#define OS_ERR_PRIO                    41u
N#define OS_ERR_PRIO_INVALID            42u
N
N#define OS_ERR_SCHED_LOCKED            50u
N#define OS_ERR_SEM_OVF                 51u
N
N#define OS_ERR_TASK_CREATE_ISR         60u
N#define OS_ERR_TASK_DEL                61u
N#define OS_ERR_TASK_DEL_IDLE           62u
N#define OS_ERR_TASK_DEL_REQ            63u
N#define OS_ERR_TASK_DEL_ISR            64u
N#define OS_ERR_TASK_NAME_TOO_LONG      65u
N#define OS_ERR_TASK_NO_MORE_TCB        66u
N#define OS_ERR_TASK_NOT_EXIST          67u
N#define OS_ERR_TASK_NOT_SUSPENDED      68u
N#define OS_ERR_TASK_OPT                69u
N#define OS_ERR_TASK_RESUME_PRIO        70u
N#define OS_ERR_TASK_SUSPEND_IDLE       71u
N#define OS_ERR_TASK_SUSPEND_PRIO       72u
N#define OS_ERR_TASK_WAITING            73u
N
N#define OS_ERR_TIME_NOT_DLY            80u
N#define OS_ERR_TIME_INVALID_MINUTES    81u
N#define OS_ERR_TIME_INVALID_SECONDS    82u
N#define OS_ERR_TIME_INVALID_MS         83u
N#define OS_ERR_TIME_ZERO_DLY           84u
N#define OS_ERR_TIME_DLY_ISR            85u
N
N#define OS_ERR_MEM_INVALID_PART        90u
N#define OS_ERR_MEM_INVALID_BLKS        91u
N#define OS_ERR_MEM_INVALID_SIZE        92u
N#define OS_ERR_MEM_NO_FREE_BLKS        93u
N#define OS_ERR_MEM_FULL                94u
N#define OS_ERR_MEM_INVALID_PBLK        95u
N#define OS_ERR_MEM_INVALID_PMEM        96u
N#define OS_ERR_MEM_INVALID_PDATA       97u
N#define OS_ERR_MEM_INVALID_ADDR        98u
N#define OS_ERR_MEM_NAME_TOO_LONG       99u
N
N#define OS_ERR_NOT_MUTEX_OWNER        100u
N
N#define OS_ERR_FLAG_INVALID_PGRP      110u
N#define OS_ERR_FLAG_WAIT_TYPE         111u
N#define OS_ERR_FLAG_NOT_RDY           112u
N#define OS_ERR_FLAG_INVALID_OPT       113u
N#define OS_ERR_FLAG_GRP_DEPLETED      114u
N#define OS_ERR_FLAG_NAME_TOO_LONG     115u
N
N#define OS_ERR_PIP_LOWER              120u
N
N#define OS_ERR_TMR_INVALID_DLY        130u
N#define OS_ERR_TMR_INVALID_PERIOD     131u
N#define OS_ERR_TMR_INVALID_OPT        132u
N#define OS_ERR_TMR_INVALID_NAME       133u
N#define OS_ERR_TMR_NON_AVAIL          134u
N#define OS_ERR_TMR_INACTIVE           135u
N#define OS_ERR_TMR_INVALID_DEST       136u
N#define OS_ERR_TMR_INVALID_TYPE       137u
N#define OS_ERR_TMR_INVALID            138u
N#define OS_ERR_TMR_ISR                139u
N#define OS_ERR_TMR_NAME_TOO_LONG      140u
N#define OS_ERR_TMR_INVALID_STATE      141u
N#define OS_ERR_TMR_STOPPED            142u
N#define OS_ERR_TMR_NO_CALLBACK        143u
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          EVENT CONTROL BLOCK
N*********************************************************************************************************
N*/
N
N#if OS_LOWEST_PRIO <= 63u
X#if 10u <= 63u
Ntypedef  INT8U    OS_PRIO;
N#else
Stypedef  INT16U   OS_PRIO;
N#endif
N
N#if (OS_EVENT_EN) && (OS_MAX_EVENTS > 0u)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u))) && (10u > 0u)
Ntypedef struct os_event {
N    INT8U    OSEventType;                    /* Type of event control block (see OS_EVENT_TYPE_xxxx)    */
N    void    *OSEventPtr;                     /* Pointer to message or queue structure                   */
N    INT16U   OSEventCnt;                     /* Semaphore Count (not used if other EVENT type)          */
N    OS_PRIO  OSEventGrp;                     /* Group corresponding to tasks waiting for event to occur */
N    OS_PRIO  OSEventTbl[OS_EVENT_TBL_SIZE];  /* List of tasks waiting for event to occur                */
X    OS_PRIO  OSEventTbl[((10u) / 8u + 1u)];   
N
N#if OS_EVENT_NAME_EN > 0u
X#if 1u > 0u
N    INT8U   *OSEventName;
N#endif
N} OS_EVENT;
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                       EVENT FLAGS CONTROL BLOCK
N*********************************************************************************************************
N*/
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
X#if (1u > 0u) && (5u > 0u)
N
N#if OS_FLAGS_NBITS == 8u                    /* Determine the size of OS_FLAGS (8, 16 or 32 bits)       */
X#if 8u == 8u                     
Ntypedef  INT8U    OS_FLAGS;
N#endif
N
N#if OS_FLAGS_NBITS == 16u
X#if 8u == 16u
Stypedef  INT16U   OS_FLAGS;
N#endif
N
N#if OS_FLAGS_NBITS == 32u
X#if 8u == 32u
Stypedef  INT32U   OS_FLAGS;
N#endif
N
N
Ntypedef struct os_flag_grp {                /* Event Flag Group                                        */
N    INT8U         OSFlagType;               /* Should be set to OS_EVENT_TYPE_FLAG                     */
N    void         *OSFlagWaitList;           /* Pointer to first NODE of task waiting on event flag     */
N    OS_FLAGS      OSFlagFlags;              /* 8, 16 or 32 bit flags                                   */
N#if OS_FLAG_NAME_EN > 0u
X#if 1u > 0u
N    INT8U        *OSFlagName;
N#endif
N} OS_FLAG_GRP;
N
N
N
Ntypedef struct os_flag_node {               /* Event Flag Wait List Node                               */
N    void         *OSFlagNodeNext;           /* Pointer to next     NODE in wait list                   */
N    void         *OSFlagNodePrev;           /* Pointer to previous NODE in wait list                   */
N    void         *OSFlagNodeTCB;            /* Pointer to TCB of waiting task                          */
N    void         *OSFlagNodeFlagGrp;        /* Pointer to Event Flag Group                             */
N    OS_FLAGS      OSFlagNodeFlags;          /* Event flag to wait on                                   */
N    INT8U         OSFlagNodeWaitType;       /* Type of wait:                                           */
N                                            /*      OS_FLAG_WAIT_AND                                   */
N                                            /*      OS_FLAG_WAIT_ALL                                   */
N                                            /*      OS_FLAG_WAIT_OR                                    */
N                                            /*      OS_FLAG_WAIT_ANY                                   */
N} OS_FLAG_NODE;
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          MESSAGE MAILBOX DATA
N*********************************************************************************************************
N*/
N
N#if OS_MBOX_EN > 0u
X#if 1u > 0u
Ntypedef struct os_mbox_data {
N    void   *OSMsg;                         /* Pointer to message in mailbox                            */
N    OS_PRIO OSEventTbl[OS_EVENT_TBL_SIZE]; /* List of tasks waiting for event to occur                 */
X    OS_PRIO OSEventTbl[((10u) / 8u + 1u)];  
N    OS_PRIO OSEventGrp;                    /* Group corresponding to tasks waiting for event to occur  */
N} OS_MBOX_DATA;
N#endif
N
N/*
N*********************************************************************************************************
N*                                     MEMORY PARTITION DATA STRUCTURES
N*********************************************************************************************************
N*/
N
N#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
X#if (1u > 0u) && (5u > 0u)
Ntypedef struct os_mem {                   /* MEMORY CONTROL BLOCK                                      */
N    void   *OSMemAddr;                    /* Pointer to beginning of memory partition                  */
N    void   *OSMemFreeList;                /* Pointer to list of free memory blocks                     */
N    INT32U  OSMemBlkSize;                 /* Size (in bytes) of each block of memory                   */
N    INT32U  OSMemNBlks;                   /* Total number of blocks in this partition                  */
N    INT32U  OSMemNFree;                   /* Number of memory blocks remaining in this partition       */
N#if OS_MEM_NAME_EN > 0u
X#if 1u > 0u
N    INT8U  *OSMemName;                    /* Memory partition name                                     */
N#endif
N} OS_MEM;
N
N
Ntypedef struct os_mem_data {
N    void   *OSAddr;                    /* Pointer to the beginning address of the memory partition     */
N    void   *OSFreeList;                /* Pointer to the beginning of the free list of memory blocks   */
N    INT32U  OSBlkSize;                 /* Size (in bytes) of each memory block                         */
N    INT32U  OSNBlks;                   /* Total number of blocks in the partition                      */
N    INT32U  OSNFree;                   /* Number of memory blocks free                                 */
N    INT32U  OSNUsed;                   /* Number of memory blocks used                                 */
N} OS_MEM_DATA;
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                    MUTUAL EXCLUSION SEMAPHORE DATA
N*********************************************************************************************************
N*/
N
N#if OS_MUTEX_EN > 0u
X#if 1u > 0u
Ntypedef struct os_mutex_data {
N    OS_PRIO OSEventTbl[OS_EVENT_TBL_SIZE];  /* List of tasks waiting for event to occur                */
X    OS_PRIO OSEventTbl[((10u) / 8u + 1u)];   
N    OS_PRIO OSEventGrp;                     /* Group corresponding to tasks waiting for event to occur */
N    BOOLEAN OSValue;                        /* Mutex value (OS_FALSE = used, OS_TRUE = available)      */
N    INT8U   OSOwnerPrio;                    /* Mutex owner's task priority or 0xFF if no owner         */
N    INT8U   OSMutexPIP;                     /* Priority Inheritance Priority or 0xFF if no owner       */
N} OS_MUTEX_DATA;
N#endif
N
N/*
N*********************************************************************************************************
N*                                          MESSAGE QUEUE DATA
N*********************************************************************************************************
N*/
N
N#if OS_Q_EN > 0u
X#if 0u > 0u
Stypedef struct os_q {                   /* QUEUE CONTROL BLOCK                                         */
S    struct os_q   *OSQPtr;              /* Link to next queue control block in list of free blocks     */
S    void         **OSQStart;            /* Pointer to start of queue data                              */
S    void         **OSQEnd;              /* Pointer to end   of queue data                              */
S    void         **OSQIn;               /* Pointer to where next message will be inserted  in   the Q  */
S    void         **OSQOut;              /* Pointer to where next message will be extracted from the Q  */
S    INT16U         OSQSize;             /* Size of queue (maximum number of entries)                   */
S    INT16U         OSQEntries;          /* Current number of entries in the queue                      */
S} OS_Q;
S
S
Stypedef struct os_q_data {
S    void          *OSMsg;               /* Pointer to next message to be extracted from queue          */
S    INT16U         OSNMsgs;             /* Number of messages in message queue                         */
S    INT16U         OSQSize;             /* Size of message queue                                       */
S    OS_PRIO        OSEventTbl[OS_EVENT_TBL_SIZE];  /* List of tasks waiting for event to occur         */
S    OS_PRIO        OSEventGrp;          /* Group corresponding to tasks waiting for event to occur     */
S} OS_Q_DATA;
N#endif
N
N/*
N*********************************************************************************************************
N*                                           SEMAPHORE DATA
N*********************************************************************************************************
N*/
N
N#if OS_SEM_EN > 0u
X#if 1u > 0u
Ntypedef struct os_sem_data {
N    INT16U  OSCnt;                          /* Semaphore count                                         */
N    OS_PRIO OSEventTbl[OS_EVENT_TBL_SIZE];  /* List of tasks waiting for event to occur                */
X    OS_PRIO OSEventTbl[((10u) / 8u + 1u)];   
N    OS_PRIO OSEventGrp;                     /* Group corresponding to tasks waiting for event to occur */
N} OS_SEM_DATA;
N#endif
N
N/*
N*********************************************************************************************************
N*                                            TASK STACK DATA
N*********************************************************************************************************
N*/
N
N#if OS_TASK_CREATE_EXT_EN > 0u
X#if 1u > 0u
Ntypedef struct os_stk_data {
N    INT32U  OSFree;                    /* Number of free entries on the stack                          */
N    INT32U  OSUsed;                    /* Number of entries used on the stack                          */
N} OS_STK_DATA;
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          TASK CONTROL BLOCK
N*********************************************************************************************************
N*/
N
Ntypedef struct os_tcb {
N    OS_STK          *OSTCBStkPtr;           /* Pointer to current top of stack                         */
N
N#if OS_TASK_CREATE_EXT_EN > 0u
X#if 1u > 0u
N    void            *OSTCBExtPtr;           /* Pointer to user definable data for TCB extension        */
N    OS_STK          *OSTCBStkBottom;        /* Pointer to bottom of stack                              */
N    INT32U           OSTCBStkSize;          /* Size of task stack (in number of stack elements)        */
N    INT16U           OSTCBOpt;              /* Task options as passed by OSTaskCreateExt()             */
N    INT16U           OSTCBId;               /* Task ID (0..65535)                                      */
N#endif
N
N    struct os_tcb   *OSTCBNext;             /* Pointer to next     TCB in the TCB list                 */
N    struct os_tcb   *OSTCBPrev;             /* Pointer to previous TCB in the TCB list                 */
N
N#if (OS_EVENT_EN)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u)))
N    OS_EVENT        *OSTCBEventPtr;         /* Pointer to          event control block                 */
N#endif
N
N#if (OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u))) && (1u > 0u)
N    OS_EVENT       **OSTCBEventMultiPtr;    /* Pointer to multiple event control blocks                */
N#endif
N
N#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
X#if ((0u > 0u) && (3u > 0u)) || (1u > 0u)
N    void            *OSTCBMsg;              /* Message received from OSMboxPost() or OSQPost()         */
N#endif
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
X#if (1u > 0u) && (5u > 0u)
N#if OS_TASK_DEL_EN > 0u
X#if 1u > 0u
N    OS_FLAG_NODE    *OSTCBFlagNode;         /* Pointer to event flag node                              */
N#endif
N    OS_FLAGS         OSTCBFlagsRdy;         /* Event flags that made task ready to run                 */
N#endif
N
N    INT32U           OSTCBDly;              /* Nbr ticks to delay task or, timeout waiting for event   */
N    INT8U            OSTCBStat;             /* Task      status                                        */
N    INT8U            OSTCBStatPend;         /* Task PEND status                                        */
N    INT8U            OSTCBPrio;             /* Task priority (0 == highest)                            */
N
N    INT8U            OSTCBX;                /* Bit position in group  corresponding to task priority   */
N    INT8U            OSTCBY;                /* Index into ready table corresponding to task priority   */
N    OS_PRIO          OSTCBBitX;             /* Bit mask to access bit position in ready table          */
N    OS_PRIO          OSTCBBitY;             /* Bit mask to access bit position in ready group          */
N
N#if OS_TASK_DEL_EN > 0u
X#if 1u > 0u
N    INT8U            OSTCBDelReq;           /* Indicates whether a task needs to delete itself         */
N#endif
N
N#if OS_TASK_PROFILE_EN > 0u
X#if 1u > 0u
N    INT32U           OSTCBCtxSwCtr;         /* Number of time the task was switched in                 */
N    INT32U           OSTCBCyclesTot;        /* Total number of clock cycles the task has been running  */
N    INT32U           OSTCBCyclesStart;      /* Snapshot of cycle counter at start of task resumption   */
N    OS_STK          *OSTCBStkBase;          /* Pointer to the beginning of the task stack              */
N    INT32U           OSTCBStkUsed;          /* Number of bytes used from the stack                     */
N#endif
N
N#if OS_TASK_NAME_EN > 0u
X#if 1u > 0u
N    INT8U           *OSTCBTaskName;
N#endif
N
N#if OS_TASK_REG_TBL_SIZE > 0u
X#if 1u > 0u
N    INT32U           OSTCBRegTbl[OS_TASK_REG_TBL_SIZE];
X    INT32U           OSTCBRegTbl[1u];
N#endif
N} OS_TCB;
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                                   TIMER DATA TYPES
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
Ntypedef  void (*OS_TMR_CALLBACK)(void *ptmr, void *parg);
N
N
N
Ntypedef  struct  os_tmr {
N    INT8U            OSTmrType;                       /* Should be set to OS_TMR_TYPE                                  */
N    OS_TMR_CALLBACK  OSTmrCallback;                   /* Function to call when timer expires                           */
N    void            *OSTmrCallbackArg;                /* Argument to pass to function when timer expires               */
N    void            *OSTmrNext;                       /* Double link list pointers                                     */
N    void            *OSTmrPrev;
N    INT32U           OSTmrMatch;                      /* Timer expires when OSTmrTime == OSTmrMatch                    */
N    INT32U           OSTmrDly;                        /* Delay time before periodic update starts                      */
N    INT32U           OSTmrPeriod;                     /* Period to repeat timer                                        */
N#if OS_TMR_CFG_NAME_EN > 0u
X#if 1u > 0u
N    INT8U           *OSTmrName;                       /* Name to give the timer                                        */
N#endif
N    INT8U            OSTmrOpt;                        /* Options (see OS_TMR_OPT_xxx)                                  */
N    INT8U            OSTmrState;                      /* Indicates the state of the timer:                             */
N                                                      /*     OS_TMR_STATE_UNUSED                                       */
N                                                      /*     OS_TMR_STATE_RUNNING                                      */
N                                                      /*     OS_TMR_STATE_STOPPED                                      */
N} OS_TMR;
N
N
N
Ntypedef  struct  os_tmr_wheel {
N    OS_TMR          *OSTmrFirst;                      /* Pointer to first timer in linked list                         */
N    INT16U           OSTmrEntries;
N} OS_TMR_WHEEL;
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
NOS_EXT  INT32U            OSCtxSwCtr;               /* Counter of number of context switches           */
X  INT32U            OSCtxSwCtr;                
N
N#if (OS_EVENT_EN) && (OS_MAX_EVENTS > 0u)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u))) && (10u > 0u)
NOS_EXT  OS_EVENT         *OSEventFreeList;          /* Pointer to list of free EVENT control blocks    */
X  OS_EVENT         *OSEventFreeList;           
NOS_EXT  OS_EVENT          OSEventTbl[OS_MAX_EVENTS];/* Table of EVENT control blocks                   */
X  OS_EVENT          OSEventTbl[10u]; 
N#endif
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
X#if (1u > 0u) && (5u > 0u)
NOS_EXT  OS_FLAG_GRP       OSFlagTbl[OS_MAX_FLAGS];  /* Table containing event flag groups              */
X  OS_FLAG_GRP       OSFlagTbl[5u];   
NOS_EXT  OS_FLAG_GRP      *OSFlagFreeList;           /* Pointer to free list of event flag groups       */
X  OS_FLAG_GRP      *OSFlagFreeList;            
N#endif
N
N#if OS_TASK_STAT_EN > 0u
X#if 1u > 0u
NOS_EXT  INT8U             OSCPUUsage;               /* Percentage of CPU used                          */
X  INT8U             OSCPUUsage;                
NOS_EXT  INT32U            OSIdleCtrMax;             /* Max. value that idle ctr can take in 1 sec.     */
X  INT32U            OSIdleCtrMax;              
NOS_EXT  INT32U            OSIdleCtrRun;             /* Val. reached by idle ctr at run time in 1 sec.  */
X  INT32U            OSIdleCtrRun;              
NOS_EXT  BOOLEAN           OSStatRdy;                /* Flag indicating that the statistic task is rdy  */
X  BOOLEAN           OSStatRdy;                 
NOS_EXT  OS_STK            OSTaskStatStk[OS_TASK_STAT_STK_SIZE];      /* Statistics task stack          */
X  OS_STK            OSTaskStatStk[15u];       
N#endif
N
NOS_EXT  INT8U             OSIntNesting;             /* Interrupt nesting level                         */
X  INT8U             OSIntNesting;              
N
NOS_EXT  INT8U             OSLockNesting;            /* Multitasking lock nesting level                 */
X  INT8U             OSLockNesting;             
N
NOS_EXT  INT8U             OSPrioCur;                /* Priority of current task                        */
X  INT8U             OSPrioCur;                 
NOS_EXT  INT8U             OSPrioHighRdy;            /* Priority of highest priority task               */
X  INT8U             OSPrioHighRdy;             
N
NOS_EXT  OS_PRIO           OSRdyGrp;                        /* Ready list group                         */
X  OS_PRIO           OSRdyGrp;                         
NOS_EXT  OS_PRIO           OSRdyTbl[OS_RDY_TBL_SIZE];       /* Table of tasks which are ready to run    */
X  OS_PRIO           OSRdyTbl[((10u) / 8u + 1u)];        
N
NOS_EXT  BOOLEAN           OSRunning;                       /* Flag indicating that kernel is running   */
X  BOOLEAN           OSRunning;                        
N
NOS_EXT  INT8U             OSTaskCtr;                       /* Number of tasks created                  */
X  INT8U             OSTaskCtr;                        
N
NOS_EXT  volatile  INT32U  OSIdleCtr;                                 /* Idle counter                   */
X  volatile  INT32U  OSIdleCtr;                                  
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
SOS_EXT  BOOLEAN           OSSafetyCriticalStartFlag;
N#endif
N
NOS_EXT  OS_STK            OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE];      /* Idle task stack                */
X  OS_STK            OSTaskIdleStk[15u];       
N
N
NOS_EXT  OS_TCB           *OSTCBCur;                        /* Pointer to currently running TCB         */
X  OS_TCB           *OSTCBCur;                         
NOS_EXT  OS_TCB           *OSTCBFreeList;                   /* Pointer to list of free TCBs             */
X  OS_TCB           *OSTCBFreeList;                    
NOS_EXT  OS_TCB           *OSTCBHighRdy;                    /* Pointer to highest priority TCB R-to-R   */
X  OS_TCB           *OSTCBHighRdy;                     
NOS_EXT  OS_TCB           *OSTCBList;                       /* Pointer to doubly linked list of TCBs    */
X  OS_TCB           *OSTCBList;                        
NOS_EXT  OS_TCB           *OSTCBPrioTbl[OS_LOWEST_PRIO + 1u];    /* Table of pointers to created TCBs   */
X  OS_TCB           *OSTCBPrioTbl[10u + 1u];     
NOS_EXT  OS_TCB            OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS];   /* Table of TCBs                  */
X  OS_TCB            OSTCBTbl[7u + 2u];    
N
N#if OS_TICK_STEP_EN > 0u
X#if 1u > 0u
NOS_EXT  INT8U             OSTickStepState;          /* Indicates the state of the tick step feature    */
X  INT8U             OSTickStepState;           
N#endif
N
N#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
X#if (1u > 0u) && (5u > 0u)
NOS_EXT  OS_MEM           *OSMemFreeList;            /* Pointer to free list of memory partitions       */
X  OS_MEM           *OSMemFreeList;             
NOS_EXT  OS_MEM            OSMemTbl[OS_MAX_MEM_PART];/* Storage for memory partition manager            */
X  OS_MEM            OSMemTbl[5u]; 
N#endif
N
N#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
X#if (0u > 0u) && (3u > 0u)
SOS_EXT  OS_Q             *OSQFreeList;              /* Pointer to list of free QUEUE control blocks    */
SOS_EXT  OS_Q              OSQTbl[OS_MAX_QS];        /* Table of QUEUE control blocks                   */
N#endif
N
N#if OS_TIME_GET_SET_EN > 0u
X#if 1u > 0u
NOS_EXT  volatile  INT32U  OSTime;                   /* Current value of system time (in ticks)         */
X  volatile  INT32U  OSTime;                    
N#endif
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
NOS_EXT  INT16U            OSTmrFree;                /* Number of free entries in the timer pool        */
X  INT16U            OSTmrFree;                 
NOS_EXT  INT16U            OSTmrUsed;                /* Number of timers used                           */
X  INT16U            OSTmrUsed;                 
NOS_EXT  INT32U            OSTmrTime;                /* Current timer time                              */
X  INT32U            OSTmrTime;                 
N
NOS_EXT  OS_EVENT         *OSTmrSem;                 /* Sem. used to gain exclusive access to timers    */
X  OS_EVENT         *OSTmrSem;                  
NOS_EXT  OS_EVENT         *OSTmrSemSignal;           /* Sem. used to signal the update of timers        */
X  OS_EVENT         *OSTmrSemSignal;            
N
NOS_EXT  OS_TMR            OSTmrTbl[OS_TMR_CFG_MAX]; /* Table containing pool of timers                 */
X  OS_TMR            OSTmrTbl[8u];  
NOS_EXT  OS_TMR           *OSTmrFreeList;            /* Pointer to free list of timers                  */
X  OS_TMR           *OSTmrFreeList;             
NOS_EXT  OS_STK            OSTmrTaskStk[OS_TASK_TMR_STK_SIZE];
X  OS_STK            OSTmrTaskStk[15u];
N
NOS_EXT  OS_TMR_WHEEL      OSTmrWheelTbl[OS_TMR_CFG_WHEEL_SIZE];
X  OS_TMR_WHEEL      OSTmrWheelTbl[8u];
N#endif
N
Nextern  INT8U   const     OSUnMapTbl[256];          /* Priority->Index    lookup table                 */
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          FUNCTION PROTOTYPES
N*                                     (Target Independent Functions)
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                            MISCELLANEOUS
N*********************************************************************************************************
N*/
N
N#if (OS_EVENT_EN)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u)))
N
N#if (OS_EVENT_NAME_EN > 0u)
X#if (1u > 0u)
NINT8U         OSEventNameGet          (OS_EVENT        *pevent,
N                                       INT8U          **pname,
N                                       INT8U           *perr);
N
Nvoid          OSEventNameSet          (OS_EVENT        *pevent,
N                                       INT8U           *pname,
N                                       INT8U           *perr);
N#endif
N
N#if (OS_EVENT_MULTI_EN > 0u)
X#if (1u > 0u)
NINT16U        OSEventPendMulti        (OS_EVENT       **pevents_pend,
N                                       OS_EVENT       **pevents_rdy,
N                                       void           **pmsgs_rdy,
N                                       INT32U           timeout,
N                                       INT8U           *perr);
N#endif
N
N#endif
N
N/*
N*********************************************************************************************************
N*                                         EVENT FLAGS MANAGEMENT
N*********************************************************************************************************
N*/
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
X#if (1u > 0u) && (5u > 0u)
N
N#if OS_FLAG_ACCEPT_EN > 0u
X#if 1u > 0u
NOS_FLAGS      OSFlagAccept            (OS_FLAG_GRP     *pgrp,
N                                       OS_FLAGS         flags,
N                                       INT8U            wait_type,
N                                       INT8U           *perr);
N#endif
N
NOS_FLAG_GRP  *OSFlagCreate            (OS_FLAGS         flags,
N                                       INT8U           *perr);
N
N#if OS_FLAG_DEL_EN > 0u
X#if 1u > 0u
NOS_FLAG_GRP  *OSFlagDel               (OS_FLAG_GRP     *pgrp,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N#endif
N
N#if (OS_FLAG_EN > 0u) && (OS_FLAG_NAME_EN > 0u)
X#if (1u > 0u) && (1u > 0u)
NINT8U         OSFlagNameGet           (OS_FLAG_GRP     *pgrp,
N                                       INT8U          **pname,
N                                       INT8U           *perr);
N
Nvoid          OSFlagNameSet           (OS_FLAG_GRP     *pgrp,
N                                       INT8U           *pname,
N                                       INT8U           *perr);
N#endif
N
NOS_FLAGS      OSFlagPend              (OS_FLAG_GRP     *pgrp,
N                                       OS_FLAGS         flags,
N                                       INT8U            wait_type,
N                                       INT32U           timeout,
N                                       INT8U           *perr);
N
NOS_FLAGS      OSFlagPendGetFlagsRdy   (void);
NOS_FLAGS      OSFlagPost              (OS_FLAG_GRP     *pgrp,
N                                       OS_FLAGS         flags,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N
N#if OS_FLAG_QUERY_EN > 0u
X#if 1u > 0u
NOS_FLAGS      OSFlagQuery             (OS_FLAG_GRP     *pgrp,
N                                       INT8U           *perr);
N#endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                        MESSAGE MAILBOX MANAGEMENT
N*********************************************************************************************************
N*/
N
N#if OS_MBOX_EN > 0u
X#if 1u > 0u
N
N#if OS_MBOX_ACCEPT_EN > 0u
X#if 1u > 0u
Nvoid         *OSMboxAccept            (OS_EVENT        *pevent);
N#endif
N
NOS_EVENT     *OSMboxCreate            (void            *pmsg);
N
N#if OS_MBOX_DEL_EN > 0u
X#if 1u > 0u
NOS_EVENT     *OSMboxDel               (OS_EVENT        *pevent,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N#endif
N
Nvoid         *OSMboxPend              (OS_EVENT        *pevent,
N                                       INT32U           timeout,
N                                       INT8U           *perr);
N
N#if OS_MBOX_PEND_ABORT_EN > 0u
X#if 1u > 0u
NINT8U         OSMboxPendAbort         (OS_EVENT        *pevent,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N#endif
N
N#if OS_MBOX_POST_EN > 0u
X#if 1u > 0u
NINT8U         OSMboxPost              (OS_EVENT        *pevent,
N                                       void            *pmsg);
N#endif
N
N#if OS_MBOX_POST_OPT_EN > 0u
X#if 1u > 0u
NINT8U         OSMboxPostOpt           (OS_EVENT        *pevent,
N                                       void            *pmsg,
N                                       INT8U            opt);
N#endif
N
N#if OS_MBOX_QUERY_EN > 0u
X#if 1u > 0u
NINT8U         OSMboxQuery             (OS_EVENT        *pevent,
N                                       OS_MBOX_DATA    *p_mbox_data);
N#endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                           MEMORY MANAGEMENT
N*********************************************************************************************************
N*/
N
N#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
X#if (1u > 0u) && (5u > 0u)
N
NOS_MEM       *OSMemCreate             (void            *addr,
N                                       INT32U           nblks,
N                                       INT32U           blksize,
N                                       INT8U           *perr);
N
Nvoid         *OSMemGet                (OS_MEM          *pmem,
N                                       INT8U           *perr);
N#if OS_MEM_NAME_EN > 0u
X#if 1u > 0u
NINT8U         OSMemNameGet            (OS_MEM          *pmem,
N                                       INT8U          **pname,
N                                       INT8U           *perr);
N
Nvoid          OSMemNameSet            (OS_MEM          *pmem,
N                                       INT8U           *pname,
N                                       INT8U           *perr);
N#endif
NINT8U         OSMemPut                (OS_MEM          *pmem,
N                                       void            *pblk);
N
N#if OS_MEM_QUERY_EN > 0u
X#if 1u > 0u
NINT8U         OSMemQuery              (OS_MEM          *pmem,
N                                       OS_MEM_DATA     *p_mem_data);
N#endif
N
N#endif
N
N/*
N*********************************************************************************************************
N*                                MUTUAL EXCLUSION SEMAPHORE MANAGEMENT
N*********************************************************************************************************
N*/
N
N#if OS_MUTEX_EN > 0u
X#if 1u > 0u
N
N#if OS_MUTEX_ACCEPT_EN > 0u
X#if 1u > 0u
NBOOLEAN       OSMutexAccept           (OS_EVENT        *pevent,
N                                       INT8U           *perr);
N#endif
N
NOS_EVENT     *OSMutexCreate           (INT8U            prio,
N                                       INT8U           *perr);
N
N#if OS_MUTEX_DEL_EN > 0u
X#if 1u > 0u
NOS_EVENT     *OSMutexDel              (OS_EVENT        *pevent,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N#endif
N
Nvoid          OSMutexPend             (OS_EVENT        *pevent,
N                                       INT32U           timeout,
N                                       INT8U           *perr);
N
NINT8U         OSMutexPost             (OS_EVENT        *pevent);
N
N#if OS_MUTEX_QUERY_EN > 0u
X#if 1u > 0u
NINT8U         OSMutexQuery            (OS_EVENT        *pevent,
N                                       OS_MUTEX_DATA   *p_mutex_data);
N#endif
N
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         MESSAGE QUEUE MANAGEMENT
N*********************************************************************************************************
N*/
N
N#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
X#if (0u > 0u) && (3u > 0u)
S
S#if OS_Q_ACCEPT_EN > 0u
Svoid         *OSQAccept               (OS_EVENT        *pevent,
S                                       INT8U           *perr);
S#endif
S
SOS_EVENT     *OSQCreate               (void           **start,
S                                       INT16U           size);
S
S#if OS_Q_DEL_EN > 0u
SOS_EVENT     *OSQDel                  (OS_EVENT        *pevent,
S                                       INT8U            opt,
S                                       INT8U           *perr);
S#endif
S
S#if OS_Q_FLUSH_EN > 0u
SINT8U         OSQFlush                (OS_EVENT        *pevent);
S#endif
S
Svoid         *OSQPend                 (OS_EVENT        *pevent,
S                                       INT32U           timeout,
S                                       INT8U           *perr);
S
S#if OS_Q_PEND_ABORT_EN > 0u
SINT8U         OSQPendAbort            (OS_EVENT        *pevent,
S                                       INT8U            opt,
S                                       INT8U           *perr);
S#endif
S
S#if OS_Q_POST_EN > 0u
SINT8U         OSQPost                 (OS_EVENT        *pevent,
S                                       void            *pmsg);
S#endif
S
S#if OS_Q_POST_FRONT_EN > 0u
SINT8U         OSQPostFront            (OS_EVENT        *pevent,
S                                       void            *pmsg);
S#endif
S
S#if OS_Q_POST_OPT_EN > 0u
SINT8U         OSQPostOpt              (OS_EVENT        *pevent,
S                                       void            *pmsg,
S                                       INT8U            opt);
S#endif
S
S#if OS_Q_QUERY_EN > 0u
SINT8U         OSQQuery                (OS_EVENT        *pevent,
S                                       OS_Q_DATA       *p_q_data);
S#endif
S
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          SEMAPHORE MANAGEMENT
N*********************************************************************************************************
N*/
N#if OS_SEM_EN > 0u
X#if 1u > 0u
N
N#if OS_SEM_ACCEPT_EN > 0u
X#if 1u > 0u
NINT16U        OSSemAccept             (OS_EVENT        *pevent);
N#endif
N
NOS_EVENT     *OSSemCreate             (INT16U           cnt);
N
N#if OS_SEM_DEL_EN > 0u
X#if 1u > 0u
NOS_EVENT     *OSSemDel                (OS_EVENT        *pevent,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N#endif
N
Nvoid          OSSemPend               (OS_EVENT        *pevent,
N                                       INT32U           timeout,
N                                       INT8U           *perr);
N
N#if OS_SEM_PEND_ABORT_EN > 0u
X#if 1u > 0u
NINT8U         OSSemPendAbort          (OS_EVENT        *pevent,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N#endif
N
NINT8U         OSSemPost               (OS_EVENT        *pevent);
N
N#if OS_SEM_QUERY_EN > 0u
X#if 1u > 0u
NINT8U         OSSemQuery              (OS_EVENT        *pevent,
N                                       OS_SEM_DATA     *p_sem_data);
N#endif
N
N#if OS_SEM_SET_EN > 0u
X#if 1u > 0u
Nvoid          OSSemSet                (OS_EVENT        *pevent,
N                                       INT16U           cnt,
N                                       INT8U           *perr);
N#endif
N
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            TASK MANAGEMENT
N*********************************************************************************************************
N*/
N#if OS_TASK_CHANGE_PRIO_EN > 0u
X#if 1u > 0u
NINT8U         OSTaskChangePrio        (INT8U            oldprio,
N                                       INT8U            newprio);
N#endif
N
N#if OS_TASK_CREATE_EN > 0u
X#if 1u > 0u
NINT8U         OSTaskCreate            (void           (*task)(void *p_arg),
N                                       void            *p_arg,
N                                       OS_STK          *ptos,
N                                       INT8U            prio);
N#endif
N
N#if OS_TASK_CREATE_EXT_EN > 0u
X#if 1u > 0u
NINT8U         OSTaskCreateExt         (void           (*task)(void *p_arg),
N                                       void            *p_arg,
N                                       OS_STK          *ptos,
N                                       INT8U            prio,
N                                       INT16U           id,
N                                       OS_STK          *pbos,
N                                       INT32U           stk_size,
N                                       void            *pext,
N                                       INT16U           opt);
N#endif
N
N#if OS_TASK_DEL_EN > 0u
X#if 1u > 0u
NINT8U         OSTaskDel               (INT8U            prio);
NINT8U         OSTaskDelReq            (INT8U            prio);
N#endif
N
N#if OS_TASK_NAME_EN > 0u
X#if 1u > 0u
NINT8U         OSTaskNameGet           (INT8U            prio,
N                                       INT8U          **pname,
N                                       INT8U           *perr);
N
Nvoid          OSTaskNameSet           (INT8U            prio,
N                                       INT8U           *pname,
N                                       INT8U           *perr);
N#endif
N
N#if OS_TASK_SUSPEND_EN > 0u
X#if 1u > 0u
NINT8U         OSTaskResume            (INT8U            prio);
NINT8U         OSTaskSuspend           (INT8U            prio);
N#endif
N
N#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
X#if (1u > 0u) && (1u > 0u)
NINT8U         OSTaskStkChk            (INT8U            prio,
N                                       OS_STK_DATA     *p_stk_data);
N#endif
N
N#if OS_TASK_QUERY_EN > 0u
X#if 1u > 0u
NINT8U         OSTaskQuery             (INT8U            prio,
N                                       OS_TCB          *p_task_data);
N#endif
N
N
N
N#if OS_TASK_REG_TBL_SIZE > 0u
X#if 1u > 0u
NINT32U        OSTaskRegGet            (INT8U            prio,
N                                       INT8U            id,
N                                       INT8U           *perr);
N
Nvoid          OSTaskRegSet            (INT8U            prio,
N                                       INT8U            id,
N                                       INT32U           value,
N                                       INT8U           *perr);
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            TIME MANAGEMENT
N*********************************************************************************************************
N*/
N
Nvoid          OSTimeDly               (INT32U           ticks);
N
N#if OS_TIME_DLY_HMSM_EN > 0u
X#if 1u > 0u
NINT8U         OSTimeDlyHMSM           (INT8U            hours,
N                                       INT8U            minutes,
N                                       INT8U            seconds,
N                                       INT16U           ms);
N#endif
N
N#if OS_TIME_DLY_RESUME_EN > 0u
X#if 1u > 0u
NINT8U         OSTimeDlyResume         (INT8U            prio);
N#endif
N
N#if OS_TIME_GET_SET_EN > 0u
X#if 1u > 0u
NINT32U        OSTimeGet               (void);
Nvoid          OSTimeSet               (INT32U           ticks);
N#endif
N
Nvoid          OSTimeTick              (void);
N
N/*
N*********************************************************************************************************
N*                                            TIMER MANAGEMENT
N*********************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
NOS_TMR      *OSTmrCreate              (INT32U           dly,
N                                       INT32U           period,
N                                       INT8U            opt,
N                                       OS_TMR_CALLBACK  callback,
N                                       void            *callback_arg,
N                                       INT8U           *pname,
N                                       INT8U           *perr);
N
NBOOLEAN      OSTmrDel                 (OS_TMR          *ptmr,
N                                       INT8U           *perr);
N
N#if OS_TMR_CFG_NAME_EN > 0u
X#if 1u > 0u
NINT8U        OSTmrNameGet             (OS_TMR          *ptmr,
N                                       INT8U          **pdest,
N                                       INT8U           *perr);
N#endif
NINT32U       OSTmrRemainGet           (OS_TMR          *ptmr,
N                                       INT8U           *perr);
N
NINT8U        OSTmrStateGet            (OS_TMR          *ptmr,
N                                       INT8U           *perr);
N
NBOOLEAN      OSTmrStart               (OS_TMR          *ptmr,
N                                       INT8U           *perr);
N
NBOOLEAN      OSTmrStop                (OS_TMR          *ptmr,
N                                       INT8U            opt,
N                                       void            *callback_arg,
N                                       INT8U           *perr);
N
NINT8U        OSTmrSignal              (void);
N#endif
N
N/*
N*********************************************************************************************************
N*                                             MISCELLANEOUS
N*********************************************************************************************************
N*/
N
Nvoid          OSInit                  (void);
N
Nvoid          OSIntEnter              (void);
Nvoid          OSIntExit               (void);
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
Svoid          OSSafetyCriticalStart   (void);
N#endif
N
N#if OS_SCHED_LOCK_EN > 0u
X#if 1u > 0u
Nvoid          OSSchedLock             (void);
Nvoid          OSSchedUnlock           (void);
N#endif
N
Nvoid          OSStart                 (void);
N
Nvoid          OSStatInit              (void);
N
NINT16U        OSVersion               (void);
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                      INTERNAL FUNCTION PROTOTYPES
N*                            (Your application MUST NOT call these functions)
N*********************************************************************************************************
N*/
N
N#if OS_TASK_DEL_EN > 0u
X#if 1u > 0u
Nvoid          OS_Dummy                (void);
N#endif
N
N#if (OS_EVENT_EN)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u)))
NINT8U         OS_EventTaskRdy         (OS_EVENT        *pevent,
N                                       void            *pmsg,
N                                       INT8U            msk,
N                                       INT8U            pend_stat);
N
Nvoid          OS_EventTaskWait        (OS_EVENT        *pevent);
N
Nvoid          OS_EventTaskRemove      (OS_TCB          *ptcb,
N                                       OS_EVENT        *pevent);
N
N#if (OS_EVENT_MULTI_EN > 0u)
X#if (1u > 0u)
Nvoid          OS_EventTaskWaitMulti   (OS_EVENT       **pevents_wait);
N
Nvoid          OS_EventTaskRemoveMulti (OS_TCB          *ptcb,
N                                       OS_EVENT       **pevents_multi);
N#endif
N
Nvoid          OS_EventWaitListInit    (OS_EVENT        *pevent);
N#endif
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
X#if (1u > 0u) && (5u > 0u)
Nvoid          OS_FlagInit             (void);
Nvoid          OS_FlagUnlink           (OS_FLAG_NODE    *pnode);
N#endif
N
Nvoid          OS_MemClr               (INT8U           *pdest,
N                                       INT16U           size);
N
Nvoid          OS_MemCopy              (INT8U           *pdest,
N                                       INT8U           *psrc,
N                                       INT16U           size);
N
N#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
X#if (1u > 0u) && (5u > 0u)
Nvoid          OS_MemInit              (void);
N#endif
N
N#if OS_Q_EN > 0u
X#if 0u > 0u
Svoid          OS_QInit                (void);
N#endif
N
Nvoid          OS_Sched                (void);
N
N#if (OS_EVENT_NAME_EN > 0u) || (OS_FLAG_NAME_EN > 0u) || (OS_MEM_NAME_EN > 0u) || (OS_TASK_NAME_EN > 0u)
X#if (1u > 0u) || (1u > 0u) || (1u > 0u) || (1u > 0u)
NINT8U         OS_StrLen               (INT8U           *psrc);
N#endif
N
Nvoid          OS_TaskIdle             (void            *p_arg);
N
Nvoid          OS_TaskReturn           (void);
N
N#if OS_TASK_STAT_EN > 0u
X#if 1u > 0u
Nvoid          OS_TaskStat             (void            *p_arg);
N#endif
N
N#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
X#if (1u > 0u) && (1u > 0u)
Nvoid          OS_TaskStkClr           (OS_STK          *pbos,
N                                       INT32U           size,
N                                       INT16U           opt);
N#endif
N
N#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
X#if (1u > 0u) && (1u > 0u)
Nvoid          OS_TaskStatStkChk       (void);
N#endif
N
NINT8U         OS_TCBInit              (INT8U            prio,
N                                       OS_STK          *ptos,
N                                       OS_STK          *pbos,
N                                       INT16U           id,
N                                       INT32U           stk_size,
N                                       void            *pext,
N                                       INT16U           opt);
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
Nvoid          OSTmr_Init              (void);
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          FUNCTION PROTOTYPES
N*                                      (Target Specific Functions)
N*********************************************************************************************************
N*/
N
N#if OS_DEBUG_EN > 0u
X#if 1u > 0u
Nvoid          OSDebugInit             (void);
N#endif
N
Nvoid          OSInitHookBegin         (void);
Nvoid          OSInitHookEnd           (void);
N
Nvoid          OSTaskCreateHook        (OS_TCB          *ptcb);
Nvoid          OSTaskDelHook           (OS_TCB          *ptcb);
N
Nvoid          OSTaskIdleHook          (void);
N
Nvoid          OSTaskReturnHook        (OS_TCB          *ptcb);
N
Nvoid          OSTaskStatHook          (void);
NOS_STK       *OSTaskStkInit           (void           (*task)(void *p_arg),
N                                       void            *p_arg,
N                                       OS_STK          *ptos,
N                                       INT16U           opt);
N
N#if OS_TASK_SW_HOOK_EN > 0u
X#if 1u > 0u
Nvoid          OSTaskSwHook            (void);
N#endif
N
Nvoid          OSTCBInitHook           (OS_TCB          *ptcb);
N
N#if OS_TIME_TICK_HOOK_EN > 0u
X#if 1u > 0u
Nvoid          OSTimeTickHook          (void);
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          FUNCTION PROTOTYPES
N*                                   (Application Specific Functions)
N*********************************************************************************************************
N*/
N
N#if OS_APP_HOOKS_EN > 0u
X#if 1u > 0u
Nvoid          App_TaskCreateHook      (OS_TCB          *ptcb);
Nvoid          App_TaskDelHook         (OS_TCB          *ptcb);
Nvoid          App_TaskIdleHook        (void);
N
Nvoid          App_TaskReturnHook      (OS_TCB          *ptcb);
N
Nvoid          App_TaskStatHook        (void);
N
N#if OS_TASK_SW_HOOK_EN > 0u
X#if 1u > 0u
Nvoid          App_TaskSwHook          (void);
N#endif
N
Nvoid          App_TCBInitHook         (OS_TCB          *ptcb);
N
N#if OS_TIME_TICK_HOOK_EN > 0u
X#if 1u > 0u
Nvoid          App_TimeTickHook        (void);
N#endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                          FUNCTION PROTOTYPES
N*
N* IMPORTANT: These prototypes MUST be placed in OS_CPU.H
N*********************************************************************************************************
N*/
N
N#if 0
Svoid          OSStartHighRdy          (void);
Svoid          OSIntCtxSw              (void);
Svoid          OSCtxSw                 (void);
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   LOOK FOR MISSING #define CONSTANTS
N*
N* This section is used to generate ERROR messages at compile time if certain #define constants are
N* MISSING in OS_CFG.H.  This allows you to quickly determine the source of the error.
N*
N* You SHOULD NOT change this section UNLESS you would like to add more comments as to the source of the
N* compile time error.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                            EVENT FLAGS
N*********************************************************************************************************
N*/
N
N#ifndef OS_FLAG_EN
S#error  "OS_CFG.H, Missing OS_FLAG_EN: Enable (1) or Disable (0) code generation for Event Flags"
N#else
N    #ifndef OS_MAX_FLAGS
S    #error  "OS_CFG.H, Missing OS_MAX_FLAGS: Max. number of Event Flag Groups in your application"
N    #else
N        #if     OS_MAX_FLAGS > 65500u
X        #if     5u > 65500u
S        #error  "OS_CFG.H, OS_MAX_FLAGS must be <= 65500"
N        #endif
N    #endif
N
N    #ifndef OS_FLAGS_NBITS
S    #error  "OS_CFG.H, Missing OS_FLAGS_NBITS: Determine #bits used for event flags, MUST be either 8, 16 or 32"
N    #endif
N
N    #ifndef OS_FLAG_WAIT_CLR_EN
S    #error  "OS_CFG.H, Missing OS_FLAG_WAIT_CLR_EN: Include code for Wait on Clear EVENT FLAGS"
N    #endif
N
N    #ifndef OS_FLAG_ACCEPT_EN
S    #error  "OS_CFG.H, Missing OS_FLAG_ACCEPT_EN: Include code for OSFlagAccept()"
N    #endif
N
N    #ifndef OS_FLAG_DEL_EN
S    #error  "OS_CFG.H, Missing OS_FLAG_DEL_EN: Include code for OSFlagDel()"
N    #endif
N
N    #ifndef OS_FLAG_NAME_EN
S    #error  "OS_CFG.H, Missing OS_FLAG_NAME_EN: Enable flag group names"
N    #endif
N
N    #ifndef OS_FLAG_QUERY_EN
S    #error  "OS_CFG.H, Missing OS_FLAG_QUERY_EN: Include code for OSFlagQuery()"
N    #endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                           MESSAGE MAILBOXES
N*********************************************************************************************************
N*/
N
N#ifndef OS_MBOX_EN
S#error  "OS_CFG.H, Missing OS_MBOX_EN: Enable (1) or Disable (0) code generation for MAILBOXES"
N#else
N    #ifndef OS_MBOX_ACCEPT_EN
S    #error  "OS_CFG.H, Missing OS_MBOX_ACCEPT_EN: Include code for OSMboxAccept()"
N    #endif
N
N    #ifndef OS_MBOX_DEL_EN
S    #error  "OS_CFG.H, Missing OS_MBOX_DEL_EN: Include code for OSMboxDel()"
N    #endif
N
N    #ifndef OS_MBOX_PEND_ABORT_EN
S    #error  "OS_CFG.H, Missing OS_MBOX_PEND_ABORT_EN: Include code for OSMboxPendAbort()"
N    #endif
N
N    #ifndef OS_MBOX_POST_EN
S    #error  "OS_CFG.H, Missing OS_MBOX_POST_EN: Include code for OSMboxPost()"
N    #endif
N
N    #ifndef OS_MBOX_POST_OPT_EN
S    #error  "OS_CFG.H, Missing OS_MBOX_POST_OPT_EN: Include code for OSMboxPostOpt()"
N    #endif
N
N    #ifndef OS_MBOX_QUERY_EN
S    #error  "OS_CFG.H, Missing OS_MBOX_QUERY_EN: Include code for OSMboxQuery()"
N    #endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                           MEMORY MANAGEMENT
N*********************************************************************************************************
N*/
N
N#ifndef OS_MEM_EN
S#error  "OS_CFG.H, Missing OS_MEM_EN: Enable (1) or Disable (0) code generation for MEMORY MANAGER"
N#else
N    #ifndef OS_MAX_MEM_PART
S    #error  "OS_CFG.H, Missing OS_MAX_MEM_PART: Max. number of memory partitions"
N    #else
N        #if     OS_MAX_MEM_PART > 65500u
X        #if     5u > 65500u
S        #error  "OS_CFG.H, OS_MAX_MEM_PART must be <= 65500"
N        #endif
N    #endif
N
N    #ifndef OS_MEM_NAME_EN
S    #error  "OS_CFG.H, Missing OS_MEM_NAME_EN: Enable memory partition names"
N    #endif
N
N    #ifndef OS_MEM_QUERY_EN
S    #error  "OS_CFG.H, Missing OS_MEM_QUERY_EN: Include code for OSMemQuery()"
N    #endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                       MUTUAL EXCLUSION SEMAPHORES
N*********************************************************************************************************
N*/
N
N#ifndef OS_MUTEX_EN
S#error  "OS_CFG.H, Missing OS_MUTEX_EN: Enable (1) or Disable (0) code generation for MUTEX"
N#else
N    #ifndef OS_MUTEX_ACCEPT_EN
S    #error  "OS_CFG.H, Missing OS_MUTEX_ACCEPT_EN: Include code for OSMutexAccept()"
N    #endif
N
N    #ifndef OS_MUTEX_DEL_EN
S    #error  "OS_CFG.H, Missing OS_MUTEX_DEL_EN: Include code for OSMutexDel()"
N    #endif
N
N    #ifndef OS_MUTEX_QUERY_EN
S    #error  "OS_CFG.H, Missing OS_MUTEX_QUERY_EN: Include code for OSMutexQuery()"
N    #endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                              MESSAGE QUEUES
N*********************************************************************************************************
N*/
N
N#ifndef OS_Q_EN
S#error  "OS_CFG.H, Missing OS_Q_EN: Enable (1) or Disable (0) code generation for QUEUES"
N#else
N    #ifndef OS_MAX_QS
S    #error  "OS_CFG.H, Missing OS_MAX_QS: Max. number of queue control blocks"
N    #else
N        #if     OS_MAX_QS > 65500u
X        #if     3u > 65500u
S        #error  "OS_CFG.H, OS_MAX_QS must be <= 65500"
N        #endif
N    #endif
N
N    #ifndef OS_Q_ACCEPT_EN
S    #error  "OS_CFG.H, Missing OS_Q_ACCEPT_EN: Include code for OSQAccept()"
N    #endif
N
N    #ifndef OS_Q_DEL_EN
S    #error  "OS_CFG.H, Missing OS_Q_DEL_EN: Include code for OSQDel()"
N    #endif
N
N    #ifndef OS_Q_FLUSH_EN
S    #error  "OS_CFG.H, Missing OS_Q_FLUSH_EN: Include code for OSQFlush()"
N    #endif
N
N    #ifndef OS_Q_PEND_ABORT_EN
S    #error  "OS_CFG.H, Missing OS_Q_PEND_ABORT_EN: Include code for OSQPendAbort()"
N    #endif
N
N    #ifndef OS_Q_POST_EN
S    #error  "OS_CFG.H, Missing OS_Q_POST_EN: Include code for OSQPost()"
N    #endif
N
N    #ifndef OS_Q_POST_FRONT_EN
S    #error  "OS_CFG.H, Missing OS_Q_POST_FRONT_EN: Include code for OSQPostFront()"
N    #endif
N
N    #ifndef OS_Q_POST_OPT_EN
S    #error  "OS_CFG.H, Missing OS_Q_POST_OPT_EN: Include code for OSQPostOpt()"
N    #endif
N
N    #ifndef OS_Q_QUERY_EN
S    #error  "OS_CFG.H, Missing OS_Q_QUERY_EN: Include code for OSQQuery()"
N    #endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                              SEMAPHORES
N*********************************************************************************************************
N*/
N
N#ifndef OS_SEM_EN
S#error  "OS_CFG.H, Missing OS_SEM_EN: Enable (1) or Disable (0) code generation for SEMAPHORES"
N#else
N    #ifndef OS_SEM_ACCEPT_EN
S    #error  "OS_CFG.H, Missing OS_SEM_ACCEPT_EN: Include code for OSSemAccept()"
N    #endif
N
N    #ifndef OS_SEM_DEL_EN
S    #error  "OS_CFG.H, Missing OS_SEM_DEL_EN: Include code for OSSemDel()"
N    #endif
N
N    #ifndef OS_SEM_PEND_ABORT_EN
S    #error  "OS_CFG.H, Missing OS_SEM_PEND_ABORT_EN: Include code for OSSemPendAbort()"
N    #endif
N
N    #ifndef OS_SEM_QUERY_EN
S    #error  "OS_CFG.H, Missing OS_SEM_QUERY_EN: Include code for OSSemQuery()"
N    #endif
N
N    #ifndef OS_SEM_SET_EN
S    #error  "OS_CFG.H, Missing OS_SEM_SET_EN: Include code for OSSemSet()"
N    #endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                             TASK MANAGEMENT
N*********************************************************************************************************
N*/
N
N#ifndef OS_MAX_TASKS
S#error  "OS_CFG.H, Missing OS_MAX_TASKS: Max. number of tasks in your application"
N#else
N    #if     OS_MAX_TASKS < 2u
X    #if     7u < 2u
S    #error  "OS_CFG.H,         OS_MAX_TASKS must be >= 2"
N    #endif
N
N    #if     OS_MAX_TASKS >  ((OS_LOWEST_PRIO - OS_N_SYS_TASKS) + 1u)
X    #if     7u >  ((10u - 2u) + 1u)
S    #error  "OS_CFG.H,         OS_MAX_TASKS must be <= OS_LOWEST_PRIO - OS_N_SYS_TASKS + 1"
N    #endif
N
N#endif
N
N#if     OS_LOWEST_PRIO >  254u
X#if     10u >  254u
S#error  "OS_CFG.H,         OS_LOWEST_PRIO must be <= 254 in V2.8x and higher"
N#endif
N
N#ifndef OS_TASK_IDLE_STK_SIZE
S#error  "OS_CFG.H, Missing OS_TASK_IDLE_STK_SIZE: Idle task stack size"
N#endif
N
N#ifndef OS_TASK_STAT_EN
S#error  "OS_CFG.H, Missing OS_TASK_STAT_EN: Enable (1) or Disable(0) the statistics task"
N#endif
N
N#ifndef OS_TASK_STAT_STK_SIZE
S#error  "OS_CFG.H, Missing OS_TASK_STAT_STK_SIZE: Statistics task stack size"
N#endif
N
N#ifndef OS_TASK_STAT_STK_CHK_EN
S#error  "OS_CFG.H, Missing OS_TASK_STAT_STK_CHK_EN: Check task stacks from statistics task"
N#endif
N
N#ifndef OS_TASK_CHANGE_PRIO_EN
S#error  "OS_CFG.H, Missing OS_TASK_CHANGE_PRIO_EN: Include code for OSTaskChangePrio()"
N#endif
N
N#ifndef OS_TASK_CREATE_EN
S#error  "OS_CFG.H, Missing OS_TASK_CREATE_EN: Include code for OSTaskCreate()"
N#endif
N
N#ifndef OS_TASK_CREATE_EXT_EN
S#error  "OS_CFG.H, Missing OS_TASK_CREATE_EXT_EN: Include code for OSTaskCreateExt()"
N#endif
N
N#ifndef OS_TASK_DEL_EN
S#error  "OS_CFG.H, Missing OS_TASK_DEL_EN: Include code for OSTaskDel()"
N#endif
N
N#ifndef OS_TASK_NAME_EN
S#error  "OS_CFG.H, Missing OS_TASK_NAME_EN: Enable task names"
N#endif
N
N#ifndef OS_TASK_SUSPEND_EN
S#error  "OS_CFG.H, Missing OS_TASK_SUSPEND_EN: Include code for OSTaskSuspend() and OSTaskResume()"
N#endif
N
N#ifndef OS_TASK_QUERY_EN
S#error  "OS_CFG.H, Missing OS_TASK_QUERY_EN: Include code for OSTaskQuery()"
N#endif
N
N#ifndef OS_TASK_REG_TBL_SIZE
S#error  "OS_CFG.H, Missing OS_TASK_REG_TBL_SIZE: Include code for task specific registers"
N#else
N    #if     OS_TASK_REG_TBL_SIZE > 255u
X    #if     1u > 255u
S    #error  "OS_CFG.H,         OS_TASK_REG_TBL_SIZE must be <= 255"
N    #endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                             TIME MANAGEMENT
N*********************************************************************************************************
N*/
N
N#ifndef OS_TICKS_PER_SEC
S#error  "OS_CFG.H, Missing OS_TICKS_PER_SEC: Sets the number of ticks in one second"
N#endif
N
N#ifndef OS_TIME_DLY_HMSM_EN
S#error  "OS_CFG.H, Missing OS_TIME_DLY_HMSM_EN: Include code for OSTimeDlyHMSM()"
N#endif
N
N#ifndef OS_TIME_DLY_RESUME_EN
S#error  "OS_CFG.H, Missing OS_TIME_DLY_RESUME_EN: Include code for OSTimeDlyResume()"
N#endif
N
N#ifndef OS_TIME_GET_SET_EN
S#error  "OS_CFG.H, Missing OS_TIME_GET_SET_EN: Include code for OSTimeGet() and OSTimeSet()"
N#endif
N
N/*
N*********************************************************************************************************
N*                                             TIMER MANAGEMENT
N*********************************************************************************************************
N*/
N
N#ifndef OS_TMR_EN
S#error  "OS_CFG.H, Missing OS_TMR_EN: When (1) enables code generation for Timer Management"
N#elif   OS_TMR_EN > 0u
X#elif   1u > 0u
N    #if     OS_SEM_EN == 0u
X    #if     1u == 0u
S    #error  "OS_CFG.H, Semaphore management is required (set OS_SEM_EN to 1) when enabling Timer Management."
S    #error  "          Timer management require TWO semaphores."
N    #endif
N
N    #ifndef OS_TMR_CFG_MAX
S    #error  "OS_CFG.H, Missing OS_TMR_CFG_MAX: Determines the total number of timers in an application (2 .. 65500)"
N    #else
N        #if OS_TMR_CFG_MAX < 2u
X        #if 8u < 2u
S        #error  "OS_CFG.H, OS_TMR_CFG_MAX should be between 2 and 65500"
N        #endif
N
N        #if OS_TMR_CFG_MAX > 65500u
X        #if 8u > 65500u
S        #error  "OS_CFG.H, OS_TMR_CFG_MAX should be between 2 and 65500"
N        #endif
N    #endif
N
N    #ifndef OS_TMR_CFG_WHEEL_SIZE
S    #error  "OS_CFG.H, Missing OS_TMR_CFG_WHEEL_SIZE: Sets the size of the timer wheel (1 .. 1023)"
N    #else
N        #if OS_TMR_CFG_WHEEL_SIZE < 2u
X        #if 8u < 2u
S        #error  "OS_CFG.H, OS_TMR_CFG_WHEEL_SIZE should be between 2 and 1024"
N        #endif
N
N        #if OS_TMR_CFG_WHEEL_SIZE > 1024u
X        #if 8u > 1024u
S        #error  "OS_CFG.H, OS_TMR_CFG_WHEEL_SIZE should be between 2 and 1024"
N        #endif
N    #endif
N
N    #ifndef OS_TMR_CFG_NAME_EN
S    #error  "OS_CFG.H, Missing OS_TMR_CFG_NAME_EN: Enable Timer names"
N    #endif
N
N    #ifndef OS_TMR_CFG_TICKS_PER_SEC
S    #error  "OS_CFG.H, Missing OS_TMR_CFG_TICKS_PER_SEC: Determines the rate at which tiem timer management task will run (Hz)"
N    #endif
N
N    #ifndef OS_TASK_TMR_STK_SIZE
S    #error  "OS_CFG.H, Missing OS_TASK_TMR_STK_SIZE: Determines the size of the Timer Task's stack"
N    #endif
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                            MISCELLANEOUS
N*********************************************************************************************************
N*/
N
N#ifndef OS_ARG_CHK_EN
S#error  "OS_CFG.H, Missing OS_ARG_CHK_EN: Enable (1) or Disable (0) argument checking"
N#endif
N
N
N#ifndef OS_CPU_HOOKS_EN
S#error  "OS_CFG.H, Missing OS_CPU_HOOKS_EN: uC/OS-II hooks are found in the processor port files when 1"
N#endif
N
N
N#ifndef OS_APP_HOOKS_EN
S#error  "OS_CFG.H, Missing OS_APP_HOOKS_EN: Application-defined hooks are called from the uC/OS-II hooks"
N#endif
N
N
N#ifndef OS_DEBUG_EN
S#error  "OS_CFG.H, Missing OS_DEBUG_EN: Allows you to include variables for debugging or not"
N#endif
N
N
N#ifndef OS_LOWEST_PRIO
S#error  "OS_CFG.H, Missing OS_LOWEST_PRIO: Defines the lowest priority that can be assigned"
N#endif
N
N
N#ifndef OS_MAX_EVENTS
S#error  "OS_CFG.H, Missing OS_MAX_EVENTS: Max. number of event control blocks in your application"
N#else
N    #if     OS_MAX_EVENTS > 65500u
X    #if     10u > 65500u
S    #error  "OS_CFG.H, OS_MAX_EVENTS must be <= 65500"
N    #endif
N#endif
N
N
N#ifndef OS_SCHED_LOCK_EN
S#error  "OS_CFG.H, Missing OS_SCHED_LOCK_EN: Include code for OSSchedLock() and OSSchedUnlock()"
N#endif
N
N
N#ifndef OS_EVENT_MULTI_EN
S#error  "OS_CFG.H, Missing OS_EVENT_MULTI_EN: Include code for OSEventPendMulti()"
N#endif
N
N
N#ifndef OS_TASK_PROFILE_EN
S#error  "OS_CFG.H, Missing OS_TASK_PROFILE_EN: Include data structure for run-time task profiling"
N#endif
N
N
N#ifndef OS_TASK_SW_HOOK_EN
S#error  "OS_CFG.H, Missing OS_TASK_SW_HOOK_EN: Allows you to include the code for OSTaskSwHook() or not"
N#endif
N
N
N#ifndef OS_TICK_STEP_EN
S#error  "OS_CFG.H, Missing OS_TICK_STEP_EN: Allows to 'step' one tick at a time with uC/OS-View"
N#endif
N
N
N#ifndef OS_TIME_TICK_HOOK_EN
S#error  "OS_CFG.H, Missing OS_TIME_TICK_HOOK_EN: Allows you to include the code for OSTimeTickHook() or not"
N#endif
N
N/*
N*********************************************************************************************************
N*                                         SAFETY CRITICAL USE
N*********************************************************************************************************
N*/
N
N#ifdef SAFETY_CRITICAL_RELEASE
S
S#if    OS_ARG_CHK_EN < 1u
S#error "OS_CFG.H, OS_ARG_CHK_EN must be enabled for safety-critical release code"
S#endif
S
S#if    OS_APP_HOOKS_EN > 0u
S#error "OS_CFG.H, OS_APP_HOOKS_EN must be disabled for safety-critical release code"
S#endif
S
S#if    OS_DEBUG_EN > 0u
S#error "OS_CFG.H, OS_DEBUG_EN must be disabled for safety-critical release code"
S#endif
S
S#ifdef CANTATA
S#error "OS_CFG.H, CANTATA must be disabled for safety-critical release code"
S#endif
S
S#ifdef OS_SCHED_LOCK_EN
S#error "OS_CFG.H, OS_SCHED_LOCK_EN must be disabled for safety-critical release code"
S#endif
S
S#ifdef VSC_VALIDATION_MODE
S#error "OS_CFG.H, VSC_VALIDATION_MODE must be disabled for safety-critical release code"
S#endif
S
S#if    OS_TASK_STAT_EN > 0u
S#error "OS_CFG.H, OS_TASK_STAT_EN must be disabled for safety-critical release code"
S#endif
S
S#if    OS_TICK_STEP_EN > 0u
S#error "OS_CFG.H, OS_TICK_STEP_EN must be disabled for safety-critical release code"
S#endif
S
S#if    OS_FLAG_EN > 0u
S    #if    OS_FLAG_DEL_EN > 0
S    #error "OS_CFG.H, OS_FLAG_DEL_EN must be disabled for safety-critical release code"
S    #endif
S#endif
S
S#if    OS_MBOX_EN > 0u
S    #if    OS_MBOX_DEL_EN > 0u
S    #error "OS_CFG.H, OS_MBOX_DEL_EN must be disabled for safety-critical release code"
S    #endif
S#endif
S
S#if    OS_MUTEX_EN > 0u
S    #if    OS_MUTEX_DEL_EN > 0u
S    #error "OS_CFG.H, OS_MUTEX_DEL_EN must be disabled for safety-critical release code"
S    #endif
S#endif
S
S#if    OS_Q_EN > 0u
S    #if    OS_Q_DEL_EN > 0u
S    #error "OS_CFG.H, OS_Q_DEL_EN must be disabled for safety-critical release code"
S    #endif
S#endif
S
S#if    OS_SEM_EN > 0u
S    #if    OS_SEM_DEL_EN > 0u
S    #error "OS_CFG.H, OS_SEM_DEL_EN must be disabled for safety-critical release code"
S    #endif
S#endif
S
S#if    OS_TASK_EN > 0u
S    #if    OS_TASK_DEL_EN > 0u
S    #error "OS_CFG.H, OS_TASK_DEL_EN must be disabled for safety-critical release code"
S    #endif
S#endif
S
S#if    OS_CRITICAL_METHOD != 3u
S#error "OS_CPU.H, OS_CRITICAL_METHOD must be type 3 for safety-critical release code"
S#endif
S
N#endif  /* ------------------------ SAFETY_CRITICAL_RELEASE ------------------------ */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
N	 	   	  			 		 	 	  		  	  			 			  		 	  				 	 		  	 	  	 		 		   		  	  			 				 		 		  	 	 	     	 					 	   	   	 	  	 		  	  			 	 	  		 		   		   	 			 
L 25 "..\..\uCOS-II\Source\ucos_ii.c" 2
N
N
N#define  OS_MASTER_FILE                       /* Prevent the following files from including includes.h */
N#include <os_core.c>
L 1 "..\..\uCOS-II\Source\os_core.c" 1
N/*
N*********************************************************************************************************
N*                                                uC/OS-II
N*                                          The Real-Time Kernel
N*                                             CORE FUNCTIONS
N*
N*                              (c) Copyright 1992-2010, Micrium, Weston, FL
N*                                           All Rights Reserved
N*
N* File    : OS_CORE.C
N* By      : Jean J. Labrosse
N* Version : V2.92
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
N* its use in your product. We provide ALL the source code for your convenience and to help you experience
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
N* licensing fee.
N*********************************************************************************************************
N*/
N
N#ifndef  OS_MASTER_FILE
S#define  OS_GLOBALS
S#include <ucos_ii.h>
N#endif
N
N/*
N*********************************************************************************************************
N*                                       PRIORITY RESOLUTION TABLE
N*
N* Note: Index into table is bit pattern to resolve highest priority
N*       Indexed value corresponds to highest priority bit position (i.e. 0..7)
N*********************************************************************************************************
N*/
N
NINT8U  const  OSUnMapTbl[256] = {
N    0u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x00 to 0x0F                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x10 to 0x1F                   */
N    5u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x20 to 0x2F                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x30 to 0x3F                   */
N    6u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x40 to 0x4F                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x50 to 0x5F                   */
N    5u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x60 to 0x6F                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x70 to 0x7F                   */
N    7u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x80 to 0x8F                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x90 to 0x9F                   */
N    5u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0xA0 to 0xAF                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0xB0 to 0xBF                   */
N    6u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0xC0 to 0xCF                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0xD0 to 0xDF                   */
N    5u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0xE0 to 0xEF                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u  /* 0xF0 to 0xFF                   */
N};
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                       FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
Nstatic  void  OS_InitEventList(void);
N
Nstatic  void  OS_InitMisc(void);
N
Nstatic  void  OS_InitRdyList(void);
N
Nstatic  void  OS_InitTaskIdle(void);
N
N#if OS_TASK_STAT_EN > 0u
X#if 1u > 0u
Nstatic  void  OS_InitTaskStat(void);
N#endif
N
Nstatic  void  OS_InitTCBList(void);
N
Nstatic  void  OS_SchedNew(void);
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                         GET THE NAME OF A SEMAPHORE, MUTEX, MAILBOX or QUEUE
N*
N* Description: This function is used to obtain the name assigned to a semaphore, mutex, mailbox or queue.
N*
N* Arguments  : pevent    is a pointer to the event group.  'pevent' can point either to a semaphore,
N*                        a mutex, a mailbox or a queue.  Where this function is concerned, the actual
N*                        type is irrelevant.
N*
N*              pname     is a pointer to a pointer to an ASCII string that will receive the name of the semaphore,
N*                        mutex, mailbox or queue.
N*
N*              perr      is a pointer to an error code that can contain one of the following values:
N*
N*                        OS_ERR_NONE                if the name was copied to 'pname'
N*                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to the proper event
N*                                                   control block type.
N*                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
N*                        OS_ERR_PEVENT_NULL         if you passed a NULL pointer for 'pevent'
N*                        OS_ERR_NAME_GET_ISR        if you are trying to call this function from an ISR
N*
N* Returns    : The length of the string or 0 if the 'pevent' is a NULL pointer.
N*********************************************************************************************************
N*/
N
N#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u))) && (1u > 0u)
NINT8U  OSEventNameGet (OS_EVENT   *pevent,
N                       INT8U     **pname,
N                       INT8U      *perr)
N{
N    INT8U      len;
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (0u);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
S        *perr = OS_ERR_PEVENT_NULL;
S        return (0u);
S    }
S    if (pname == (INT8U **)0) {                   /* Is 'pname' a NULL pointer?                         */
S        *perr = OS_ERR_PNAME_NULL;
S        return (0u);
S    }
N#endif
N    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
N        *perr  = OS_ERR_NAME_GET_ISR;
X        *perr  = 17u;
N        return (0u);
N    }
N    switch (pevent->OSEventType) {
N        case OS_EVENT_TYPE_SEM:
X        case 3u:
N        case OS_EVENT_TYPE_MUTEX:
X        case 4u:
N        case OS_EVENT_TYPE_MBOX:
X        case 1u:
N        case OS_EVENT_TYPE_Q:
X        case 2u:
N             break;
N
N        default:
N             *perr = OS_ERR_EVENT_TYPE;
X             *perr = 1u;
N             return (0u);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    *pname = pevent->OSEventName;
N    len    = OS_StrLen(*pname);
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr  = OS_ERR_NONE;
X    *perr  = 0u;
N    return (len);
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                         ASSIGN A NAME TO A SEMAPHORE, MUTEX, MAILBOX or QUEUE
N*
N* Description: This function assigns a name to a semaphore, mutex, mailbox or queue.
N*
N* Arguments  : pevent    is a pointer to the event group.  'pevent' can point either to a semaphore,
N*                        a mutex, a mailbox or a queue.  Where this function is concerned, it doesn't
N*                        matter the actual type.
N*
N*              pname     is a pointer to an ASCII string that will be used as the name of the semaphore,
N*                        mutex, mailbox or queue.
N*
N*              perr      is a pointer to an error code that can contain one of the following values:
N*
N*                        OS_ERR_NONE                if the requested task is resumed
N*                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to the proper event
N*                                                   control block type.
N*                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
N*                        OS_ERR_PEVENT_NULL         if you passed a NULL pointer for 'pevent'
N*                        OS_ERR_NAME_SET_ISR        if you called this function from an ISR
N*
N* Returns    : None
N*********************************************************************************************************
N*/
N
N#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u))) && (1u > 0u)
Nvoid  OSEventNameSet (OS_EVENT  *pevent,
N                      INT8U     *pname,
N                      INT8U     *perr)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return;
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
S        *perr = OS_ERR_PEVENT_NULL;
S        return;
S    }
S    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
S        *perr = OS_ERR_PNAME_NULL;
S        return;
S    }
N#endif
N    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
N        *perr = OS_ERR_NAME_SET_ISR;
X        *perr = 18u;
N        return;
N    }
N    switch (pevent->OSEventType) {
N        case OS_EVENT_TYPE_SEM:
X        case 3u:
N        case OS_EVENT_TYPE_MUTEX:
X        case 4u:
N        case OS_EVENT_TYPE_MBOX:
X        case 1u:
N        case OS_EVENT_TYPE_Q:
X        case 2u:
N             break;
N
N        default:
N             *perr = OS_ERR_EVENT_TYPE;
X             *perr = 1u;
N             return;
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    pevent->OSEventName = pname;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr = OS_ERR_NONE;
X    *perr = 0u;
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                      PEND ON MULTIPLE EVENTS
N*
N* Description: This function waits for multiple events.  If multiple events are ready at the start of the
N*              pend call, then all available events are returned as ready.  If the task must pend on the
N*              multiple events, then only the first posted or aborted event is returned as ready.
N*
N* Arguments  : pevents_pend  is a pointer to a NULL-terminated array of event control blocks to wait for.
N*
N*              pevents_rdy   is a pointer to an array to return which event control blocks are available
N*                            or ready.  The size of the array MUST be greater than or equal to the size
N*                            of the 'pevents_pend' array, including terminating NULL.
N*
N*              pmsgs_rdy     is a pointer to an array to return messages from any available message-type
N*                            events.  The size of the array MUST be greater than or equal to the size of
N*                            the 'pevents_pend' array, excluding the terminating NULL.  Since NULL
N*                            messages are valid messages, this array cannot be NULL-terminated.  Instead,
N*                            every available message-type event returns its messages in the 'pmsgs_rdy'
N*                            array at the same index as the event is returned in the 'pevents_rdy' array.
N*                            All other 'pmsgs_rdy' array indices are filled with NULL messages.
N*
N*              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
N*                            wait for the resources up to the amount of time specified by this argument.
N*                            If you specify 0, however, your task will wait forever for the specified
N*                            events or, until the resources becomes available (or the events occur).
N*
N*              perr          is a pointer to where an error message will be deposited.  Possible error
N*                            messages are:
N*
N*                            OS_ERR_NONE         The call was successful and your task owns the resources
N*                                                or, the events you are waiting for occurred; check the
N*                                                'pevents_rdy' array for which events are available.
N*                            OS_ERR_PEND_ABORT   The wait on the events was aborted; check the
N*                                                'pevents_rdy' array for which events were aborted.
N*                            OS_ERR_TIMEOUT      The events were not received within the specified
N*                                                'timeout'.
N*                            OS_ERR_PEVENT_NULL  If 'pevents_pend', 'pevents_rdy', or 'pmsgs_rdy' is a
N*                                                NULL pointer.
N*                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to an array of semaphores,
N*                                                mailboxes, and/or queues.
N*                            OS_ERR_PEND_ISR     If you called this function from an ISR and the result
N*                                                would lead to a suspension.
N*                            OS_ERR_PEND_LOCKED  If you called this function when the scheduler is locked.
N*
N* Returns    : >  0          the number of events returned as ready or aborted.
N*              == 0          if no events are returned as ready because of timeout or upon error.
N*
N* Notes      : 1) a. Validate 'pevents_pend' array as valid OS_EVENTs :
N*
N*                        semaphores, mailboxes, queues
N*
N*                 b. Return ALL available events and messages, if any
N*
N*                 c. Add    current task priority as pending to   each events's wait list
N*                      Performed in OS_EventTaskWaitMulti()
N*
N*                 d. Wait on any of multiple events
N*
N*                 e. Remove current task priority as pending from each events's wait list
N*                      Performed in OS_EventTaskRdy(), if events posted or aborted
N*
N*                 f. Return any event posted or aborted, if any
N*                      else
N*                    Return timeout
N*
N*              2) 'pevents_rdy' initialized to NULL PRIOR to all other validation or function handling in
N*                 case of any error(s).
N*********************************************************************************************************
N*/
N/*$PAGE*/
N#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
X#if (((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u))) && (1u > 0u))
NINT16U  OSEventPendMulti (OS_EVENT  **pevents_pend,
N                          OS_EVENT  **pevents_rdy,
N                          void      **pmsgs_rdy,
N                          INT32U      timeout,
N                          INT8U      *perr)
N{
N    OS_EVENT  **pevents;
N    OS_EVENT   *pevent;
N#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
X#if ((0u > 0u) && (3u > 0u))
S    OS_Q       *pq;
N#endif
N    BOOLEAN     events_rdy;
N    INT16U      events_rdy_nbr;
N    INT8U       events_stat;
N#if (OS_CRITICAL_METHOD == 3u)                          /* Allocate storage for CPU status register    */
X#if (3u == 3u)                           
N    OS_CPU_SR   cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (0u);
S    }
N#endif
N
N#if (OS_ARG_CHK_EN > 0u)
X#if (0u > 0u)
S    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
S       *perr =  OS_ERR_PEVENT_NULL;
S        return (0u);
S    }
S    if (*pevents_pend  == (OS_EVENT *)0) {              /* Validate 'pevents_pend'                     */
S       *perr =  OS_ERR_PEVENT_NULL;
S        return (0u);
S    }
S    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
S       *perr =  OS_ERR_PEVENT_NULL;
S        return (0u);
S    }
S    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
S       *perr =  OS_ERR_PEVENT_NULL;
S        return (0u);
S    }
N#endif
N
N   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
N
N    pevents     =  pevents_pend;
N    pevent      = *pevents;
N    while  (pevent != (OS_EVENT *)0) {
N        switch (pevent->OSEventType) {                  /* Validate event block types                  */
N#if (OS_SEM_EN  > 0u)
X#if (1u  > 0u)
N            case OS_EVENT_TYPE_SEM:
X            case 3u:
N                 break;
N#endif
N#if (OS_MBOX_EN > 0u)
X#if (1u > 0u)
N            case OS_EVENT_TYPE_MBOX:
X            case 1u:
N                 break;
N#endif
N#if ((OS_Q_EN   > 0u) && (OS_MAX_QS > 0u))
X#if ((0u   > 0u) && (3u > 0u))
S            case OS_EVENT_TYPE_Q:
S                 break;
N#endif
N
N            case OS_EVENT_TYPE_MUTEX:
X            case 4u:
N            case OS_EVENT_TYPE_FLAG:
X            case 5u:
N            default:
N                *perr = OS_ERR_EVENT_TYPE;
X                *perr = 1u;
N                 return (0u);
N        }
N        pevents++;
N        pevent = *pevents;
N    }
N
N    if (OSIntNesting  > 0u) {                           /* See if called from ISR ...                  */
N       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
X       *perr =  2u;                         
N        return (0u);
N    }
N    if (OSLockNesting > 0u) {                           /* See if called with scheduler locked ...     */
N       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
X       *perr =  13u;                      
N        return (0u);
N    }
N
N/*$PAGE*/
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    events_rdy     =  OS_FALSE;
X    events_rdy     =  0u;
N    events_rdy_nbr =  0u;
N    events_stat    =  OS_STAT_RDY;
X    events_stat    =  0x00u;
N    pevents        =  pevents_pend;
N    pevent         = *pevents;
N    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
N        switch (pevent->OSEventType) {
N#if (OS_SEM_EN > 0u)
X#if (1u > 0u)
N            case OS_EVENT_TYPE_SEM:
X            case 3u:
N                 if (pevent->OSEventCnt > 0u) {         /* If semaphore count > 0, resource available; */
N                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
N                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
N                      events_rdy   =  OS_TRUE;
X                      events_rdy   =  1u;
N                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
N                      events_rdy_nbr++;
N
N                 } else {
N                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
X                      events_stat |=  0x01u;       
N                 }
N                 break;
N#endif
N
N#if (OS_MBOX_EN > 0u)
X#if (1u > 0u)
N            case OS_EVENT_TYPE_MBOX:
X            case 1u:
N                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
N                                                        /* ... return available message,           ... */
N                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
N                     pevent->OSEventPtr  = (void *)0;
N                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
N                      events_rdy         =  OS_TRUE;
X                      events_rdy         =  1u;
N                      events_rdy_nbr++;
N
N                 } else {
N                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
X                      events_stat |= 0x02u;       
N                 }
N                 break;
N#endif
N
N#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
X#if ((0u > 0u) && (3u > 0u))
S            case OS_EVENT_TYPE_Q:
S                 pq = (OS_Q *)pevent->OSEventPtr;
S                 if (pq->OSQEntries > 0u) {             /* If queue NOT empty;                     ... */
S                                                        /* ... return available message,           ... */
S                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
S                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
S                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
S                     }
S                     pq->OSQEntries--;                  /* Update number of queue entries              */
S                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
S                      events_rdy   = OS_TRUE;
S                      events_rdy_nbr++;
S
S                 } else {
S                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
S                 }
S                 break;
N#endif
N
N            case OS_EVENT_TYPE_MUTEX:
X            case 4u:
N            case OS_EVENT_TYPE_FLAG:
X            case 5u:
N            default:
N                 OS_EXIT_CRITICAL();
X                 {OS_CPU_SR_Restore(cpu_sr);};
N                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
N                *perr        =  OS_ERR_EVENT_TYPE;
X                *perr        =  1u;
N                 return (events_rdy_nbr);
N        }
N        pevents++;
N        pevent = *pevents;
N    }
N
N    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
X    if ( events_rdy == 1u) {                        
N       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N       *perr        =  OS_ERR_NONE;
X       *perr        =  0u;
N        return (events_rdy_nbr);
N    }
N/*$PAGE*/
N                                                        /* Otherwise, must wait until any event occurs */
N    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
N                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
X                               0x80u;            
N    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
X    OSTCBCur->OSTCBStatPend  = 0u;
N    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
N    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
N
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    OS_Sched();                                         /* Find next highest priority task ready       */
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N
N    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
N        case OS_STAT_PEND_OK:
X        case 0u:
N        case OS_STAT_PEND_ABORT:
X        case 2u:
N             pevent = OSTCBCur->OSTCBEventPtr;
N             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
N                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
N                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
N                  events_rdy_nbr++;
N
N             } else {                                   /* Else NO event available, handle as timeout  */
N                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
X                 OSTCBCur->OSTCBStatPend = 1u;
N                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
N             }
N			 break;
N
N        case OS_STAT_PEND_TO:                           /* If events timed out, ...                    */
X        case 1u:                            
N        default:                                        /* ... remove task from events' wait lists     */
N             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
N             break;
N    }
N
N    switch (OSTCBCur->OSTCBStatPend) {
N        case OS_STAT_PEND_OK:
X        case 0u:
N             switch (pevent->OSEventType) {             /* Return event's message                      */
N#if (OS_SEM_EN > 0u)
X#if (1u > 0u)
N                 case OS_EVENT_TYPE_SEM:
X                 case 3u:
N                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
N                      break;
N#endif
N
N#if ((OS_MBOX_EN > 0u) ||                 \
N    ((OS_Q_EN    > 0u) && (OS_MAX_QS > 0u)))
X#if ((1u > 0u) ||                     ((0u    > 0u) && (3u > 0u)))
N                 case OS_EVENT_TYPE_MBOX:
X                 case 1u:
N                 case OS_EVENT_TYPE_Q:
X                 case 2u:
N                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
N                      break;
N#endif
N
N                 case OS_EVENT_TYPE_MUTEX:
X                 case 4u:
N                 case OS_EVENT_TYPE_FLAG:
X                 case 5u:
N                 default:
N                      OS_EXIT_CRITICAL();
X                      {OS_CPU_SR_Restore(cpu_sr);};
N                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
N                     *perr        =  OS_ERR_EVENT_TYPE;
X                     *perr        =  1u;
N                      return (events_rdy_nbr);
N             }
N            *perr = OS_ERR_NONE;
X            *perr = 0u;
N             break;
N
N        case OS_STAT_PEND_ABORT:
X        case 2u:
N            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
N            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
X            *perr        =  14u;           
N             break;
N
N        case OS_STAT_PEND_TO:
X        case 1u:
N        default:
N            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
N            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
X            *perr        =  10u;              
N             break;
N    }
N
N    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
X    OSTCBCur->OSTCBStat          =  0x00u;         
N    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
X    OSTCBCur->OSTCBStatPend      =  0u;     
N    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
N    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
N#if ((OS_MBOX_EN > 0u) ||                 \
N    ((OS_Q_EN    > 0u) && (OS_MAX_QS > 0u)))
X#if ((1u > 0u) ||                     ((0u    > 0u) && (3u > 0u)))
N    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
N#endif
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N
N    return (events_rdy_nbr);
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             INITIALIZATION
N*
N* Description: This function is used to initialize the internals of uC/OS-II and MUST be called prior to
N*              creating any uC/OS-II object and, prior to calling OSStart().
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
Nvoid  OSInit (void)
N{
N    OSInitHookBegin();                                           /* Call port specific initialization code   */
N
N    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
N
N    OS_InitRdyList();                                            /* Initialize the Ready List                */
N
N    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
N
N    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
X#if (1u > 0u) && (5u > 0u)
N    OS_FlagInit();                                               /* Initialize the event flag structures     */
N#endif
N
N#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
X#if (1u > 0u) && (5u > 0u)
N    OS_MemInit();                                                /* Initialize the memory manager            */
N#endif
N
N#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
X#if (0u > 0u) && (3u > 0u)
S    OS_QInit();                                                  /* Initialize the message queue structures  */
N#endif
N
N    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
N#if OS_TASK_STAT_EN > 0u
X#if 1u > 0u
N    OS_InitTaskStat();                                           /* Create the Statistic Task                */
N#endif
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
N    OSTmr_Init();                                                /* Initialize the Timer Manager             */
N#endif
N
N    OSInitHookEnd();                                             /* Call port specific init. code            */
N
N#if OS_DEBUG_EN > 0u
X#if 1u > 0u
N    OSDebugInit();
N#endif
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              ENTER ISR
N*
N* Description: This function is used to notify uC/OS-II that you are about to service an interrupt
N*              service routine (ISR).  This allows uC/OS-II to keep track of interrupt nesting and thus
N*              only perform rescheduling at the last nested ISR.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Notes      : 1) This function should be called ith interrupts already disabled
N*              2) Your ISR can directly increment OSIntNesting without calling this function because
N*                 OSIntNesting has been declared 'global'.
N*              3) You MUST still call OSIntExit() even though you increment OSIntNesting directly.
N*              4) You MUST invoke OSIntEnter() and OSIntExit() in pair.  In other words, for every call
N*                 to OSIntEnter() at the beginning of the ISR you MUST have a call to OSIntExit() at the
N*                 end of the ISR.
N*              5) You are allowed to nest interrupts up to 255 levels deep.
N*              6) I removed the OS_ENTER_CRITICAL() and OS_EXIT_CRITICAL() around the increment because
N*                 OSIntEnter() is always called with interrupts disabled.
N*********************************************************************************************************
N*/
N
Nvoid  OSIntEnter (void)
N{
N    if (OSRunning == OS_TRUE) {
X    if (OSRunning == 1u) {
N        if (OSIntNesting < 255u) {
N            OSIntNesting++;                      /* Increment ISR nesting level                        */
N        }
N    }
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                               EXIT ISR
N*
N* Description: This function is used to notify uC/OS-II that you have completed serviving an ISR.  When
N*              the last nested ISR has completed, uC/OS-II will call the scheduler to determine whether
N*              a new, high-priority task, is ready to run.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Notes      : 1) You MUST invoke OSIntEnter() and OSIntExit() in pair.  In other words, for every call
N*                 to OSIntEnter() at the beginning of the ISR you MUST have a call to OSIntExit() at the
N*                 end of the ISR.
N*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
N*********************************************************************************************************
N*/
N
Nvoid  OSIntExit (void)
N{
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    if (OSRunning == OS_TRUE) {
X    if (OSRunning == 1u) {
N        OS_ENTER_CRITICAL();
X        {cpu_sr = OS_CPU_SR_Save();};
N        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
N            OSIntNesting--;
N        }
N        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
N            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
N                OS_SchedNew();
N                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
N                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
N#if OS_TASK_PROFILE_EN > 0u
X#if 1u > 0u
N                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
N#endif
N                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
N                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
N                }
N            }
N        }
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N    }
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                            INDICATE THAT IT'S NO LONGER SAFE TO CREATE OBJECTS
N*
N* Description: This function is called by the application code to indicate that all initialization has
N*              been completed and that kernel objects are no longer allowed to be created.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Note(s)    : 1) You should call this function when you no longer want to allow application code to
N*                 create kernel objects.
N*              2) You need to define the macro 'OS_SAFETY_CRITICAL_IEC61508'
N*********************************************************************************************************
N*/
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
Svoid  OSSafetyCriticalStart (void)
S{
S    OSSafetyCriticalStartFlag = OS_TRUE;
S}
S
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          PREVENT SCHEDULING
N*
N* Description: This function is used to prevent rescheduling to take place.  This allows your application
N*              to prevent context switches until you are ready to permit context switching.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Notes      : 1) You MUST invoke OSSchedLock() and OSSchedUnlock() in pair.  In other words, for every
N*                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
N*********************************************************************************************************
N*/
N
N#if OS_SCHED_LOCK_EN > 0u
X#if 1u > 0u
Nvoid  OSSchedLock (void)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
X    if (OSRunning == 1u) {                   
N        OS_ENTER_CRITICAL();
X        {cpu_sr = OS_CPU_SR_Save();};
N        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
N            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
N                OSLockNesting++;                 /* Increment lock nesting level                       */
N            }
N        }
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N    }
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          ENABLE SCHEDULING
N*
N* Description: This function is used to re-allow rescheduling.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Notes      : 1) You MUST invoke OSSchedLock() and OSSchedUnlock() in pair.  In other words, for every
N*                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
N*********************************************************************************************************
N*/
N
N#if OS_SCHED_LOCK_EN > 0u
X#if 1u > 0u
Nvoid  OSSchedUnlock (void)
N{
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
X    if (OSRunning == 1u) {                             
N        OS_ENTER_CRITICAL();
X        {cpu_sr = OS_CPU_SR_Save();};
N        if (OSLockNesting > 0u) {                          /* Do not decrement if already 0            */
N            OSLockNesting--;                               /* Decrement lock nesting level             */
N            if (OSLockNesting == 0u) {                     /* See if scheduler is enabled and ...      */
N                if (OSIntNesting == 0u) {                  /* ... not in an ISR                        */
N                    OS_EXIT_CRITICAL();
X                    {OS_CPU_SR_Restore(cpu_sr);};
N                    OS_Sched();                            /* See if a HPT is ready                    */
N                } else {
N                    OS_EXIT_CRITICAL();
X                    {OS_CPU_SR_Restore(cpu_sr);};
N                }
N            } else {
N                OS_EXIT_CRITICAL();
X                {OS_CPU_SR_Restore(cpu_sr);};
N            }
N        } else {
N            OS_EXIT_CRITICAL();
X            {OS_CPU_SR_Restore(cpu_sr);};
N        }
N    }
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          START MULTITASKING
N*
N* Description: This function is used to start the multitasking process which lets uC/OS-II manages the
N*              task that you have created.  Before you can call OSStart(), you MUST have called OSInit()
N*              and you MUST have created at least one task.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Note       : OSStartHighRdy() MUST:
N*                 a) Call OSTaskSwHook() then,
N*                 b) Set OSRunning to OS_TRUE.
N*                 c) Load the context of the task pointed to by OSTCBHighRdy.
N*                 d_ Execute the task.
N*********************************************************************************************************
N*/
N
Nvoid  OSStart (void)
N{
N    if (OSRunning == OS_FALSE) {
X    if (OSRunning == 0u) {
N        OS_SchedNew();                               /* Find highest priority's task priority number   */
N        OSPrioCur     = OSPrioHighRdy;
N        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
N        OSTCBCur      = OSTCBHighRdy;
N        OSStartHighRdy();                            /* Execute target specific code to start task     */
N    }
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        STATISTICS INITIALIZATION
N*
N* Description: This function is called by your application to establish CPU usage by first determining
N*              how high a 32-bit counter would count to in 1 second if no other tasks were to execute
N*              during that time.  CPU usage is then determined by a low priority task which keeps track
N*              of this 32-bit counter every second but this time, with other tasks running.  CPU usage is
N*              determined by:
N*
N*                                             OSIdleCtr
N*                 CPU Usage (%) = 100 * (1 - ------------)
N*                                            OSIdleCtrMax
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
N#if OS_TASK_STAT_EN > 0u
X#if 1u > 0u
Nvoid  OSStatInit (void)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    OSTimeDly(2u);                               /* Synchronize with clock tick                        */
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    OSIdleCtr    = 0uL;                          /* Clear idle counter                                 */
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    OSTimeDly(OS_TICKS_PER_SEC / 10u);           /* Determine MAX. idle counter value for 1/10 second  */
X    OSTimeDly(1000u / 10u);            
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
N    OSStatRdy    = OS_TRUE;
X    OSStatRdy    = 1u;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         PROCESS SYSTEM TICK
N*
N* Description: This function is used to signal to uC/OS-II the occurrence of a 'system tick' (also known
N*              as a 'clock tick').  This function should be called by the ticker ISR but, can also be
N*              called by a high priority task.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
Nvoid  OSTimeTick (void)
N{
N    OS_TCB    *ptcb;
N#if OS_TICK_STEP_EN > 0u
X#if 1u > 0u
N    BOOLEAN    step;
N#endif
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
X#if 3u == 3u                                
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#if OS_TIME_TICK_HOOK_EN > 0u
X#if 1u > 0u
N    OSTimeTickHook();                                      /* Call user definable hook                     */
N#endif
N#if OS_TIME_GET_SET_EN > 0u
X#if 1u > 0u
N    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
X    {cpu_sr = OS_CPU_SR_Save();};                                    
N    OSTime++;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N#endif
N    if (OSRunning == OS_TRUE) {
X    if (OSRunning == 1u) {
N#if OS_TICK_STEP_EN > 0u
X#if 1u > 0u
N        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
N            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
X            case 0u:                          
N                 step = OS_TRUE;
X                 step = 1u;
N                 break;
N
N            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
X            case 1u:                         
N                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
X                 step = 0u;                           
N                 break;
N
N            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
X            case 2u:                         
N                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
X                 step            = 1u;                 
N                 OSTickStepState = OS_TICK_STEP_WAIT;
X                 OSTickStepState = 1u;
N                 break;
N
N            default:                                       /* Invalid case, correct situation              */
N                 step            = OS_TRUE;
X                 step            = 1u;
N                 OSTickStepState = OS_TICK_STEP_DIS;
X                 OSTickStepState = 0u;
N                 break;
N        }
N        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
X        if (step == 0u) {                             
N            return;
N        }
N#endif
N        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
N        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
X        while (ptcb->OSTCBPrio != (10u)) {      
N            OS_ENTER_CRITICAL();
X            {cpu_sr = OS_CPU_SR_Save();};
N            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
N                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
N                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
N
N                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
X                    if ((ptcb->OSTCBStat & (0x01u | 0x02u | 0x04u | 0x10u | 0x20u)) != 0x00u) {
N                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
X                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)(0x01u | 0x02u | 0x04u | 0x10u | 0x20u);           
N                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
X                        ptcb->OSTCBStatPend = 1u;                  
N                    } else {
N                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
X                        ptcb->OSTCBStatPend = 0u;
N                    }
N
N                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
X                    if ((ptcb->OSTCBStat & 0x08u) == 0x00u) {   
N                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
N                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
N                    }
N                }
N            }
N            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
N            OS_EXIT_CRITICAL();
X            {OS_CPU_SR_Restore(cpu_sr);};
N        }
N    }
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             GET VERSION
N*
N* Description: This function is used to return the version number of uC/OS-II.  The returned value
N*              corresponds to uC/OS-II's version number multiplied by 100.  In other words, version 2.00
N*              would be returned as 200.
N*
N* Arguments  : none
N*
N* Returns    : the version number of uC/OS-II multiplied by 100.
N*********************************************************************************************************
N*/
N
NINT16U  OSVersion (void)
N{
N    return (OS_VERSION);
X    return (292u);
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            DUMMY FUNCTION
N*
N* Description: This function doesn't do anything.  It is called by OSTaskDel().
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
N#if OS_TASK_DEL_EN > 0u
X#if 1u > 0u
Nvoid  OS_Dummy (void)
N{
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                             MAKE TASK READY TO RUN BASED ON EVENT OCCURING
N*
N* Description: This function is called by other uC/OS-II services and is used to ready a task that was
N*              waiting for an event to occur.
N*
N* Arguments  : pevent      is a pointer to the event control block corresponding to the event.
N*
N*              pmsg        is a pointer to a message.  This pointer is used by message oriented services
N*                          such as MAILBOXEs and QUEUEs.  The pointer is not used when called by other
N*                          service functions.
N*
N*              msk         is a mask that is used to clear the status byte of the TCB.  For example,
N*                          OSSemPost() will pass OS_STAT_SEM, OSMboxPost() will pass OS_STAT_MBOX etc.
N*
N*              pend_stat   is used to indicate the readied task's pending status:
N*
N*                          OS_STAT_PEND_OK      Task ready due to a post (or delete), not a timeout or
N*                                               an abort.
N*                          OS_STAT_PEND_ABORT   Task ready due to an abort.
N*
N* Returns    : none
N*
N* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N#if (OS_EVENT_EN)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u)))
NINT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
N                        void      *pmsg,
N                        INT8U      msk,
N                        INT8U      pend_stat)
N{
N    OS_TCB   *ptcb;
N    INT8U     y;
N    INT8U     x;
N    INT8U     prio;
N#if OS_LOWEST_PRIO > 63u
X#if 10u > 63u
S    OS_PRIO  *ptbl;
N#endif
N
N
N#if OS_LOWEST_PRIO <= 63u
X#if 10u <= 63u
N    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
N    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
N    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
N#else
S    if ((pevent->OSEventGrp & 0xFFu) != 0u) {           /* Find HPT waiting for message                */
S        y = OSUnMapTbl[ pevent->OSEventGrp & 0xFFu];
S    } else {
S        y = OSUnMapTbl[(OS_PRIO)(pevent->OSEventGrp >> 8u) & 0xFFu] + 8u;
S    }
S    ptbl = &pevent->OSEventTbl[y];
S    if ((*ptbl & 0xFFu) != 0u) {
S        x = OSUnMapTbl[*ptbl & 0xFFu];
S    } else {
S        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
S    }
S    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
N#endif
N
N    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
N    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
N#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
X#if ((0u > 0u) && (3u > 0u)) || (1u > 0u)
N    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
N#else
S    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
N#endif
N    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
N    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
N                                                        /* See if task is ready (could be susp'd)      */
N    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
X    if ((ptcb->OSTCBStat &   0x08u) == 0x00u) {
N        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
N        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
N    }
N
N    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
N#if (OS_EVENT_MULTI_EN > 0u)
X#if (1u > 0u)
N    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
N        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
N        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
N    }
N#endif
N
N    return (prio);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   MAKE TASK WAIT FOR EVENT TO OCCUR
N*
N* Description: This function is called by other uC/OS-II services to suspend a task because an event has
N*              not occurred.
N*
N* Arguments  : pevent   is a pointer to the event control block for which the task will be waiting for.
N*
N* Returns    : none
N*
N* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N#if (OS_EVENT_EN)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u)))
Nvoid  OS_EventTaskWait (OS_EVENT *pevent)
N{
N    INT8U  y;
N
N
N    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
N
N    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
N    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
N
N    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
N    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
N    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
N        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
N    }
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                          MAKE TASK WAIT FOR ANY OF MULTIPLE EVENTS TO OCCUR
N*
N* Description: This function is called by other uC/OS-II services to suspend a task because any one of
N*              multiple events has not occurred.
N*
N* Arguments  : pevents_wait     is a pointer to an array of event control blocks, NULL-terminated, for
N*                               which the task will be waiting for.
N*
N* Returns    : none.
N*
N* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
X#if (((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u))) && (1u > 0u))
Nvoid  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
N{
N    OS_EVENT **pevents;
N    OS_EVENT  *pevent;
N    INT8U      y;
N
N
N    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
N    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
N
N    pevents =  pevents_wait;
N    pevent  = *pevents;
N    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
N        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
N        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
N        pevents++;
N        pevent = *pevents;
N    }
N
N    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
N    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
N    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
N        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
N    }
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   REMOVE TASK FROM EVENT WAIT LIST
N*
N* Description: Remove a task from an event's wait list.
N*
N* Arguments  : ptcb     is a pointer to the task to remove.
N*
N*              pevent   is a pointer to the event control block.
N*
N* Returns    : none
N*
N* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N#if (OS_EVENT_EN)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u)))
Nvoid  OS_EventTaskRemove (OS_TCB   *ptcb,
N                          OS_EVENT *pevent)
N{
N    INT8U  y;
N
N
N    y                       =  ptcb->OSTCBY;
N    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
N    if (pevent->OSEventTbl[y] == 0u) {
N        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
N    }
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                             REMOVE TASK FROM MULTIPLE EVENTS WAIT LISTS
N*
N* Description: Remove a task from multiple events' wait lists.
N*
N* Arguments  : ptcb             is a pointer to the task to remove.
N*
N*              pevents_multi    is a pointer to the array of event control blocks, NULL-terminated.
N*
N* Returns    : none
N*
N* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
X#if (((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u))) && (1u > 0u))
Nvoid  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
N                               OS_EVENT **pevents_multi)
N{
N    OS_EVENT **pevents;
N    OS_EVENT  *pevent;
N    INT8U      y;
N    OS_PRIO    bity;
N    OS_PRIO    bitx;
N
N
N    y       =  ptcb->OSTCBY;
N    bity    =  ptcb->OSTCBBitY;
N    bitx    =  ptcb->OSTCBBitX;
N    pevents =  pevents_multi;
N    pevent  = *pevents;
N    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
N        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
N        if (pevent->OSEventTbl[y] == 0u) {
N            pevent->OSEventGrp &= (OS_PRIO)~bity;
N        }
N        pevents++;
N        pevent = *pevents;
N    }
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                 INITIALIZE EVENT CONTROL BLOCK'S WAIT LIST
N*
N* Description: This function is called by other uC/OS-II services to initialize the event wait list.
N*
N* Arguments  : pevent    is a pointer to the event control block allocated to the event.
N*
N* Returns    : none
N*
N* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N#if (OS_EVENT_EN)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u)))
Nvoid  OS_EventWaitListInit (OS_EVENT *pevent)
N{
N    INT8U  i;
N
N
N    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
N    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
X    for (i = 0u; i < ((10u) / 8u + 1u); i++) {
N        pevent->OSEventTbl[i] = 0u;
N    }
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             INITIALIZATION
N*                           INITIALIZE THE FREE LIST OF EVENT CONTROL BLOCKS
N*
N* Description: This function is called by OSInit() to initialize the free list of event control blocks.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
Nstatic  void  OS_InitEventList (void)
N{
N#if (OS_EVENT_EN) && (OS_MAX_EVENTS > 0u)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u))) && (10u > 0u)
N#if (OS_MAX_EVENTS > 1u)
X#if (10u > 1u)
N    INT16U     ix;
N    INT16U     ix_next;
N    OS_EVENT  *pevent1;
N    OS_EVENT  *pevent2;
N
N
N    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
N    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
X    for (ix = 0u; ix < (10u - 1u); ix++) {         
N        ix_next = ix + 1u;
N        pevent1 = &OSEventTbl[ix];
N        pevent2 = &OSEventTbl[ix_next];
N        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
X        pevent1->OSEventType    = 0u;
N        pevent1->OSEventPtr     = pevent2;
N#if OS_EVENT_NAME_EN > 0u
X#if 1u > 0u
N        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
N#endif
N    }
N    pevent1                         = &OSEventTbl[ix];
N    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
X    pevent1->OSEventType            = 0u;
N    pevent1->OSEventPtr             = (OS_EVENT *)0;
N#if OS_EVENT_NAME_EN > 0u
X#if 1u > 0u
N    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
N#endif
N    OSEventFreeList                 = &OSEventTbl[0];
N#else
S    OSEventFreeList                 = &OSEventTbl[0];       /* Only have ONE event control block       */
S    OSEventFreeList->OSEventType    = OS_EVENT_TYPE_UNUSED;
S    OSEventFreeList->OSEventPtr     = (OS_EVENT *)0;
S#if OS_EVENT_NAME_EN > 0u
S    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
S#endif
N#endif
N#endif
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             INITIALIZATION
N*                                    INITIALIZE MISCELLANEOUS VARIABLES
N*
N* Description: This function is called by OSInit() to initialize miscellaneous variables.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
Nstatic  void  OS_InitMisc (void)
N{
N#if OS_TIME_GET_SET_EN > 0u
X#if 1u > 0u
N    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
N#endif
N
N    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
N    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
N
N    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
N
N    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
X    OSRunning                 = 0u;                   
N
N    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
N    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
N
N#if OS_TASK_STAT_EN > 0u
X#if 1u > 0u
N    OSIdleCtrRun              = 0uL;
N    OSIdleCtrMax              = 0uL;
N    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
X    OSStatRdy                 = 0u;                   
N#endif
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
S    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
N#endif
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             INITIALIZATION
N*                                       INITIALIZE THE READY LIST
N*
N* Description: This function is called by OSInit() to initialize the Ready List.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
Nstatic  void  OS_InitRdyList (void)
N{
N    INT8U  i;
N
N
N    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
N    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
X    for (i = 0u; i < ((10u) / 8u + 1u); i++) {
N        OSRdyTbl[i] = 0u;
N    }
N
N    OSPrioCur     = 0u;
N    OSPrioHighRdy = 0u;
N
N    OSTCBHighRdy  = (OS_TCB *)0;
N    OSTCBCur      = (OS_TCB *)0;
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             INITIALIZATION
N*                                         CREATING THE IDLE TASK
N*
N* Description: This function creates the Idle Task.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
Nstatic  void  OS_InitTaskIdle (void)
N{
N#if OS_TASK_NAME_EN > 0u
X#if 1u > 0u
N    INT8U  err;
N#endif
N
N
N#if OS_TASK_CREATE_EXT_EN > 0u
X#if 1u > 0u
N    #if OS_STK_GROWTH == 1u
X    #if 1u == 1u
N    (void)OSTaskCreateExt(OS_TaskIdle,
N                          (void *)0,                                 /* No arguments passed to OS_TaskIdle() */
N                          &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1u],/* Set Top-Of-Stack                     */
X                          &OSTaskIdleStk[15u - 1u], 
N                          OS_TASK_IDLE_PRIO,                         /* Lowest priority level                */
X                          (10u),                          
N                          OS_TASK_IDLE_ID,
X                          65535u,
N                          &OSTaskIdleStk[0],                         /* Set Bottom-Of-Stack                  */
N                          OS_TASK_IDLE_STK_SIZE,
X                          15u,
N                          (void *)0,                                 /* No TCB extension                     */
N                          OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
X                          0x0001u | 0x0002u); 
N    #else
S    (void)OSTaskCreateExt(OS_TaskIdle,
S                          (void *)0,                                 /* No arguments passed to OS_TaskIdle() */
S                          &OSTaskIdleStk[0],                         /* Set Top-Of-Stack                     */
S                          OS_TASK_IDLE_PRIO,                         /* Lowest priority level                */
S                          OS_TASK_IDLE_ID,
S                          &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1u],/* Set Bottom-Of-Stack                  */
S                          OS_TASK_IDLE_STK_SIZE,
S                          (void *)0,                                 /* No TCB extension                     */
S                          OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
N    #endif
N#else
S    #if OS_STK_GROWTH == 1u
S    (void)OSTaskCreate(OS_TaskIdle,
S                       (void *)0,
S                       &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1u],
S                       OS_TASK_IDLE_PRIO);
S    #else
S    (void)OSTaskCreate(OS_TaskIdle,
S                       (void *)0,
S                       &OSTaskIdleStk[0],
S                       OS_TASK_IDLE_PRIO);
S    #endif
N#endif
N
N#if OS_TASK_NAME_EN > 0u
X#if 1u > 0u
N    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
X    OSTaskNameSet((10u), (INT8U *)(void *)"uC/OS-II Idle", &err);
N#endif
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             INITIALIZATION
N*                                      CREATING THE STATISTIC TASK
N*
N* Description: This function creates the Statistic Task.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
N#if OS_TASK_STAT_EN > 0u
X#if 1u > 0u
Nstatic  void  OS_InitTaskStat (void)
N{
N#if OS_TASK_NAME_EN > 0u
X#if 1u > 0u
N    INT8U  err;
N#endif
N
N
N#if OS_TASK_CREATE_EXT_EN > 0u
X#if 1u > 0u
N    #if OS_STK_GROWTH == 1u
X    #if 1u == 1u
N    (void)OSTaskCreateExt(OS_TaskStat,
N                          (void *)0,                                   /* No args passed to OS_TaskStat()*/
N                          &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1u],  /* Set Top-Of-Stack               */
X                          &OSTaskStatStk[15u - 1u],   
N                          OS_TASK_STAT_PRIO,                           /* One higher than the idle task  */
X                          (10u - 1u),                            
N                          OS_TASK_STAT_ID,
X                          65534u,
N                          &OSTaskStatStk[0],                           /* Set Bottom-Of-Stack            */
N                          OS_TASK_STAT_STK_SIZE,
X                          15u,
N                          (void *)0,                                   /* No TCB extension               */
N                          OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + clear  */
X                          0x0001u | 0x0002u);   
N    #else
S    (void)OSTaskCreateExt(OS_TaskStat,
S                          (void *)0,                                   /* No args passed to OS_TaskStat()*/
S                          &OSTaskStatStk[0],                           /* Set Top-Of-Stack               */
S                          OS_TASK_STAT_PRIO,                           /* One higher than the idle task  */
S                          OS_TASK_STAT_ID,
S                          &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1u],  /* Set Bottom-Of-Stack            */
S                          OS_TASK_STAT_STK_SIZE,
S                          (void *)0,                                   /* No TCB extension               */
S                          OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + clear  */
N    #endif
N#else
S    #if OS_STK_GROWTH == 1u
S    (void)OSTaskCreate(OS_TaskStat,
S                       (void *)0,                                      /* No args passed to OS_TaskStat()*/
S                       &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1u],     /* Set Top-Of-Stack               */
S                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
S    #else
S    (void)OSTaskCreate(OS_TaskStat,
S                       (void *)0,                                      /* No args passed to OS_TaskStat()*/
S                       &OSTaskStatStk[0],                              /* Set Top-Of-Stack               */
S                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
S    #endif
N#endif
N
N#if OS_TASK_NAME_EN > 0u
X#if 1u > 0u
N    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
X    OSTaskNameSet((10u - 1u), (INT8U *)(void *)"uC/OS-II Stat", &err);
N#endif
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             INITIALIZATION
N*                            INITIALIZE THE FREE LIST OF TASK CONTROL BLOCKS
N*
N* Description: This function is called by OSInit() to initialize the free list of OS_TCBs.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
Nstatic  void  OS_InitTCBList (void)
N{
N    INT8U    ix;
N    INT8U    ix_next;
N    OS_TCB  *ptcb1;
N    OS_TCB  *ptcb2;
N
N
N    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
N    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
N    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
X    for (ix = 0u; ix < (7u + 2u - 1u); ix++) {     
N        ix_next =  ix + 1u;
N        ptcb1   = &OSTCBTbl[ix];
N        ptcb2   = &OSTCBTbl[ix_next];
N        ptcb1->OSTCBNext = ptcb2;
N#if OS_TASK_NAME_EN > 0u
X#if 1u > 0u
N        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
N#endif
N    }
N    ptcb1                   = &OSTCBTbl[ix];
N    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
N#if OS_TASK_NAME_EN > 0u
X#if 1u > 0u
N    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
N#endif
N    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
N    OSTCBFreeList           = &OSTCBTbl[0];
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        CLEAR A SECTION OF MEMORY
N*
N* Description: This function is called by other uC/OS-II services to clear a contiguous block of RAM.
N*
N* Arguments  : pdest    is the start of the RAM to clear (i.e. write 0x00 to)
N*
N*              size     is the number of bytes to clear.
N*
N* Returns    : none
N*
N* Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
N*              2) Note that we can only clear up to 64K bytes of RAM.  This is not an issue because none
N*                 of the uses of this function gets close to this limit.
N*              3) The clear is done one byte at a time since this will work on any processor irrespective
N*                 of the alignment of the destination.
N*********************************************************************************************************
N*/
N
Nvoid  OS_MemClr (INT8U  *pdest,
N                 INT16U  size)
N{
N    while (size > 0u) {
N        *pdest++ = (INT8U)0;
N        size--;
N    }
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        COPY A BLOCK OF MEMORY
N*
N* Description: This function is called by other uC/OS-II services to copy a block of memory from one
N*              location to another.
N*
N* Arguments  : pdest    is a pointer to the 'destination' memory block
N*
N*              psrc     is a pointer to the 'source'      memory block
N*
N*              size     is the number of bytes to copy.
N*
N* Returns    : none
N*
N* Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.  There is
N*                 no provision to handle overlapping memory copy.  However, that's not a problem since this
N*                 is not a situation that will happen.
N*              2) Note that we can only copy up to 64K bytes of RAM
N*              3) The copy is done one byte at a time since this will work on any processor irrespective
N*                 of the alignment of the source and destination.
N*********************************************************************************************************
N*/
N
Nvoid  OS_MemCopy (INT8U  *pdest,
N                  INT8U  *psrc,
N                  INT16U  size)
N{
N    while (size > 0u) {
N        *pdest++ = *psrc++;
N        size--;
N    }
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              SCHEDULER
N*
N* Description: This function is called by other uC/OS-II services to determine whether a new, high
N*              priority task has been made ready to run.  This function is invoked by TASK level code
N*              and is not used to reschedule tasks from ISRs (see OSIntExit() for ISR rescheduling).
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
N*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
N*********************************************************************************************************
N*/
N
Nvoid  OS_Sched (void)
N{
N#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
X#if 3u == 3u                            
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
N        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
N            OS_SchedNew();
N            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
N            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
N#if OS_TASK_PROFILE_EN > 0u
X#if 1u > 0u
N                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
N#endif
N                OSCtxSwCtr++;                          /* Increment context switch counter             */
N                OS_TASK_SW();                          /* Perform a context switch                     */
X                OSCtxSw();                           
N            }
N        }
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N}
N
N
N/*
N*********************************************************************************************************
N*                              FIND HIGHEST PRIORITY TASK READY TO RUN
N*
N* Description: This function is called by other uC/OS-II services to determine the highest priority task
N*              that is ready to run.  The global variable 'OSPrioHighRdy' is changed accordingly.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
N*              2) Interrupts are assumed to be disabled when this function is called.
N*********************************************************************************************************
N*/
N
Nstatic  void  OS_SchedNew (void)
N{
N#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
X#if 10u <= 63u                         
N    INT8U   y;
N
N
N    y             = OSUnMapTbl[OSRdyGrp];
N    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
N#else                                            /* We support up to 256 tasks                         */
S    INT8U     y;
S    OS_PRIO  *ptbl;
S
S
S    if ((OSRdyGrp & 0xFFu) != 0u) {
S        y = OSUnMapTbl[OSRdyGrp & 0xFFu];
S    } else {
S        y = OSUnMapTbl[(OS_PRIO)(OSRdyGrp >> 8u) & 0xFFu] + 8u;
S    }
S    ptbl = &OSRdyTbl[y];
S    if ((*ptbl & 0xFFu) != 0u) {
S        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
S    } else {
S        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
S    }
N#endif
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                DETERMINE THE LENGTH OF AN ASCII STRING
N*
N* Description: This function is called by other uC/OS-II services to determine the size of an ASCII string
N*              (excluding the NUL character).
N*
N* Arguments  : psrc     is a pointer to the string for which we need to know the size.
N*
N* Returns    : The size of the string (excluding the NUL terminating character)
N*
N* Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
N*              2) The string to check must be less than 255 characters long.
N*********************************************************************************************************
N*/
N
N#if (OS_EVENT_NAME_EN > 0u) || (OS_FLAG_NAME_EN > 0u) || (OS_MEM_NAME_EN > 0u) || (OS_TASK_NAME_EN > 0u) || (OS_TMR_CFG_NAME_EN > 0u)
X#if (1u > 0u) || (1u > 0u) || (1u > 0u) || (1u > 0u) || (1u > 0u)
NINT8U  OS_StrLen (INT8U *psrc)
N{
N    INT8U  len;
N
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (psrc == (INT8U *)0) {
S        return (0u);
S    }
N#endif
N
N    len = 0u;
N    while (*psrc != OS_ASCII_NUL) {
X    while (*psrc != (INT8U)0) {
N        psrc++;
N        len++;
N    }
N    return (len);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              IDLE TASK
N*
N* Description: This task is internal to uC/OS-II and executes whenever no other higher priority tasks
N*              executes because they are ALL waiting for event(s) to occur.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Note(s)    : 1) OSTaskIdleHook() is called after the critical section to ensure that interrupts will be
N*                 enabled for at least a few instructions.  On some processors (ex. Philips XA), enabling
N*                 and then disabling interrupts didn't allow the processor enough time to have interrupts
N*                 enabled before they were disabled again.  uC/OS-II would thus never recognize
N*                 interrupts.
N*              2) This hook has been added to allow you to do such things as STOP the CPU to conserve
N*                 power.
N*********************************************************************************************************
N*/
N
Nvoid  OS_TaskIdle (void *p_arg)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
N    for (;;) {
N        OS_ENTER_CRITICAL();
X        {cpu_sr = OS_CPU_SR_Save();};
N        OSIdleCtr++;
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        OSTaskIdleHook();                        /* Call user definable HOOK                           */
N    }
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            STATISTICS TASK
N*
N* Description: This task is internal to uC/OS-II and is used to compute some statistics about the
N*              multitasking environment.  Specifically, OS_TaskStat() computes the CPU usage.
N*              CPU usage is determined by:
N*
N*                                          OSIdleCtr
N*                 OSCPUUsage = 100 * (1 - ------------)     (units are in %)
N*                                         OSIdleCtrMax
N*
N* Arguments  : parg     this pointer is not used at this time.
N*
N* Returns    : none
N*
N* Notes      : 1) This task runs at a priority level higher than the idle task.  In fact, it runs at the
N*                 next higher priority, OS_TASK_IDLE_PRIO-1.
N*              2) You can disable this task by setting the configuration #define OS_TASK_STAT_EN to 0.
N*              3) You MUST have at least a delay of 2/10 seconds to allow for the system to establish the
N*                 maximum value for the idle counter.
N*********************************************************************************************************
N*/
N
N#if OS_TASK_STAT_EN > 0u
X#if 1u > 0u
Nvoid  OS_TaskStat (void *p_arg)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
N    while (OSStatRdy == OS_FALSE) {
X    while (OSStatRdy == 0u) {
N        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
X        OSTimeDly(2u * 1000u / 10u);   
N    }
N    OSIdleCtrMax /= 100uL;
N    if (OSIdleCtrMax == 0uL) {
N        OSCPUUsage = 0u;
N#if OS_TASK_SUSPEND_EN > 0u
X#if 1u > 0u
N        (void)OSTaskSuspend(OS_PRIO_SELF);
X        (void)OSTaskSuspend(0xFFu);
N#else
S        for (;;) {
S            OSTimeDly(OS_TICKS_PER_SEC);
S        }
N#endif
N    }
N    for (;;) {
N        OS_ENTER_CRITICAL();
X        {cpu_sr = OS_CPU_SR_Save();};
N        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
N        OSIdleCtr    = 0uL;                      /* Reset the idle counter for the next second         */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        OSCPUUsage   = (INT8U)(100uL - OSIdleCtrRun / OSIdleCtrMax);
N        OSTaskStatHook();                        /* Invoke user definable hook                         */
N#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
X#if (1u > 0u) && (1u > 0u)
N        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
N#endif
N        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
X        OSTimeDly(1000u / 10u);        
N    }
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                      CHECK ALL TASK STACKS
N*
N* Description: This function is called by OS_TaskStat() to check the stacks of each active task.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
N#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
X#if (1u > 0u) && (1u > 0u)
Nvoid  OS_TaskStatStkChk (void)
N{
N    OS_TCB      *ptcb;
N    OS_STK_DATA  stk_data;
N    INT8U        err;
N    INT8U        prio;
N
N
N    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
X    for (prio = 0u; prio <= (10u); prio++) {
N        err = OSTaskStkChk(prio, &stk_data);
N        if (err == OS_ERR_NONE) {
X        if (err == 0u) {
N            ptcb = OSTCBPrioTbl[prio];
N            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
N                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
X                if (ptcb != ((OS_TCB *)1)) {                        
N#if OS_TASK_PROFILE_EN > 0u
X#if 1u > 0u
N                    #if OS_STK_GROWTH == 1u
X                    #if 1u == 1u
N                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
N                    #else
S                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
N                    #endif
N                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
N#endif
N                }
N            }
N        }
N    }
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            INITIALIZE TCB
N*
N* Description: This function is internal to uC/OS-II and is used to initialize a Task Control Block when
N*              a task is created (see OSTaskCreate() and OSTaskCreateExt()).
N*
N* Arguments  : prio          is the priority of the task being created
N*
N*              ptos          is a pointer to the task's top-of-stack assuming that the CPU registers
N*                            have been placed on the stack.  Note that the top-of-stack corresponds to a
N*                            'high' memory location is OS_STK_GROWTH is set to 1 and a 'low' memory
N*                            location if OS_STK_GROWTH is set to 0.  Note that stack growth is CPU
N*                            specific.
N*
N*              pbos          is a pointer to the bottom of stack.  A NULL pointer is passed if called by
N*                            'OSTaskCreate()'.
N*
N*              id            is the task's ID (0..65535)
N*
N*              stk_size      is the size of the stack (in 'stack units').  If the stack units are INT8Us
N*                            then, 'stk_size' contains the number of bytes for the stack.  If the stack
N*                            units are INT32Us then, the stack contains '4 * stk_size' bytes.  The stack
N*                            units are established by the #define constant OS_STK which is CPU
N*                            specific.  'stk_size' is 0 if called by 'OSTaskCreate()'.
N*
N*              pext          is a pointer to a user supplied memory area that is used to extend the task
N*                            control block.  This allows you to store the contents of floating-point
N*                            registers, MMU registers or anything else you could find useful during a
N*                            context switch.  You can even assign a name to each task and store this name
N*                            in this TCB extension.  A NULL pointer is passed if called by OSTaskCreate().
N*
N*              opt           options as passed to 'OSTaskCreateExt()' or,
N*                            0 if called from 'OSTaskCreate()'.
N*
N* Returns    : OS_ERR_NONE         if the call was successful
N*              OS_ERR_TASK_NO_MORE_TCB  if there are no more free TCBs to be allocated and thus, the task cannot
N*                                  be created.
N*
N* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N
NINT8U  OS_TCBInit (INT8U    prio,
N                   OS_STK  *ptos,
N                   OS_STK  *pbos,
N                   INT16U   id,
N                   INT32U   stk_size,
N                   void    *pext,
N                   INT16U   opt)
N{
N    OS_TCB    *ptcb;
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N#if OS_TASK_REG_TBL_SIZE > 0u
X#if 1u > 0u
N    INT8U      i;
N#endif
N
N
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
N    if (ptcb != (OS_TCB *)0) {
N        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
N        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
N        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
X        ptcb->OSTCBStat          = 0x00u;             
N        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
X        ptcb->OSTCBStatPend      = 0u;         
N        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
N
N#if OS_TASK_CREATE_EXT_EN > 0u
X#if 1u > 0u
N        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
N        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
N        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
N        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
N        ptcb->OSTCBId            = id;                     /* Store task ID                            */
N#else
S        pext                     = pext;                   /* Prevent compiler warning if not used     */
S        stk_size                 = stk_size;
S        pbos                     = pbos;
S        opt                      = opt;
S        id                       = id;
N#endif
N
N#if OS_TASK_DEL_EN > 0u
X#if 1u > 0u
N        ptcb->OSTCBDelReq        = OS_ERR_NONE;
X        ptcb->OSTCBDelReq        = 0u;
N#endif
N
N#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
X#if 10u <= 63u                                          
N        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
N        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
N#else                                                             /* Pre-compute X, Y                  */
S        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
S        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
N#endif
N                                                                  /* Pre-compute BitX and BitY         */
N        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
N        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
N
N#if (OS_EVENT_EN)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u)))
N        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
N#if (OS_EVENT_MULTI_EN > 0u)
X#if (1u > 0u)
N        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
N#endif
N#endif
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
X#if (1u > 0u) && (5u > 0u) && (1u > 0u)
N        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
N#endif
N
N#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
X#if (1u > 0u) || ((0u > 0u) && (3u > 0u))
N        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
N#endif
N
N#if OS_TASK_PROFILE_EN > 0u
X#if 1u > 0u
N        ptcb->OSTCBCtxSwCtr    = 0uL;                      /* Initialize profiling variables           */
N        ptcb->OSTCBCyclesStart = 0uL;
N        ptcb->OSTCBCyclesTot   = 0uL;
N        ptcb->OSTCBStkBase     = (OS_STK *)0;
N        ptcb->OSTCBStkUsed     = 0uL;
N#endif
N
N#if OS_TASK_NAME_EN > 0u
X#if 1u > 0u
N        ptcb->OSTCBTaskName    = (INT8U *)(void *)"?";
N#endif
N
N#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
X#if 1u > 0u                               
N        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
X        for (i = 0u; i < 1u; i++) {
N            ptcb->OSTCBRegTbl[i] = 0u;
N        }
N#endif
N
N        OSTCBInitHook(ptcb);
N
N        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
N
N        OS_ENTER_CRITICAL();
X        {cpu_sr = OS_CPU_SR_Save();};
N        OSTCBPrioTbl[prio] = ptcb;
N        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
N        ptcb->OSTCBPrev    = (OS_TCB *)0;
N        if (OSTCBList != (OS_TCB *)0) {
N            OSTCBList->OSTCBPrev = ptcb;
N        }
N        OSTCBList               = ptcb;
N        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
N        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
N        OSTaskCtr++;                                       /* Increment the #tasks counter             */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_NONE);
X        return (0u);
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (OS_ERR_TASK_NO_MORE_TCB);
X    return (66u);
N}
N	 	   	  			 		 	 	  		  	  			 			  		 	  				 	 		  	 	  	 		 		   		  	  			 				 		 		  	 	 	     	 					 	   	   	 	  	 		  	  			 	 	  		 		   		   	 			 
L 29 "..\..\uCOS-II\Source\ucos_ii.c" 2
N#include <os_flag.c>
L 1 "..\..\uCOS-II\Source\os_flag.c" 1
N/*
N*********************************************************************************************************
N*                                                uC/OS-II
N*                                          The Real-Time Kernel
N*                                         EVENT FLAG  MANAGEMENT
N*
N*                              (c) Copyright 1992-2010, Micrium, Weston, FL
N*                                           All Rights Reserved
N*
N* File    : OS_FLAG.C
N* By      : Jean J. Labrosse
N* Version : V2.92
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
N* its use in your product. We provide ALL the source code for your convenience and to help you experience
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
N* licensing fee.
N*********************************************************************************************************
N*/
N
N#ifndef  OS_MASTER_FILE
S#include <ucos_ii.h>
N#endif
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
X#if (1u > 0u) && (5u > 0u)
N/*
N*********************************************************************************************************
N*                                            LOCAL PROTOTYPES
N*********************************************************************************************************
N*/
N
Nstatic  void     OS_FlagBlock(OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT32U timeout);
Nstatic  BOOLEAN  OS_FlagTaskRdy(OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy);
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                              CHECK THE STATUS OF FLAGS IN AN EVENT FLAG GROUP
N*
N* Description: This function is called to check the status of a combination of bits to be set or cleared
N*              in an event flag group.  Your application can check for ANY bit to be set/cleared or ALL
N*              bits to be set/cleared.
N*
N*              This call does not block if the desired flags are not present.
N*
N* Arguments  : pgrp          is a pointer to the desired event flag group.
N*
N*              flags         Is a bit pattern indicating which bit(s) (i.e. flags) you wish to check.
N*                            The bits you want are specified by setting the corresponding bits in
N*                            'flags'.  e.g. if your application wants to wait for bits 0 and 1 then
N*                            'flags' would contain 0x03.
N*
N*              wait_type     specifies whether you want ALL bits to be set/cleared or ANY of the bits
N*                            to be set/cleared.
N*                            You can specify the following argument:
N*
N*                            OS_FLAG_WAIT_CLR_ALL   You will check ALL bits in 'flags' to be clear (0)
N*                            OS_FLAG_WAIT_CLR_ANY   You will check ANY bit  in 'flags' to be clear (0)
N*                            OS_FLAG_WAIT_SET_ALL   You will check ALL bits in 'flags' to be set   (1)
N*                            OS_FLAG_WAIT_SET_ANY   You will check ANY bit  in 'flags' to be set   (1)
N*
N*                            NOTE: Add OS_FLAG_CONSUME if you want the event flag to be 'consumed' by
N*                                  the call.  Example, to wait for any flag in a group AND then clear
N*                                  the flags that are present, set 'wait_type' to:
N*
N*                                  OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME
N*
N*              perr          is a pointer to an error code and can be:
N*                            OS_ERR_NONE               No error
N*                            OS_ERR_EVENT_TYPE         You are not pointing to an event flag group
N*                            OS_ERR_FLAG_WAIT_TYPE     You didn't specify a proper 'wait_type' argument.
N*                            OS_ERR_FLAG_INVALID_PGRP  You passed a NULL pointer instead of the event flag
N*                                                      group handle.
N*                            OS_ERR_FLAG_NOT_RDY       The desired flags you are waiting for are not
N*                                                      available.
N*
N* Returns    : The flags in the event flag group that made the task ready or, 0 if a timeout or an error
N*              occurred.
N*
N* Called from: Task or ISR
N*
N* Note(s)    : 1) IMPORTANT, the behavior of this function has changed from PREVIOUS versions.  The
N*                 function NOW returns the flags that were ready INSTEAD of the current state of the
N*                 event flags.
N*********************************************************************************************************
N*/
N
N#if OS_FLAG_ACCEPT_EN > 0u
X#if 1u > 0u
NOS_FLAGS  OSFlagAccept (OS_FLAG_GRP  *pgrp,
N                        OS_FLAGS      flags,
N                        INT8U         wait_type,
N                        INT8U        *perr)
N{
N    OS_FLAGS      flags_rdy;
N    INT8U         result;
N    BOOLEAN       consume;
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR     cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_FLAGS)0);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
S        *perr = OS_ERR_FLAG_INVALID_PGRP;
S        return ((OS_FLAGS)0);
S    }
N#endif
N    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
X    if (pgrp->OSFlagType != 5u) {           
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return ((OS_FLAGS)0);
N    }
N    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
X    result = (INT8U)(wait_type & 0x80u);
N    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
N        wait_type &= ~OS_FLAG_CONSUME;
X        wait_type &= ~0x80u;
N        consume    = OS_TRUE;
X        consume    = 1u;
N    } else {
N        consume    = OS_FALSE;
X        consume    = 0u;
N    }
N/*$PAGE*/
N    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
X    *perr = 0u;                                    
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    switch (wait_type) {
N        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
X        case 2u:                          
N             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
N             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
N                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
X                 if (consume == 1u) {                  
N                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we wanted  */
N                 }
N             } else {
N                 *perr = OS_ERR_FLAG_NOT_RDY;
X                 *perr = 112u;
N             }
N             OS_EXIT_CRITICAL();
X             {OS_CPU_SR_Restore(cpu_sr);};
N             break;
N
N        case OS_FLAG_WAIT_SET_ANY:
X        case 3u:
N             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
N             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
N                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
X                 if (consume == 1u) {                  
N                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we got     */
N                 }
N             } else {
N                 *perr = OS_ERR_FLAG_NOT_RDY;
X                 *perr = 112u;
N             }
N             OS_EXIT_CRITICAL();
X             {OS_CPU_SR_Restore(cpu_sr);};
N             break;
N
N#if OS_FLAG_WAIT_CLR_EN > 0u
X#if 1u > 0u
N        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
X        case 0u:                          
N             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;    /* Extract only the bits we want     */
N             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
N                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
X                 if (consume == 1u) {                  
N                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
N                 }
N             } else {
N                 *perr = OS_ERR_FLAG_NOT_RDY;
X                 *perr = 112u;
N             }
N             OS_EXIT_CRITICAL();
X             {OS_CPU_SR_Restore(cpu_sr);};
N             break;
N
N        case OS_FLAG_WAIT_CLR_ANY:
X        case 1u:
N             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;   /* Extract only the bits we want      */
N             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
N                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
X                 if (consume == 1u) {                  
N                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
N                 }
N             } else {
N                 *perr = OS_ERR_FLAG_NOT_RDY;
X                 *perr = 112u;
N             }
N             OS_EXIT_CRITICAL();
X             {OS_CPU_SR_Restore(cpu_sr);};
N             break;
N#endif
N
N        default:
N             OS_EXIT_CRITICAL();
X             {OS_CPU_SR_Restore(cpu_sr);};
N             flags_rdy = (OS_FLAGS)0;
N             *perr     = OS_ERR_FLAG_WAIT_TYPE;
X             *perr     = 111u;
N             break;
N    }
N    return (flags_rdy);
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           CREATE AN EVENT FLAG
N*
N* Description: This function is called to create an event flag group.
N*
N* Arguments  : flags         Contains the initial value to store in the event flag group.
N*
N*              perr          is a pointer to an error code which will be returned to your application:
N*                               OS_ERR_NONE               if the call was successful.
N*                               OS_ERR_CREATE_ISR         if you attempted to create an Event Flag from an
N*                                                         ISR.
N*                               OS_ERR_FLAG_GRP_DEPLETED  if there are no more event flag groups
N*
N* Returns    : A pointer to an event flag group or a NULL pointer if no more groups are available.
N*
N* Called from: Task ONLY
N*********************************************************************************************************
N*/
N
NOS_FLAG_GRP  *OSFlagCreate (OS_FLAGS  flags,
N                            INT8U    *perr)
N{
N    OS_FLAG_GRP *pgrp;
N#if OS_CRITICAL_METHOD == 3u                        /* Allocate storage for CPU status register        */
X#if 3u == 3u                         
N    OS_CPU_SR    cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_FLAG_GRP *)0);
S    }
N#endif
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
S    if (OSSafetyCriticalStartFlag == OS_TRUE) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_FLAG_GRP *)0);
S    }
N#endif
N
N    if (OSIntNesting > 0u) {                        /* See if called from ISR ...                      */
N        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
X        *perr = 16u;                   
N        return ((OS_FLAG_GRP *)0);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
N    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
N                                                    /* Adjust free list                                */
N        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
N        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
X        pgrp->OSFlagType     = 5u;   
N        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
N        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
N#if OS_FLAG_NAME_EN > 0u
X#if 1u > 0u
N        pgrp->OSFlagName     = (INT8U *)(void *)"?";
N#endif
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        *perr                = OS_ERR_NONE;
X        *perr                = 0u;
N    } else {
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
X        *perr                = 114u;
N    }
N    return (pgrp);                                  /* Return pointer to event flag group              */
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                     DELETE AN EVENT FLAG GROUP
N*
N* Description: This function deletes an event flag group and readies all tasks pending on the event flag
N*              group.
N*
N* Arguments  : pgrp          is a pointer to the desired event flag group.
N*
N*              opt           determines delete options as follows:
N*                            opt == OS_DEL_NO_PEND   Deletes the event flag group ONLY if no task pending
N*                            opt == OS_DEL_ALWAYS    Deletes the event flag group even if tasks are
N*                                                    waiting.  In this case, all the tasks pending will be
N*                                                    readied.
N*
N*              perr          is a pointer to an error code that can contain one of the following values:
N*                            OS_ERR_NONE               The call was successful and the event flag group was
N*                                                      deleted
N*                            OS_ERR_DEL_ISR            If you attempted to delete the event flag group from
N*                                                      an ISR
N*                            OS_ERR_FLAG_INVALID_PGRP  If 'pgrp' is a NULL pointer.
N*                            OS_ERR_EVENT_TYPE         If you didn't pass a pointer to an event flag group
N*                            OS_ERR_INVALID_OPT        An invalid option was specified
N*                            OS_ERR_TASK_WAITING       One or more tasks were waiting on the event flag
N*                                                      group.
N*
N* Returns    : pgrp          upon error
N*              (OS_EVENT *)0 if the event flag group was successfully deleted.
N*
N* Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
N*                 the event flag group MUST check the return code of OSFlagAccept() and OSFlagPend().
N*              2) This call can potentially disable interrupts for a long time.  The interrupt disable
N*                 time is directly proportional to the number of tasks waiting on the event flag group.
N*********************************************************************************************************
N*/
N
N#if OS_FLAG_DEL_EN > 0u
X#if 1u > 0u
NOS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP  *pgrp,
N                         INT8U         opt,
N                         INT8U        *perr)
N{
N    BOOLEAN       tasks_waiting;
N    OS_FLAG_NODE *pnode;
N    OS_FLAG_GRP  *pgrp_return;
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR     cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_FLAG_GRP *)0);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
S        *perr = OS_ERR_FLAG_INVALID_PGRP;
S        return (pgrp);
S    }
N#endif
N    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
N        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
X        *perr = 15u;                             
N        return (pgrp);
N    }
N    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
X    if (pgrp->OSFlagType != 5u) {           
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return (pgrp);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
N        tasks_waiting = OS_TRUE;                           /* Yes                                      */
X        tasks_waiting = 1u;                            
N    } else {
N        tasks_waiting = OS_FALSE;                          /* No                                       */
X        tasks_waiting = 0u;                           
N    }
N    switch (opt) {
N        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
X        case 0u:                                
N             if (tasks_waiting == OS_FALSE) {
X             if (tasks_waiting == 0u) {
N#if OS_FLAG_NAME_EN > 0u
X#if 1u > 0u
N                 pgrp->OSFlagName     = (INT8U *)(void *)"?";
N#endif
N                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
X                 pgrp->OSFlagType     = 0u;
N                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
N                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
N                 OSFlagFreeList       = pgrp;
N                 OS_EXIT_CRITICAL();
X                 {OS_CPU_SR_Restore(cpu_sr);};
N                 *perr                = OS_ERR_NONE;
X                 *perr                = 0u;
N                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
N             } else {
N                 OS_EXIT_CRITICAL();
X                 {OS_CPU_SR_Restore(cpu_sr);};
N                 *perr                = OS_ERR_TASK_WAITING;
X                 *perr                = 73u;
N                 pgrp_return          = pgrp;
N             }
N             break;
N
N        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
X        case 1u:                                 
N             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
N             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
N                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
N                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
N             }
N#if OS_FLAG_NAME_EN > 0u
X#if 1u > 0u
N             pgrp->OSFlagName     = (INT8U *)(void *)"?";
N#endif
N             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
X             pgrp->OSFlagType     = 0u;
N             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
N             pgrp->OSFlagFlags    = (OS_FLAGS)0;
N             OSFlagFreeList       = pgrp;
N             OS_EXIT_CRITICAL();
X             {OS_CPU_SR_Restore(cpu_sr);};
N             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
X             if (tasks_waiting == 1u) {                
N                 OS_Sched();                               /* Find highest priority task ready to run  */
N             }
N             *perr = OS_ERR_NONE;
X             *perr = 0u;
N             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
N             break;
N
N        default:
N             OS_EXIT_CRITICAL();
X             {OS_CPU_SR_Restore(cpu_sr);};
N             *perr                = OS_ERR_INVALID_OPT;
X             *perr                = 7u;
N             pgrp_return          = pgrp;
N             break;
N    }
N    return (pgrp_return);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                 GET THE NAME OF AN EVENT FLAG GROUP
N*
N* Description: This function is used to obtain the name assigned to an event flag group
N*
N* Arguments  : pgrp      is a pointer to the event flag group.
N*
N*              pname     is pointer to a pointer to an ASCII string that will receive the name of the event flag
N*                        group.
N*
N*              perr      is a pointer to an error code that can contain one of the following values:
N*
N*                        OS_ERR_NONE                if the requested task is resumed
N*                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to an event flag group
N*                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
N*                        OS_ERR_FLAG_INVALID_PGRP   if you passed a NULL pointer for 'pgrp'
N*                        OS_ERR_NAME_GET_ISR        if you called this function from an ISR
N*
N* Returns    : The length of the string or 0 if the 'pgrp' is a NULL pointer.
N*********************************************************************************************************
N*/
N
N#if OS_FLAG_NAME_EN > 0u
X#if 1u > 0u
NINT8U  OSFlagNameGet (OS_FLAG_GRP   *pgrp,
N                      INT8U        **pname,
N                      INT8U         *perr)
N{
N    INT8U      len;
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (0u);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
S        *perr = OS_ERR_FLAG_INVALID_PGRP;
S        return (0u);
S    }
S    if (pname == (INT8U **)0) {                   /* Is 'pname' a NULL pointer?                         */
S        *perr = OS_ERR_PNAME_NULL;
S        return (0u);
S    }
N#endif
N    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
N        *perr = OS_ERR_NAME_GET_ISR;
X        *perr = 17u;
N        return (0u);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
X    if (pgrp->OSFlagType != 5u) {
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return (0u);
N    }
N    *pname = pgrp->OSFlagName;
N    len    = OS_StrLen(*pname);
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr  = OS_ERR_NONE;
X    *perr  = 0u;
N    return (len);
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                 ASSIGN A NAME TO AN EVENT FLAG GROUP
N*
N* Description: This function assigns a name to an event flag group.
N*
N* Arguments  : pgrp      is a pointer to the event flag group.
N*
N*              pname     is a pointer to an ASCII string that will be used as the name of the event flag
N*                        group.
N*
N*              perr      is a pointer to an error code that can contain one of the following values:
N*
N*                        OS_ERR_NONE                if the requested task is resumed
N*                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to an event flag group
N*                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
N*                        OS_ERR_FLAG_INVALID_PGRP   if you passed a NULL pointer for 'pgrp'
N*                        OS_ERR_NAME_SET_ISR        if you called this function from an ISR
N*
N* Returns    : None
N*********************************************************************************************************
N*/
N
N#if OS_FLAG_NAME_EN > 0u
X#if 1u > 0u
Nvoid  OSFlagNameSet (OS_FLAG_GRP  *pgrp,
N                     INT8U        *pname,
N                     INT8U        *perr)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return;
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
S        *perr = OS_ERR_FLAG_INVALID_PGRP;
S        return;
S    }
S    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
S        *perr = OS_ERR_PNAME_NULL;
S        return;
S    }
N#endif
N    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
N        *perr = OS_ERR_NAME_SET_ISR;
X        *perr = 18u;
N        return;
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
X    if (pgrp->OSFlagType != 5u) {
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return;
N    }
N    pgrp->OSFlagName = pname;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr            = OS_ERR_NONE;
X    *perr            = 0u;
N    return;
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        WAIT ON AN EVENT FLAG GROUP
N*
N* Description: This function is called to wait for a combination of bits to be set in an event flag
N*              group.  Your application can wait for ANY bit to be set or ALL bits to be set.
N*
N* Arguments  : pgrp          is a pointer to the desired event flag group.
N*
N*              flags         Is a bit pattern indicating which bit(s) (i.e. flags) you wish to wait for.
N*                            The bits you want are specified by setting the corresponding bits in
N*                            'flags'.  e.g. if your application wants to wait for bits 0 and 1 then
N*                            'flags' would contain 0x03.
N*
N*              wait_type     specifies whether you want ALL bits to be set or ANY of the bits to be set.
N*                            You can specify the following argument:
N*
N*                            OS_FLAG_WAIT_CLR_ALL   You will wait for ALL bits in 'mask' to be clear (0)
N*                            OS_FLAG_WAIT_SET_ALL   You will wait for ALL bits in 'mask' to be set   (1)
N*                            OS_FLAG_WAIT_CLR_ANY   You will wait for ANY bit  in 'mask' to be clear (0)
N*                            OS_FLAG_WAIT_SET_ANY   You will wait for ANY bit  in 'mask' to be set   (1)
N*
N*                            NOTE: Add OS_FLAG_CONSUME if you want the event flag to be 'consumed' by
N*                                  the call.  Example, to wait for any flag in a group AND then clear
N*                                  the flags that are present, set 'wait_type' to:
N*
N*                                  OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME
N*
N*              timeout       is an optional timeout (in clock ticks) that your task will wait for the
N*                            desired bit combination.  If you specify 0, however, your task will wait
N*                            forever at the specified event flag group or, until a message arrives.
N*
N*              perr          is a pointer to an error code and can be:
N*                            OS_ERR_NONE               The desired bits have been set within the specified
N*                                                      'timeout'.
N*                            OS_ERR_PEND_ISR           If you tried to PEND from an ISR
N*                            OS_ERR_FLAG_INVALID_PGRP  If 'pgrp' is a NULL pointer.
N*                            OS_ERR_EVENT_TYPE         You are not pointing to an event flag group
N*                            OS_ERR_TIMEOUT            The bit(s) have not been set in the specified
N*                                                      'timeout'.
N*                            OS_ERR_PEND_ABORT         The wait on the flag was aborted.
N*                            OS_ERR_FLAG_WAIT_TYPE     You didn't specify a proper 'wait_type' argument.
N*
N* Returns    : The flags in the event flag group that made the task ready or, 0 if a timeout or an error
N*              occurred.
N*
N* Called from: Task ONLY
N*
N* Note(s)    : 1) IMPORTANT, the behavior of this function has changed from PREVIOUS versions.  The
N*                 function NOW returns the flags that were ready INSTEAD of the current state of the
N*                 event flags.
N*********************************************************************************************************
N*/
N
NOS_FLAGS  OSFlagPend (OS_FLAG_GRP  *pgrp,
N                      OS_FLAGS      flags,
N                      INT8U         wait_type,
N                      INT32U        timeout,
N                      INT8U        *perr)
N{
N    OS_FLAG_NODE  node;
N    OS_FLAGS      flags_rdy;
N    INT8U         result;
N    INT8U         pend_stat;
N    BOOLEAN       consume;
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR     cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_FLAGS)0);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
S        *perr = OS_ERR_FLAG_INVALID_PGRP;
S        return ((OS_FLAGS)0);
S    }
N#endif
N    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
N        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
X        *perr = 2u;                            
N        return ((OS_FLAGS)0);
N    }
N    if (OSLockNesting > 0u) {                              /* See if called with scheduler locked ...  */
N        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
X        *perr = 13u;                         
N        return ((OS_FLAGS)0);
N    }
N    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
X    if (pgrp->OSFlagType != 5u) {           
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return ((OS_FLAGS)0);
N    }
N    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
X    result = (INT8U)(wait_type & 0x80u);
N    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
N        wait_type &= (INT8U)~(INT8U)OS_FLAG_CONSUME;
X        wait_type &= (INT8U)~(INT8U)0x80u;
N        consume    = OS_TRUE;
X        consume    = 1u;
N    } else {
N        consume    = OS_FALSE;
X        consume    = 0u;
N    }
N/*$PAGE*/
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    switch (wait_type) {
N        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
X        case 2u:                          
N             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
N             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
N                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
X                 if (consume == 1u) {                  
N                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;   /* Clear ONLY the flags we wanted    */
N                 }
N                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
N                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
X                 {OS_CPU_SR_Restore(cpu_sr);};                        
N                 *perr                   = OS_ERR_NONE;
X                 *perr                   = 0u;
N                 return (flags_rdy);
N             } else {                                      /* Block task until events occur or timeout */
N                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
N                 OS_EXIT_CRITICAL();
X                 {OS_CPU_SR_Restore(cpu_sr);};
N             }
N             break;
N
N        case OS_FLAG_WAIT_SET_ANY:
X        case 3u:
N             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
N             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
N                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
X                 if (consume == 1u) {                  
N                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;    /* Clear ONLY the flags that we got */
N                 }
N                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
N                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
X                 {OS_CPU_SR_Restore(cpu_sr);};                        
N                 *perr                   = OS_ERR_NONE;
X                 *perr                   = 0u;
N                 return (flags_rdy);
N             } else {                                      /* Block task until events occur or timeout */
N                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
N                 OS_EXIT_CRITICAL();
X                 {OS_CPU_SR_Restore(cpu_sr);};
N             }
N             break;
N
N#if OS_FLAG_WAIT_CLR_EN > 0u
X#if 1u > 0u
N        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
X        case 0u:                          
N             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;    /* Extract only the bits we want     */
N             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
N                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
X                 if (consume == 1u) {                  
N                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
N                 }
N                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
N                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
X                 {OS_CPU_SR_Restore(cpu_sr);};                        
N                 *perr                   = OS_ERR_NONE;
X                 *perr                   = 0u;
N                 return (flags_rdy);
N             } else {                                      /* Block task until events occur or timeout */
N                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
N                 OS_EXIT_CRITICAL();
X                 {OS_CPU_SR_Restore(cpu_sr);};
N             }
N             break;
N
N        case OS_FLAG_WAIT_CLR_ANY:
X        case 1u:
N             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;   /* Extract only the bits we want      */
N             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
N                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
X                 if (consume == 1u) {                  
N                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
N                 }
N                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
N                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
X                 {OS_CPU_SR_Restore(cpu_sr);};                        
N                 *perr                   = OS_ERR_NONE;
X                 *perr                   = 0u;
N                 return (flags_rdy);
N             } else {                                      /* Block task until events occur or timeout */
N                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
N                 OS_EXIT_CRITICAL();
X                 {OS_CPU_SR_Restore(cpu_sr);};
N             }
N             break;
N#endif
N
N        default:
N             OS_EXIT_CRITICAL();
X             {OS_CPU_SR_Restore(cpu_sr);};
N             flags_rdy = (OS_FLAGS)0;
N             *perr      = OS_ERR_FLAG_WAIT_TYPE;
X             *perr      = 111u;
N             return (flags_rdy);
N    }
N/*$PAGE*/
N    OS_Sched();                                            /* Find next HPT ready to run               */
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
X    if (OSTCBCur->OSTCBStatPend != 0u) {       
N        pend_stat                = OSTCBCur->OSTCBStatPend;
N        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
X        OSTCBCur->OSTCBStatPend  = 0u;
N        OS_FlagUnlink(&node);
N        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
X        OSTCBCur->OSTCBStat      = 0x00u;             
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        flags_rdy                = (OS_FLAGS)0;
N        switch (pend_stat) {
N            case OS_STAT_PEND_ABORT:
X            case 2u:
N                 *perr = OS_ERR_PEND_ABORT;                /* Indicate that we aborted   waiting       */
X                 *perr = 14u;                 
N                 break;
N
N            case OS_STAT_PEND_TO:
X            case 1u:
N            default:
N                 *perr = OS_ERR_TIMEOUT;                   /* Indicate that we timed-out waiting       */
X                 *perr = 10u;                    
N                 break;
N        }
N        return (flags_rdy);
N    }
N    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
N    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
X    if (consume == 1u) {                               
N        switch (wait_type) {
N            case OS_FLAG_WAIT_SET_ALL:
X            case 2u:
N            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
X            case 3u:                      
N                 pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;
N                 break;
N
N#if OS_FLAG_WAIT_CLR_EN > 0u
X#if 1u > 0u
N            case OS_FLAG_WAIT_CLR_ALL:
X            case 0u:
N            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
X            case 1u:                      
N                 pgrp->OSFlagFlags |=  flags_rdy;
N                 break;
N#endif
N            default:
N                 OS_EXIT_CRITICAL();
X                 {OS_CPU_SR_Restore(cpu_sr);};
N                 *perr = OS_ERR_FLAG_WAIT_TYPE;
X                 *perr = 111u;
N                 return ((OS_FLAGS)0);
N        }
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
X    *perr = 0u;                                    
N    return (flags_rdy);
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                               GET FLAGS WHO CAUSED TASK TO BECOME READY
N*
N* Description: This function is called to obtain the flags that caused the task to become ready to run.
N*              In other words, this function allows you to tell "Who done it!".
N*
N* Arguments  : None
N*
N* Returns    : The flags that caused the task to be ready.
N*
N* Called from: Task ONLY
N*********************************************************************************************************
N*/
N
NOS_FLAGS  OSFlagPendGetFlagsRdy (void)
N{
N    OS_FLAGS      flags;
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR     cpu_sr = 0u;
N#endif
N
N
N
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    flags = OSTCBCur->OSTCBFlagsRdy;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (flags);
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         POST EVENT FLAG BIT(S)
N*
N* Description: This function is called to set or clear some bits in an event flag group.  The bits to
N*              set or clear are specified by a 'bit mask'.
N*
N* Arguments  : pgrp          is a pointer to the desired event flag group.
N*
N*              flags         If 'opt' (see below) is OS_FLAG_SET, each bit that is set in 'flags' will
N*                            set the corresponding bit in the event flag group.  e.g. to set bits 0, 4
N*                            and 5 you would set 'flags' to:
N*
N*                                0x31     (note, bit 0 is least significant bit)
N*
N*                            If 'opt' (see below) is OS_FLAG_CLR, each bit that is set in 'flags' will
N*                            CLEAR the corresponding bit in the event flag group.  e.g. to clear bits 0,
N*                            4 and 5 you would specify 'flags' as:
N*
N*                                0x31     (note, bit 0 is least significant bit)
N*
N*              opt           indicates whether the flags will be:
N*                                set     (OS_FLAG_SET) or
N*                                cleared (OS_FLAG_CLR)
N*
N*              perr          is a pointer to an error code and can be:
N*                            OS_ERR_NONE                The call was successfull
N*                            OS_ERR_FLAG_INVALID_PGRP   You passed a NULL pointer
N*                            OS_ERR_EVENT_TYPE          You are not pointing to an event flag group
N*                            OS_ERR_FLAG_INVALID_OPT    You specified an invalid option
N*
N* Returns    : the new value of the event flags bits that are still set.
N*
N* Called From: Task or ISR
N*
N* WARNING(s) : 1) The execution time of this function depends on the number of tasks waiting on the event
N*                 flag group.
N*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
N*                 the event flag group.
N*********************************************************************************************************
N*/
NOS_FLAGS  OSFlagPost (OS_FLAG_GRP  *pgrp,
N                      OS_FLAGS      flags,
N                      INT8U         opt,
N                      INT8U        *perr)
N{
N    OS_FLAG_NODE *pnode;
N    BOOLEAN       sched;
N    OS_FLAGS      flags_cur;
N    OS_FLAGS      flags_rdy;
N    BOOLEAN       rdy;
N#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
X#if 3u == 3u                          
N    OS_CPU_SR     cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_FLAGS)0);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
S        *perr = OS_ERR_FLAG_INVALID_PGRP;
S        return ((OS_FLAGS)0);
S    }
N#endif
N    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
X    if (pgrp->OSFlagType != 5u) {     
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return ((OS_FLAGS)0);
N    }
N/*$PAGE*/
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    switch (opt) {
N        case OS_FLAG_CLR:
X        case 0u:
N             pgrp->OSFlagFlags &= (OS_FLAGS)~flags;  /* Clear the flags specified in the group         */
N             break;
N
N        case OS_FLAG_SET:
X        case 1u:
N             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
N             break;
N
N        default:
N             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
X             {OS_CPU_SR_Restore(cpu_sr);};                      
N             *perr = OS_ERR_FLAG_INVALID_OPT;
X             *perr = 113u;
N             return ((OS_FLAGS)0);
N    }
N    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
X    sched = 0u;                                 
N    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
N    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
N        switch (pnode->OSFlagNodeWaitType) {
N            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
X            case 2u:                
N                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
N                 if (flags_rdy == pnode->OSFlagNodeFlags) {
N                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
N                     if (rdy == OS_TRUE) {
X                     if (rdy == 1u) {
N                         sched = OS_TRUE;                     /* When done we will reschedule          */
X                         sched = 1u;                      
N                     }
N                 }
N                 break;
N
N            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
X            case 3u:                
N                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
N                 if (flags_rdy != (OS_FLAGS)0) {
N                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
N                     if (rdy == OS_TRUE) {
X                     if (rdy == 1u) {
N                         sched = OS_TRUE;                     /* When done we will reschedule          */
X                         sched = 1u;                      
N                     }
N                 }
N                 break;
N
N#if OS_FLAG_WAIT_CLR_EN > 0u
X#if 1u > 0u
N            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
X            case 0u:                
N                 flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
N                 if (flags_rdy == pnode->OSFlagNodeFlags) {
N                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
N                     if (rdy == OS_TRUE) {
X                     if (rdy == 1u) {
N                         sched = OS_TRUE;                     /* When done we will reschedule          */
X                         sched = 1u;                      
N                     }
N                 }
N                 break;
N
N            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
X            case 1u:                
N                 flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
N                 if (flags_rdy != (OS_FLAGS)0) {
N                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
N                     if (rdy == OS_TRUE) {
X                     if (rdy == 1u) {
N                         sched = OS_TRUE;                     /* When done we will reschedule          */
X                         sched = 1u;                      
N                     }
N                 }
N                 break;
N#endif
N            default:
N                 OS_EXIT_CRITICAL();
X                 {OS_CPU_SR_Restore(cpu_sr);};
N                 *perr = OS_ERR_FLAG_WAIT_TYPE;
X                 *perr = 111u;
N                 return ((OS_FLAGS)0);
N        }
N        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    if (sched == OS_TRUE) {
X    if (sched == 1u) {
N        OS_Sched();
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    flags_cur = pgrp->OSFlagFlags;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr     = OS_ERR_NONE;
X    *perr     = 0u;
N    return (flags_cur);
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           QUERY EVENT FLAG
N*
N* Description: This function is used to check the value of the event flag group.
N*
N* Arguments  : pgrp         is a pointer to the desired event flag group.
N*
N*              perr          is a pointer to an error code returned to the called:
N*                            OS_ERR_NONE                The call was successfull
N*                            OS_ERR_FLAG_INVALID_PGRP   You passed a NULL pointer
N*                            OS_ERR_EVENT_TYPE          You are not pointing to an event flag group
N*
N* Returns    : The current value of the event flag group.
N*
N* Called From: Task or ISR
N*********************************************************************************************************
N*/
N
N#if OS_FLAG_QUERY_EN > 0u
X#if 1u > 0u
NOS_FLAGS  OSFlagQuery (OS_FLAG_GRP  *pgrp,
N                       INT8U        *perr)
N{
N    OS_FLAGS   flags;
N#if OS_CRITICAL_METHOD == 3u                      /* Allocate storage for CPU status register          */
X#if 3u == 3u                       
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_FLAGS)0);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
S        *perr = OS_ERR_FLAG_INVALID_PGRP;
S        return ((OS_FLAGS)0);
S    }
N#endif
N    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
X    if (pgrp->OSFlagType != 5u) {  
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return ((OS_FLAGS)0);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    flags = pgrp->OSFlagFlags;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr = OS_ERR_NONE;
X    *perr = 0u;
N    return (flags);                               /* Return the current value of the event flags       */
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                         SUSPEND TASK UNTIL EVENT FLAG(s) RECEIVED OR TIMEOUT OCCURS
N*
N* Description: This function is internal to uC/OS-II and is used to put a task to sleep until the desired
N*              event flag bit(s) are set.
N*
N* Arguments  : pgrp          is a pointer to the desired event flag group.
N*
N*              pnode         is a pointer to a structure which contains data about the task waiting for
N*                            event flag bit(s) to be set.
N*
N*              flags         Is a bit pattern indicating which bit(s) (i.e. flags) you wish to check.
N*                            The bits you want are specified by setting the corresponding bits in
N*                            'flags'.  e.g. if your application wants to wait for bits 0 and 1 then
N*                            'flags' would contain 0x03.
N*
N*              wait_type     specifies whether you want ALL bits to be set/cleared or ANY of the bits
N*                            to be set/cleared.
N*                            You can specify the following argument:
N*
N*                            OS_FLAG_WAIT_CLR_ALL   You will check ALL bits in 'mask' to be clear (0)
N*                            OS_FLAG_WAIT_CLR_ANY   You will check ANY bit  in 'mask' to be clear (0)
N*                            OS_FLAG_WAIT_SET_ALL   You will check ALL bits in 'mask' to be set   (1)
N*                            OS_FLAG_WAIT_SET_ANY   You will check ANY bit  in 'mask' to be set   (1)
N*
N*              timeout       is the desired amount of time that the task will wait for the event flag
N*                            bit(s) to be set.
N*
N* Returns    : none
N*
N* Called by  : OSFlagPend()  OS_FLAG.C
N*
N* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N
Nstatic  void  OS_FlagBlock (OS_FLAG_GRP  *pgrp,
N                            OS_FLAG_NODE *pnode,
N                            OS_FLAGS      flags,
N                            INT8U         wait_type,
N                            INT32U        timeout)
N{
N    OS_FLAG_NODE  *pnode_next;
N    INT8U          y;
N
N
N    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
X    OSTCBCur->OSTCBStat      |= 0x20u;
N    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
X    OSTCBCur->OSTCBStatPend   = 0u;
N    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
N#if OS_TASK_DEL_EN > 0u
X#if 1u > 0u
N    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
N#endif
N    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
N    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
N    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
N    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
N    pnode->OSFlagNodePrev     = (void *)0;
N    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
N    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
N    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
N        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
N    }
N    pgrp->OSFlagWaitList = (void *)pnode;
N
N    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
N    OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
N    if (OSRdyTbl[y] == 0x00u) {
N        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
N    }
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                    INITIALIZE THE EVENT FLAG MODULE
N*
N* Description: This function is called by uC/OS-II to initialize the event flag module.  Your application
N*              MUST NOT call this function.  In other words, this function is internal to uC/OS-II.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
N*********************************************************************************************************
N*/
N
Nvoid  OS_FlagInit (void)
N{
N#if OS_MAX_FLAGS == 1u
X#if 5u == 1u
S    OSFlagFreeList                 = (OS_FLAG_GRP *)&OSFlagTbl[0];  /* Only ONE event flag group!      */
S    OSFlagFreeList->OSFlagType     = OS_EVENT_TYPE_UNUSED;
S    OSFlagFreeList->OSFlagWaitList = (void *)0;
S    OSFlagFreeList->OSFlagFlags    = (OS_FLAGS)0;
S#if OS_FLAG_NAME_EN > 0u
S    OSFlagFreeList->OSFlagName     = (INT8U *)"?";
S#endif
N#endif
N
N#if OS_MAX_FLAGS >= 2u
X#if 5u >= 2u
N    INT16U        ix;
N    INT16U        ix_next;
N    OS_FLAG_GRP  *pgrp1;
N    OS_FLAG_GRP  *pgrp2;
N
N
N    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
N    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
X    for (ix = 0u; ix < (5u - 1u); ix++) {                  
N        ix_next = ix + 1u;
N        pgrp1 = &OSFlagTbl[ix];
N        pgrp2 = &OSFlagTbl[ix_next];
N        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
X        pgrp1->OSFlagType     = 0u;
N        pgrp1->OSFlagWaitList = (void *)pgrp2;
N#if OS_FLAG_NAME_EN > 0u
X#if 1u > 0u
N        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
N#endif
N    }
N    pgrp1                 = &OSFlagTbl[ix];
N    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
X    pgrp1->OSFlagType     = 0u;
N    pgrp1->OSFlagWaitList = (void *)0;
N#if OS_FLAG_NAME_EN > 0u
X#if 1u > 0u
N    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
N#endif
N    OSFlagFreeList        = &OSFlagTbl[0];
N#endif
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                              MAKE TASK READY-TO-RUN, EVENT(s) OCCURRED
N*
N* Description: This function is internal to uC/OS-II and is used to make a task ready-to-run because the
N*              desired event flag bits have been set.
N*
N* Arguments  : pnode         is a pointer to a structure which contains data about the task waiting for
N*                            event flag bit(s) to be set.
N*
N*              flags_rdy     contains the bit pattern of the event flags that cause the task to become
N*                            ready-to-run.
N*
N* Returns    : OS_TRUE       If the task has been placed in the ready list and thus needs scheduling
N*              OS_FALSE      The task is still not ready to run and thus scheduling is not necessary
N*
N* Called by  : OSFlagsPost() OS_FLAG.C
N*
N* Note(s)    : 1) This function assumes that interrupts are disabled.
N*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N
Nstatic  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode,
N                                 OS_FLAGS      flags_rdy)
N{
N    OS_TCB   *ptcb;
N    BOOLEAN   sched;
N
N
N    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
N    ptcb->OSTCBDly       = 0u;
N    ptcb->OSTCBFlagsRdy  = flags_rdy;
N    ptcb->OSTCBStat     &= (INT8U)~(INT8U)OS_STAT_FLAG;
X    ptcb->OSTCBStat     &= (INT8U)~(INT8U)0x20u;
N    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
X    ptcb->OSTCBStatPend  = 0u;
N    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
X    if (ptcb->OSTCBStat == 0x00u) {                   
N        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
N        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
N        sched                   = OS_TRUE;
X        sched                   = 1u;
N    } else {
N        sched                   = OS_FALSE;
X        sched                   = 0u;
N    }
N    OS_FlagUnlink(pnode);
N    return (sched);
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                  UNLINK EVENT FLAG NODE FROM WAITING LIST
N*
N* Description: This function is internal to uC/OS-II and is used to unlink an event flag node from a
N*              list of tasks waiting for the event flag.
N*
N* Arguments  : pnode         is a pointer to a structure which contains data about the task waiting for
N*                            event flag bit(s) to be set.
N*
N* Returns    : none
N*
N* Called by  : OS_FlagTaskRdy() OS_FLAG.C
N*              OSFlagPend()     OS_FLAG.C
N*              OSTaskDel()      OS_TASK.C
N*
N* Note(s)    : 1) This function assumes that interrupts are disabled.
N*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N
Nvoid  OS_FlagUnlink (OS_FLAG_NODE *pnode)
N{
N#if OS_TASK_DEL_EN > 0u
X#if 1u > 0u
N    OS_TCB       *ptcb;
N#endif
N    OS_FLAG_GRP  *pgrp;
N    OS_FLAG_NODE *pnode_prev;
N    OS_FLAG_NODE *pnode_next;
N
N
N    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
N    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
N    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
N        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
N        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
N        if (pnode_next != (OS_FLAG_NODE *)0) {
N            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
N        }
N    } else {                                                    /* No,  A node somewhere in the list   */
N        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
N        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
N            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
N        }
N    }
N#if OS_TASK_DEL_EN > 0u
X#if 1u > 0u
N    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
N    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
N#endif
N}
N#endif
N	 	   	  			 		 	 	  		  	  			 			  		 	  				 	 		  	 	  	 		 		   		  	  			 				 		 		  	 	 	     	 					 	   	   	 	  	 		  	  			 	 	  		 		   		   	 			 
L 30 "..\..\uCOS-II\Source\ucos_ii.c" 2
N#include <os_mbox.c>
L 1 "..\..\uCOS-II\Source\os_mbox.c" 1
N/*
N*********************************************************************************************************
N*                                                uC/OS-II
N*                                          The Real-Time Kernel
N*                                       MESSAGE MAILBOX MANAGEMENT
N*
N*                              (c) Copyright 1992-2010, Micrium, Weston, FL
N*                                           All Rights Reserved
N*
N* File    : OS_MBOX.C
N* By      : Jean J. Labrosse
N* Version : V2.92
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
N* its use in your product. We provide ALL the source code for your convenience and to help you experience
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
N* licensing fee.
N*********************************************************************************************************
N*/
N
N#ifndef  OS_MASTER_FILE
S#include <ucos_ii.h>
N#endif
N
N#if OS_MBOX_EN > 0u
X#if 1u > 0u
N/*
N*********************************************************************************************************
N*                                     ACCEPT MESSAGE FROM MAILBOX
N*
N* Description: This function checks the mailbox to see if a message is available.  Unlike OSMboxPend(),
N*              OSMboxAccept() does not suspend the calling task if a message is not available.
N*
N* Arguments  : pevent        is a pointer to the event control block
N*
N* Returns    : != (void *)0  is the message in the mailbox if one is available.  The mailbox is cleared
N*                            so the next time OSMboxAccept() is called, the mailbox will be empty.
N*              == (void *)0  if the mailbox is empty or,
N*                            if 'pevent' is a NULL pointer or,
N*                            if you didn't pass the proper event pointer.
N*********************************************************************************************************
N*/
N
N#if OS_MBOX_ACCEPT_EN > 0u
X#if 1u > 0u
Nvoid  *OSMboxAccept (OS_EVENT *pevent)
N{
N    void      *pmsg;
N#if OS_CRITICAL_METHOD == 3u                              /* Allocate storage for CPU status register  */
X#if 3u == 3u                               
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
S        return ((void *)0);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
X    if (pevent->OSEventType != 1u) {       
N        return ((void *)0);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    pmsg               = pevent->OSEventPtr;
N    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (pmsg);                                        /* Return the message received (or NULL)     */
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        CREATE A MESSAGE MAILBOX
N*
N* Description: This function creates a message mailbox if free event control blocks are available.
N*
N* Arguments  : pmsg          is a pointer to a message that you wish to deposit in the mailbox.  If
N*                            you set this value to the NULL pointer (i.e. (void *)0) then the mailbox
N*                            will be considered empty.
N*
N* Returns    : != (OS_EVENT *)0  is a pointer to the event control clock (OS_EVENT) associated with the
N*                                created mailbox
N*              == (OS_EVENT *)0  if no event control blocks were available
N*********************************************************************************************************
N*/
N
NOS_EVENT  *OSMboxCreate (void *pmsg)
N{
N    OS_EVENT  *pevent;
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
S    if (OSSafetyCriticalStartFlag == OS_TRUE) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_EVENT *)0);
S    }
N#endif
N
N    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
N        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    pevent = OSEventFreeList;                    /* Get next free event control block                  */
N    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
N        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    if (pevent != (OS_EVENT *)0) {
N        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
X        pevent->OSEventType    = 1u;
N        pevent->OSEventCnt     = 0u;
N        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
N#if OS_EVENT_NAME_EN > 0u
X#if 1u > 0u
N        pevent->OSEventName    = (INT8U *)(void *)"?";
N#endif
N        OS_EventWaitListInit(pevent);
N    }
N    return (pevent);                             /* Return pointer to event control block              */
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         DELETE A MAIBOX
N*
N* Description: This function deletes a mailbox and readies all tasks pending on the mailbox.
N*
N* Arguments  : pevent        is a pointer to the event control block associated with the desired
N*                            mailbox.
N*
N*              opt           determines delete options as follows:
N*                            opt == OS_DEL_NO_PEND   Delete the mailbox ONLY if no task pending
N*                            opt == OS_DEL_ALWAYS    Deletes the mailbox even if tasks are waiting.
N*                                                    In this case, all the tasks pending will be readied.
N*
N*              perr          is a pointer to an error code that can contain one of the following values:
N*                            OS_ERR_NONE             The call was successful and the mailbox was deleted
N*                            OS_ERR_DEL_ISR          If you attempted to delete the mailbox from an ISR
N*                            OS_ERR_INVALID_OPT      An invalid option was specified
N*                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the mailbox
N*                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a mailbox
N*                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
N*
N* Returns    : pevent        upon error
N*              (OS_EVENT *)0 if the mailbox was successfully deleted.
N*
N* Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
N*                 the mailbox MUST check the return code of OSMboxPend().
N*              2) OSMboxAccept() callers will not know that the intended mailbox has been deleted!
N*              3) This call can potentially disable interrupts for a long time.  The interrupt disable
N*                 time is directly proportional to the number of tasks waiting on the mailbox.
N*              4) Because ALL tasks pending on the mailbox will be readied, you MUST be careful in
N*                 applications where the mailbox is used for mutual exclusion because the resource(s)
N*                 will no longer be guarded by the mailbox.
N*********************************************************************************************************
N*/
N
N#if OS_MBOX_DEL_EN > 0u
X#if 1u > 0u
NOS_EVENT  *OSMboxDel (OS_EVENT  *pevent,
N                      INT8U      opt,
N                      INT8U     *perr)
N{
N    BOOLEAN    tasks_waiting;
N    OS_EVENT  *pevent_return;
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_EVENT *)0);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
S        *perr = OS_ERR_PEVENT_NULL;
S        return (pevent);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
X    if (pevent->OSEventType != 1u) {        
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return (pevent);
N    }
N    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
N        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
X        *perr = 15u;                             
N        return (pevent);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on mailbox      */
N        tasks_waiting = OS_TRUE;                           /* Yes                                      */
X        tasks_waiting = 1u;                            
N    } else {
N        tasks_waiting = OS_FALSE;                          /* No                                       */
X        tasks_waiting = 0u;                           
N    }
N    switch (opt) {
N        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
X        case 0u:                                
N             if (tasks_waiting == OS_FALSE) {
X             if (tasks_waiting == 0u) {
N#if OS_EVENT_NAME_EN > 0u
X#if 1u > 0u
N                 pevent->OSEventName = (INT8U *)(void *)"?";
N#endif
N                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
X                 pevent->OSEventType = 0u;
N                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
N                 pevent->OSEventCnt  = 0u;
N                 OSEventFreeList     = pevent;             /* Get next free event control block        */
N                 OS_EXIT_CRITICAL();
X                 {OS_CPU_SR_Restore(cpu_sr);};
N                 *perr               = OS_ERR_NONE;
X                 *perr               = 0u;
N                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
N             } else {
N                 OS_EXIT_CRITICAL();
X                 {OS_CPU_SR_Restore(cpu_sr);};
N                 *perr               = OS_ERR_TASK_WAITING;
X                 *perr               = 73u;
N                 pevent_return       = pevent;
N             }
N             break;
N
N        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
X        case 1u:                                 
N             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mailbox      */
N                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
X                 (void)OS_EventTaskRdy(pevent, (void *)0, 0x02u, 0u);
N             }
N#if OS_EVENT_NAME_EN > 0u
X#if 1u > 0u
N             pevent->OSEventName    = (INT8U *)(void *)"?";
N#endif
N             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
X             pevent->OSEventType    = 0u;
N             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
N             pevent->OSEventCnt     = 0u;
N             OSEventFreeList        = pevent;              /* Get next free event control block        */
N             OS_EXIT_CRITICAL();
X             {OS_CPU_SR_Restore(cpu_sr);};
N             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
X             if (tasks_waiting == 1u) {                
N                 OS_Sched();                               /* Find highest priority task ready to run  */
N             }
N             *perr         = OS_ERR_NONE;
X             *perr         = 0u;
N             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
N             break;
N
N        default:
N             OS_EXIT_CRITICAL();
X             {OS_CPU_SR_Restore(cpu_sr);};
N             *perr         = OS_ERR_INVALID_OPT;
X             *perr         = 7u;
N             pevent_return = pevent;
N             break;
N    }
N    return (pevent_return);
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                      PEND ON MAILBOX FOR A MESSAGE
N*
N* Description: This function waits for a message to be sent to a mailbox
N*
N* Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
N*
N*              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
N*                            wait for a message to arrive at the mailbox up to the amount of time
N*                            specified by this argument.  If you specify 0, however, your task will wait
N*                            forever at the specified mailbox or, until a message arrives.
N*
N*              perr          is a pointer to where an error message will be deposited.  Possible error
N*                            messages are:
N*
N*                            OS_ERR_NONE         The call was successful and your task received a
N*                                                message.
N*                            OS_ERR_TIMEOUT      A message was not received within the specified 'timeout'.
N*                            OS_ERR_PEND_ABORT   The wait on the mailbox was aborted.
N*                            OS_ERR_EVENT_TYPE   Invalid event type
N*                            OS_ERR_PEND_ISR     If you called this function from an ISR and the result
N*                                                would lead to a suspension.
N*                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
N*                            OS_ERR_PEND_LOCKED  If you called this function when the scheduler is locked
N*
N* Returns    : != (void *)0  is a pointer to the message received
N*              == (void *)0  if no message was received or,
N*                            if 'pevent' is a NULL pointer or,
N*                            if you didn't pass the proper pointer to the event control block.
N*********************************************************************************************************
N*/
N/*$PAGE*/
Nvoid  *OSMboxPend (OS_EVENT  *pevent,
N                   INT32U     timeout,
N                   INT8U     *perr)
N{
N    void      *pmsg;
N#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
X#if 3u == 3u                           
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((void *)0);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
S        *perr = OS_ERR_PEVENT_NULL;
S        return ((void *)0);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
X    if (pevent->OSEventType != 1u) {   
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return ((void *)0);
N    }
N    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
N        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
X        *perr = 2u;                       
N        return ((void *)0);
N    }
N    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
N        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
X        *perr = 13u;                    
N        return ((void *)0);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    pmsg = pevent->OSEventPtr;
N    if (pmsg != (void *)0) {                          /* See if there is already a message             */
N        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        *perr = OS_ERR_NONE;
X        *perr = 0u;
N        return (pmsg);                                /* Return the message received (or NULL)         */
N    }
N    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
X    OSTCBCur->OSTCBStat     |= 0x02u;           
N    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
X    OSTCBCur->OSTCBStatPend  = 0u;
N    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
N    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    OS_Sched();                                       /* Find next highest priority task ready to run  */
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
N        case OS_STAT_PEND_OK:
X        case 0u:
N             pmsg =  OSTCBCur->OSTCBMsg;
N            *perr =  OS_ERR_NONE;
X            *perr =  0u;
N             break;
N
N        case OS_STAT_PEND_ABORT:
X        case 2u:
N             pmsg = (void *)0;
N            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
X            *perr =  14u;                
N             break;
N
N        case OS_STAT_PEND_TO:
X        case 1u:
N        default:
N             OS_EventTaskRemove(OSTCBCur, pevent);
N             pmsg = (void *)0;
N            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
X            *perr =  10u;                   
N             break;
N    }
N    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
X    OSTCBCur->OSTCBStat          =  0x00u;       
N    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
X    OSTCBCur->OSTCBStatPend      =  0u;   
N    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
N#if (OS_EVENT_MULTI_EN > 0u)
X#if (1u > 0u)
N    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
N#endif
N    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (pmsg);                                    /* Return received message                       */
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                      ABORT WAITING ON A MESSAGE MAILBOX
N*
N* Description: This function aborts & readies any tasks currently waiting on a mailbox.  This function
N*              should be used to fault-abort the wait on the mailbox, rather than to normally signal
N*              the mailbox via OSMboxPost() or OSMboxPostOpt().
N*
N* Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox.
N*
N*              opt           determines the type of ABORT performed:
N*                            OS_PEND_OPT_NONE         ABORT wait for a single task (HPT) waiting on the
N*                                                     mailbox
N*                            OS_PEND_OPT_BROADCAST    ABORT wait for ALL tasks that are  waiting on the
N*                                                     mailbox
N*
N*              perr          is a pointer to where an error message will be deposited.  Possible error
N*                            messages are:
N*
N*                            OS_ERR_NONE         No tasks were     waiting on the mailbox.
N*                            OS_ERR_PEND_ABORT   At least one task waiting on the mailbox was readied
N*                                                and informed of the aborted wait; check return value
N*                                                for the number of tasks whose wait on the mailbox
N*                                                was aborted.
N*                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a mailbox.
N*                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
N*
N* Returns    : == 0          if no tasks were waiting on the mailbox, or upon error.
N*              >  0          if one or more tasks waiting on the mailbox are now readied and informed.
N*********************************************************************************************************
N*/
N
N#if OS_MBOX_PEND_ABORT_EN > 0u
X#if 1u > 0u
NINT8U  OSMboxPendAbort (OS_EVENT  *pevent,
N                        INT8U      opt,
N                        INT8U     *perr)
N{
N    INT8U      nbr_tasks;
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (0u);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
S        *perr = OS_ERR_PEVENT_NULL;
S        return (0u);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
X    if (pevent->OSEventType != 1u) {        
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return (0u);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on mailbox?      */
N        nbr_tasks = 0u;
N        switch (opt) {
N            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
X            case 1u:                     
N                 while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on mailbox  */
N                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
X                     (void)OS_EventTaskRdy(pevent, (void *)0, 0x02u, 2u);
N                     nbr_tasks++;
N                 }
N                 break;
N
N            case OS_PEND_OPT_NONE:
X            case 0u:
N            default:                                       /* No,  ready HPT       waiting on mailbox  */
N                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
X                 (void)OS_EventTaskRdy(pevent, (void *)0, 0x02u, 2u);
N                 nbr_tasks++;
N                 break;
N        }
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        OS_Sched();                                        /* Find HPT ready to run                    */
N        *perr = OS_ERR_PEND_ABORT;
X        *perr = 14u;
N        return (nbr_tasks);
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr = OS_ERR_NONE;
X    *perr = 0u;
N    return (0u);                                           /* No tasks waiting on mailbox              */
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                       POST MESSAGE TO A MAILBOX
N*
N* Description: This function sends a message to a mailbox
N*
N* Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
N*
N*              pmsg          is a pointer to the message to send.  You MUST NOT send a NULL pointer.
N*
N* Returns    : OS_ERR_NONE          The call was successful and the message was sent
N*              OS_ERR_MBOX_FULL     If the mailbox already contains a message.  You can can only send one
N*                                   message at a time and thus, the message MUST be consumed before you
N*                                   are allowed to send another one.
N*              OS_ERR_EVENT_TYPE    If you are attempting to post to a non mailbox.
N*              OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer
N*              OS_ERR_POST_NULL_PTR If you are attempting to post a NULL pointer
N*
N* Note(s)    : 1) HPT means Highest Priority Task
N*********************************************************************************************************
N*/
N
N#if OS_MBOX_POST_EN > 0u
X#if 1u > 0u
NINT8U  OSMboxPost (OS_EVENT  *pevent,
N                   void      *pmsg)
N{
N#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
X#if 3u == 3u                           
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
S        return (OS_ERR_PEVENT_NULL);
S    }
S    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
S        return (OS_ERR_POST_NULL_PTR);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
X    if (pevent->OSEventType != 1u) {   
N        return (OS_ERR_EVENT_TYPE);
X        return (1u);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on mailbox            */
N                                                      /* Ready HPT waiting on event                    */
N        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
X        (void)OS_EventTaskRdy(pevent, pmsg, 0x02u, 0u);
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        OS_Sched();                                   /* Find highest priority task ready to run       */
N        return (OS_ERR_NONE);
X        return (0u);
N    }
N    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_MBOX_FULL);
X        return (20u);
N    }
N    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (OS_ERR_NONE);
X    return (0u);
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                       POST MESSAGE TO A MAILBOX
N*
N* Description: This function sends a message to a mailbox
N*
N* Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
N*
N*              pmsg          is a pointer to the message to send.  You MUST NOT send a NULL pointer.
N*
N*              opt           determines the type of POST performed:
N*                            OS_POST_OPT_NONE         POST to a single waiting task
N*                                                     (Identical to OSMboxPost())
N*                            OS_POST_OPT_BROADCAST    POST to ALL tasks that are waiting on the mailbox
N*
N*                            OS_POST_OPT_NO_SCHED     Indicates that the scheduler will NOT be invoked
N*
N* Returns    : OS_ERR_NONE          The call was successful and the message was sent
N*              OS_ERR_MBOX_FULL     If the mailbox already contains a message.  You can can only send one
N*                                   message at a time and thus, the message MUST be consumed before you
N*                                   are allowed to send another one.
N*              OS_ERR_EVENT_TYPE    If you are attempting to post to a non mailbox.
N*              OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer
N*              OS_ERR_POST_NULL_PTR If you are attempting to post a NULL pointer
N*
N* Note(s)    : 1) HPT means Highest Priority Task
N*
N* Warning    : Interrupts can be disabled for a long time if you do a 'broadcast'.  In fact, the
N*              interrupt disable time is proportional to the number of tasks waiting on the mailbox.
N*********************************************************************************************************
N*/
N
N#if OS_MBOX_POST_OPT_EN > 0u
X#if 1u > 0u
NINT8U  OSMboxPostOpt (OS_EVENT  *pevent,
N                      void      *pmsg,
N                      INT8U      opt)
N{
N#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
X#if 3u == 3u                           
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
S        return (OS_ERR_PEVENT_NULL);
S    }
S    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
S        return (OS_ERR_POST_NULL_PTR);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
X    if (pevent->OSEventType != 1u) {   
N        return (OS_ERR_EVENT_TYPE);
X        return (1u);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on mailbox            */
N        if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
X        if ((opt & 0x01u) != 0x00u) {  
N            while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on mailbox     */
N                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
X                (void)OS_EventTaskRdy(pevent, pmsg, 0x02u, 0u);
N            }
N        } else {                                      /* No,  Post to HPT waiting on mbox              */
N            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
X            (void)OS_EventTaskRdy(pevent, pmsg, 0x02u, 0u);
N        }
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {     /* See if scheduler needs to be invoked          */
X        if ((opt & 0x04u) == 0u) {      
N            OS_Sched();                               /* Find HPT ready to run                         */
N        }
N        return (OS_ERR_NONE);
X        return (0u);
N    }
N    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_MBOX_FULL);
X        return (20u);
N    }
N    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (OS_ERR_NONE);
X    return (0u);
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        QUERY A MESSAGE MAILBOX
N*
N* Description: This function obtains information about a message mailbox.
N*
N* Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
N*
N*              p_mbox_data   is a pointer to a structure that will contain information about the message
N*                            mailbox.
N*
N* Returns    : OS_ERR_NONE         The call was successful and the message was sent
N*              OS_ERR_EVENT_TYPE   If you are attempting to obtain data from a non mailbox.
N*              OS_ERR_PEVENT_NULL  If 'pevent'      is a NULL pointer
N*              OS_ERR_PDATA_NULL   If 'p_mbox_data' is a NULL pointer
N*********************************************************************************************************
N*/
N
N#if OS_MBOX_QUERY_EN > 0u
X#if 1u > 0u
NINT8U  OSMboxQuery (OS_EVENT      *pevent,
N                    OS_MBOX_DATA  *p_mbox_data)
N{
N    INT8U       i;
N    OS_PRIO    *psrc;
N    OS_PRIO    *pdest;
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR   cpu_sr = 0u;
N#endif
N
N
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
S        return (OS_ERR_PEVENT_NULL);
S    }
S    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
S        return (OS_ERR_PDATA_NULL);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
X    if (pevent->OSEventType != 1u) {        
N        return (OS_ERR_EVENT_TYPE);
X        return (1u);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
N    psrc                    = &pevent->OSEventTbl[0];
N    pdest                   = &p_mbox_data->OSEventTbl[0];
N    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
X    for (i = 0u; i < ((10u) / 8u + 1u); i++) {
N        *pdest++ = *psrc++;
N    }
N    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (OS_ERR_NONE);
X    return (0u);
N}
N#endif                                                     /* OS_MBOX_QUERY_EN                         */
N#endif                                                     /* OS_MBOX_EN                               */
N	 	   	  			 		 	 	  		  	  			 			  		 	  				 	 		  	 	  	 		 		   		  	  			 				 		 		  	 	 	     	 					 	   	   	 	  	 		  	  			 	 	  		 		   		   	 			 
L 31 "..\..\uCOS-II\Source\ucos_ii.c" 2
N#include <os_mem.c>
L 1 "..\..\uCOS-II\Source\os_mem.c" 1
N/*
N*********************************************************************************************************
N*                                                uC/OS-II
N*                                          The Real-Time Kernel
N*                                            MEMORY MANAGEMENT
N*
N*                              (c) Copyright 1992-2010, Micrium, Weston, FL
N*                                           All Rights Reserved
N*
N* File    : OS_MEM.C
N* By      : Jean J. Labrosse
N* Version : V2.92
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
N* its use in your product. We provide ALL the source code for your convenience and to help you experience
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
N* licensing fee.
N*********************************************************************************************************
N*/
N
N#ifndef  OS_MASTER_FILE
S#include <ucos_ii.h>
N#endif
N
N#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
X#if (1u > 0u) && (5u > 0u)
N/*
N*********************************************************************************************************
N*                                        CREATE A MEMORY PARTITION
N*
N* Description : Create a fixed-sized memory partition that will be managed by uC/OS-II.
N*
N* Arguments   : addr     is the starting address of the memory partition
N*
N*               nblks    is the number of memory blocks to create from the partition.
N*
N*               blksize  is the size (in bytes) of each block in the memory partition.
N*
N*               perr     is a pointer to a variable containing an error message which will be set by
N*                        this function to either:
N*
N*                        OS_ERR_NONE              if the memory partition has been created correctly.
N*                        OS_ERR_MEM_INVALID_ADDR  if you are specifying an invalid address for the memory
N*                                                 storage of the partition or, the block does not align
N*                                                 on a pointer boundary
N*                        OS_ERR_MEM_INVALID_PART  no free partitions available
N*                        OS_ERR_MEM_INVALID_BLKS  user specified an invalid number of blocks (must be >= 2)
N*                        OS_ERR_MEM_INVALID_SIZE  user specified an invalid block size
N*                                                   - must be greater than the size of a pointer
N*                                                   - must be able to hold an integral number of pointers
N* Returns    : != (OS_MEM *)0  is the partition was created
N*              == (OS_MEM *)0  if the partition was not created because of invalid arguments or, no
N*                              free partition is available.
N*********************************************************************************************************
N*/
N
NOS_MEM  *OSMemCreate (void   *addr,
N                      INT32U  nblks,
N                      INT32U  blksize,
N                      INT8U  *perr)
N{
N    OS_MEM    *pmem;
N    INT8U     *pblk;
N    void     **plink;
N    INT32U     loops;
N    INT32U     i;
N#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
X#if 3u == 3u                           
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_MEM *)0);
S    }
N#endif
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
S    if (OSSafetyCriticalStartFlag == OS_TRUE) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_MEM *)0);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
S        *perr = OS_ERR_MEM_INVALID_ADDR;
S        return ((OS_MEM *)0);
S    }
S    if (((INT32U)addr & (sizeof(void *) - 1u)) != 0u){  /* Must be pointer size aligned                */
S        *perr = OS_ERR_MEM_INVALID_ADDR;
S        return ((OS_MEM *)0);
S    }
S    if (nblks < 2u) {                                 /* Must have at least 2 blocks per partition     */
S        *perr = OS_ERR_MEM_INVALID_BLKS;
S        return ((OS_MEM *)0);
S    }
S    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
S        *perr = OS_ERR_MEM_INVALID_SIZE;
S        return ((OS_MEM *)0);
S    }
N#endif
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    pmem = OSMemFreeList;                             /* Get next free memory partition                */
N    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
N        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
N        *perr = OS_ERR_MEM_INVALID_PART;
X        *perr = 90u;
N        return ((OS_MEM *)0);
N    }
N    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
N    pblk  = (INT8U *)addr;
N    loops  = nblks - 1u;
N    for (i = 0u; i < loops; i++) {
N        pblk +=  blksize;                             /* Point to the FOLLOWING block                  */
N       *plink = (void  *)pblk;                        /* Save pointer to NEXT block in CURRENT block   */
N        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
N    }
N    *plink              = (void *)0;                  /* Last memory block points to NULL              */
N    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
N    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
N    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
N    pmem->OSMemNBlks    = nblks;
N    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
N    *perr               = OS_ERR_NONE;
X    *perr               = 0u;
N    return (pmem);
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          GET A MEMORY BLOCK
N*
N* Description : Get a memory block from a partition
N*
N* Arguments   : pmem    is a pointer to the memory partition control block
N*
N*               perr    is a pointer to a variable containing an error message which will be set by this
N*                       function to either:
N*
N*                       OS_ERR_NONE             if the memory partition has been created correctly.
N*                       OS_ERR_MEM_NO_FREE_BLKS if there are no more free memory blocks to allocate to caller
N*                       OS_ERR_MEM_INVALID_PMEM if you passed a NULL pointer for 'pmem'
N*
N* Returns     : A pointer to a memory block if no error is detected
N*               A pointer to NULL if an error is detected
N*********************************************************************************************************
N*/
N
Nvoid  *OSMemGet (OS_MEM  *pmem,
N                 INT8U   *perr)
N{
N    void      *pblk;
N#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
X#if 3u == 3u                           
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((void *)0);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
S        *perr = OS_ERR_MEM_INVALID_PMEM;
S        return ((void *)0);
S    }
N#endif
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (pmem->OSMemNFree > 0u) {                      /* See if there are any free memory blocks       */
N        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
N        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
N        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        *perr = OS_ERR_NONE;                          /*      No error                                 */
X        *perr = 0u;                           
N        return (pblk);                                /*      Return memory block to caller            */
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
X    *perr = 93u;                   
N    return ((void *)0);                               /*      Return NULL pointer to caller            */
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   GET THE NAME OF A MEMORY PARTITION
N*
N* Description: This function is used to obtain the name assigned to a memory partition.
N*
N* Arguments  : pmem      is a pointer to the memory partition
N*
N*              pname     is a pointer to a pointer to an ASCII string that will receive the name of the memory partition.
N*
N*              perr      is a pointer to an error code that can contain one of the following values:
N*
N*                        OS_ERR_NONE                if the name was copied to 'pname'
N*                        OS_ERR_MEM_INVALID_PMEM    if you passed a NULL pointer for 'pmem'
N*                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
N*                        OS_ERR_NAME_GET_ISR        You called this function from an ISR
N*
N* Returns    : The length of the string or 0 if 'pmem' is a NULL pointer.
N*********************************************************************************************************
N*/
N
N#if OS_MEM_NAME_EN > 0u
X#if 1u > 0u
NINT8U  OSMemNameGet (OS_MEM   *pmem,
N                     INT8U   **pname,
N                     INT8U    *perr)
N{
N    INT8U      len;
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (0u);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
S        *perr = OS_ERR_MEM_INVALID_PMEM;
S        return (0u);
S    }
S    if (pname == (INT8U **)0) {                  /* Is 'pname' a NULL pointer?                         */
S        *perr = OS_ERR_PNAME_NULL;
S        return (0u);
S    }
N#endif
N    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
N        *perr = OS_ERR_NAME_GET_ISR;
X        *perr = 17u;
N        return (0u);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    *pname = pmem->OSMemName;
N    len    = OS_StrLen(*pname);
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr  = OS_ERR_NONE;
X    *perr  = 0u;
N    return (len);
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                 ASSIGN A NAME TO A MEMORY PARTITION
N*
N* Description: This function assigns a name to a memory partition.
N*
N* Arguments  : pmem      is a pointer to the memory partition
N*
N*              pname     is a pointer to an ASCII string that contains the name of the memory partition.
N*
N*              perr      is a pointer to an error code that can contain one of the following values:
N*
N*                        OS_ERR_NONE                if the name was copied to 'pname'
N*                        OS_ERR_MEM_INVALID_PMEM    if you passed a NULL pointer for 'pmem'
N*                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
N*                        OS_ERR_MEM_NAME_TOO_LONG   if the name doesn't fit in the storage area
N*                        OS_ERR_NAME_SET_ISR        if you called this function from an ISR
N*
N* Returns    : None
N*********************************************************************************************************
N*/
N
N#if OS_MEM_NAME_EN > 0u
X#if 1u > 0u
Nvoid  OSMemNameSet (OS_MEM  *pmem,
N                    INT8U   *pname,
N                    INT8U   *perr)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return;
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
S        *perr = OS_ERR_MEM_INVALID_PMEM;
S        return;
S    }
S    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
S        *perr = OS_ERR_PNAME_NULL;
S        return;
S    }
N#endif
N    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
N        *perr = OS_ERR_NAME_SET_ISR;
X        *perr = 18u;
N        return;
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    pmem->OSMemName = pname;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr           = OS_ERR_NONE;
X    *perr           = 0u;
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         RELEASE A MEMORY BLOCK
N*
N* Description : Returns a memory block to a partition
N*
N* Arguments   : pmem    is a pointer to the memory partition control block
N*
N*               pblk    is a pointer to the memory block being released.
N*
N* Returns     : OS_ERR_NONE              if the memory block was inserted into the partition
N*               OS_ERR_MEM_FULL          if you are returning a memory block to an already FULL memory
N*                                        partition (You freed more blocks than you allocated!)
N*               OS_ERR_MEM_INVALID_PMEM  if you passed a NULL pointer for 'pmem'
N*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
N*********************************************************************************************************
N*/
N
NINT8U  OSMemPut (OS_MEM  *pmem,
N                 void    *pblk)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
S        return (OS_ERR_MEM_INVALID_PMEM);
S    }
S    if (pblk == (void *)0) {                     /* Must release a valid block                         */
S        return (OS_ERR_MEM_INVALID_PBLK);
S    }
N#endif
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_MEM_FULL);
X        return (94u);
N    }
N    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
N    pmem->OSMemFreeList = pblk;
N    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
X    return (0u);                         
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          QUERY MEMORY PARTITION
N*
N* Description : This function is used to determine the number of free memory blocks and the number of
N*               used memory blocks from a memory partition.
N*
N* Arguments   : pmem        is a pointer to the memory partition control block
N*
N*               p_mem_data  is a pointer to a structure that will contain information about the memory
N*                           partition.
N*
N* Returns     : OS_ERR_NONE               if no errors were found.
N*               OS_ERR_MEM_INVALID_PMEM   if you passed a NULL pointer for 'pmem'
N*               OS_ERR_MEM_INVALID_PDATA  if you passed a NULL pointer to the data recipient.
N*********************************************************************************************************
N*/
N
N#if OS_MEM_QUERY_EN > 0u
X#if 1u > 0u
NINT8U  OSMemQuery (OS_MEM       *pmem,
N                   OS_MEM_DATA  *p_mem_data)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
S        return (OS_ERR_MEM_INVALID_PMEM);
S    }
S    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
S        return (OS_ERR_MEM_INVALID_PDATA);
S    }
N#endif
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    p_mem_data->OSAddr     = pmem->OSMemAddr;
N    p_mem_data->OSFreeList = pmem->OSMemFreeList;
N    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
N    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
N    p_mem_data->OSNFree    = pmem->OSMemNFree;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
N    return (OS_ERR_NONE);
X    return (0u);
N}
N#endif                                           /* OS_MEM_QUERY_EN                                    */
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                    INITIALIZE MEMORY PARTITION MANAGER
N*
N* Description : This function is called by uC/OS-II to initialize the memory partition manager.  Your
N*               application MUST NOT call this function.
N*
N* Arguments   : none
N*
N* Returns     : none
N*
N* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N
Nvoid  OS_MemInit (void)
N{
N#if OS_MAX_MEM_PART == 1u
X#if 5u == 1u
S    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
S    OSMemFreeList               = (OS_MEM *)&OSMemTbl[0]; /* Point to beginning of free list           */
S#if OS_MEM_NAME_EN > 0u
S    OSMemFreeList->OSMemName    = (INT8U *)"?";           /* Unknown name                              */
S#endif
N#endif
N
N#if OS_MAX_MEM_PART >= 2u
X#if 5u >= 2u
N    OS_MEM  *pmem;
N    INT16U   i;
N
N
N    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
N    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
X    for (i = 0u; i < (5u - 1u); i++) {        
N        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
N        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
N#if OS_MEM_NAME_EN > 0u
X#if 1u > 0u
N        pmem->OSMemName  = (INT8U *)(void *)"?";
N#endif
N    }
N    pmem                = &OSMemTbl[i];
N    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
N#if OS_MEM_NAME_EN > 0u
X#if 1u > 0u
N    pmem->OSMemName = (INT8U *)(void *)"?";
N#endif
N
N    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
N#endif
N}
N#endif                                                    /* OS_MEM_EN                                 */
N	 	   	  			 		 	 	  		  	  			 			  		 	  				 	 		  	 	  	 		 		   		  	  			 				 		 		  	 	 	     	 					 	   	   	 	  	 		  	  			 	 	  		 		   		   	 			 
L 32 "..\..\uCOS-II\Source\ucos_ii.c" 2
N#include <os_mutex.c>
L 1 "..\..\uCOS-II\Source\os_mutex.c" 1
N/*
N*********************************************************************************************************
N*                                                uC/OS-II
N*                                          The Real-Time Kernel
N*                                  MUTUAL EXCLUSION SEMAPHORE MANAGEMENT
N*
N*                              (c) Copyright 1992-2010, Micrium, Weston, FL
N*                                           All Rights Reserved
N*
N* File    : OS_MUTEX.C
N* By      : Jean J. Labrosse
N* Version : V2.92
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
N* its use in your product. We provide ALL the source code for your convenience and to help you experience
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
N* licensing fee.
N*********************************************************************************************************
N*/
N
N#ifndef  OS_MASTER_FILE
S#include <ucos_ii.h>
N#endif
N
N
N#if OS_MUTEX_EN > 0u
X#if 1u > 0u
N/*
N*********************************************************************************************************
N*                                            LOCAL CONSTANTS
N*********************************************************************************************************
N*/
N
N#define  OS_MUTEX_KEEP_LOWER_8   ((INT16U)0x00FFu)
N#define  OS_MUTEX_KEEP_UPPER_8   ((INT16U)0xFF00u)
N
N#define  OS_MUTEX_AVAILABLE      ((INT16U)0x00FFu)
N
N/*
N*********************************************************************************************************
N*                                            LOCAL CONSTANTS
N*********************************************************************************************************
N*/
N
Nstatic  void  OSMutex_RdyAtPrio(OS_TCB *ptcb, INT8U prio);
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   ACCEPT MUTUAL EXCLUSION SEMAPHORE
N*
N* Description: This  function checks the mutual exclusion semaphore to see if a resource is available.
N*              Unlike OSMutexPend(), OSMutexAccept() does not suspend the calling task if the resource is
N*              not available or the event did not occur.
N*
N* Arguments  : pevent     is a pointer to the event control block
N*
N*              perr       is a pointer to an error code which will be returned to your application:
N*                            OS_ERR_NONE         if the call was successful.
N*                            OS_ERR_EVENT_TYPE   if 'pevent' is not a pointer to a mutex
N*                            OS_ERR_PEVENT_NULL  'pevent' is a NULL pointer
N*                            OS_ERR_PEND_ISR     if you called this function from an ISR
N*                            OS_ERR_PIP_LOWER    If the priority of the task that owns the Mutex is
N*                                                HIGHER (i.e. a lower number) than the PIP.  This error
N*                                                indicates that you did not set the PIP higher (lower
N*                                                number) than ALL the tasks that compete for the Mutex.
N*                                                Unfortunately, this is something that could not be
N*                                                detected when the Mutex is created because we don't know
N*                                                what tasks will be using the Mutex.
N*
N* Returns    : == OS_TRUE    if the resource is available, the mutual exclusion semaphore is acquired
N*              == OS_FALSE   a) if the resource is not available
N*                            b) you didn't pass a pointer to a mutual exclusion semaphore
N*                            c) you called this function from an ISR
N*
N* Warning(s) : This function CANNOT be called from an ISR because mutual exclusion semaphores are
N*              intended to be used by tasks only.
N*********************************************************************************************************
N*/
N
N#if OS_MUTEX_ACCEPT_EN > 0u
X#if 1u > 0u
NBOOLEAN  OSMutexAccept (OS_EVENT  *pevent,
N                        INT8U     *perr)
N{
N    INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
N#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
X#if 3u == 3u                            
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (OS_FALSE);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
S        *perr = OS_ERR_PEVENT_NULL;
S        return (OS_FALSE);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
X    if (pevent->OSEventType != 4u) {   
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return (OS_FALSE);
X        return (0u);
N    }
N    if (OSIntNesting > 0u) {                           /* Make sure it's not called from an ISR        */
N        *perr = OS_ERR_PEND_ISR;
X        *perr = 2u;
N        return (OS_FALSE);
X        return (0u);
N    }
N    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
X    {cpu_sr = OS_CPU_SR_Save();};                                
N    pip = (INT8U)(pevent->OSEventCnt >> 8u);           /* Get PIP from mutex                           */
N    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
X    if ((pevent->OSEventCnt & ((INT16U)0x00FFu)) == ((INT16U)0x00FFu)) {
N        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
X        pevent->OSEventCnt &= ((INT16U)0xFF00u);    
N        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
N        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
N        if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
N            OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
X            {OS_CPU_SR_Restore(cpu_sr);};                         
N            *perr = OS_ERR_PIP_LOWER;
X            *perr = 120u;
N        } else {
N            OS_EXIT_CRITICAL();
X            {OS_CPU_SR_Restore(cpu_sr);};
N            *perr = OS_ERR_NONE;
X            *perr = 0u;
N        }
N        return (OS_TRUE);
X        return (1u);
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr = OS_ERR_NONE;
X    *perr = 0u;
N    return (OS_FALSE);
X    return (0u);
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                  CREATE A MUTUAL EXCLUSION SEMAPHORE
N*
N* Description: This function creates a mutual exclusion semaphore.
N*
N* Arguments  : prio          is the priority to use when accessing the mutual exclusion semaphore.  In
N*                            other words, when the semaphore is acquired and a higher priority task
N*                            attempts to obtain the semaphore then the priority of the task owning the
N*                            semaphore is raised to this priority.  It is assumed that you will specify
N*                            a priority that is LOWER in value than ANY of the tasks competing for the
N*                            mutex.
N*
N*              perr          is a pointer to an error code which will be returned to your application:
N*                               OS_ERR_NONE         if the call was successful.
N*                               OS_ERR_CREATE_ISR   if you attempted to create a MUTEX from an ISR
N*                               OS_ERR_PRIO_EXIST   if a task at the priority inheritance priority
N*                                                   already exist.
N*                               OS_ERR_PEVENT_NULL  No more event control blocks available.
N*                               OS_ERR_PRIO_INVALID if the priority you specify is higher that the
N*                                                   maximum allowed (i.e. > OS_LOWEST_PRIO)
N*
N* Returns    : != (void *)0  is a pointer to the event control clock (OS_EVENT) associated with the
N*                            created mutex.
N*              == (void *)0  if an error is detected.
N*
N* Note(s)    : 1) The LEAST significant 8 bits of '.OSEventCnt' are used to hold the priority number
N*                 of the task owning the mutex or 0xFF if no task owns the mutex.
N*
N*              2) The MOST  significant 8 bits of '.OSEventCnt' are used to hold the priority number
N*                 to use to reduce priority inversion.
N*********************************************************************************************************
N*/
N
NOS_EVENT  *OSMutexCreate (INT8U   prio,
N                          INT8U  *perr)
N{
N    OS_EVENT  *pevent;
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_EVENT *)0);
S    }
N#endif
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
S    if (OSSafetyCriticalStartFlag == OS_TRUE) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_EVENT *)0);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
S        *perr = OS_ERR_PRIO_INVALID;
S        return ((OS_EVENT *)0);
S    }
N#endif
N    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
N        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
X        *perr = 16u;                          
N        return ((OS_EVENT *)0);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
N        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
X        {OS_CPU_SR_Restore(cpu_sr);};                                 
N        *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
X        *perr = 40u;                          
N        return ((OS_EVENT *)0);
N    }
N    OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
X    OSTCBPrioTbl[prio] = ((OS_TCB *)1);                   
N    pevent             = OSEventFreeList;                  /* Get next free event control block        */
N    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
N        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
X        *perr              = 4u;            
N        return (pevent);
N    }
N    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
X    pevent->OSEventType    = 4u;
N    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8u) | OS_MUTEX_AVAILABLE; /* Resource is avail.  */
X    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8u) | ((INT16U)0x00FFu);  
N    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
N#if OS_EVENT_NAME_EN > 0u
X#if 1u > 0u
N    pevent->OSEventName    = (INT8U *)(void *)"?";
N#endif
N    OS_EventWaitListInit(pevent);
N    *perr                  = OS_ERR_NONE;
X    *perr                  = 0u;
N    return (pevent);
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          DELETE A MUTEX
N*
N* Description: This function deletes a mutual exclusion semaphore and readies all tasks pending on the it.
N*
N* Arguments  : pevent        is a pointer to the event control block associated with the desired mutex.
N*
N*              opt           determines delete options as follows:
N*                            opt == OS_DEL_NO_PEND   Delete mutex ONLY if no task pending
N*                            opt == OS_DEL_ALWAYS    Deletes the mutex even if tasks are waiting.
N*                                                    In this case, all the tasks pending will be readied.
N*
N*              perr          is a pointer to an error code that can contain one of the following values:
N*                            OS_ERR_NONE             The call was successful and the mutex was deleted
N*                            OS_ERR_DEL_ISR          If you attempted to delete the MUTEX from an ISR
N*                            OS_ERR_INVALID_OPT      An invalid option was specified
N*                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the mutex
N*                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a mutex
N*                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
N*
N* Returns    : pevent        upon error
N*              (OS_EVENT *)0 if the mutex was successfully deleted.
N*
N* Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
N*                 the mutex MUST check the return code of OSMutexPend().
N*
N*              2) This call can potentially disable interrupts for a long time.  The interrupt disable
N*                 time is directly proportional to the number of tasks waiting on the mutex.
N*
N*              3) Because ALL tasks pending on the mutex will be readied, you MUST be careful because the
N*                 resource(s) will no longer be guarded by the mutex.
N*
N*              4) IMPORTANT: In the 'OS_DEL_ALWAYS' case, we assume that the owner of the Mutex (if there
N*                            is one) is ready-to-run and is thus NOT pending on another kernel object or
N*                            has delayed itself.  In other words, if a task owns the mutex being deleted,
N*                            that task will be made ready-to-run at its original priority.
N*********************************************************************************************************
N*/
N
N#if OS_MUTEX_DEL_EN > 0u
X#if 1u > 0u
NOS_EVENT  *OSMutexDel (OS_EVENT  *pevent,
N                       INT8U      opt,
N                       INT8U     *perr)
N{
N    BOOLEAN    tasks_waiting;
N    OS_EVENT  *pevent_return;
N    INT8U      pip;                                        /* Priority inheritance priority            */
N    INT8U      prio;
N    OS_TCB    *ptcb;
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_EVENT *)0);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
S        *perr = OS_ERR_PEVENT_NULL;
S        return (pevent);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
X    if (pevent->OSEventType != 4u) {       
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return (pevent);
N    }
N    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
N        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
X        *perr = 15u;                              
N        return (pevent);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on mutex        */
N        tasks_waiting = OS_TRUE;                           /* Yes                                      */
X        tasks_waiting = 1u;                            
N    } else {
N        tasks_waiting = OS_FALSE;                          /* No                                       */
X        tasks_waiting = 0u;                           
N    }
N    switch (opt) {
N        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
X        case 0u:                                
N             if (tasks_waiting == OS_FALSE) {
X             if (tasks_waiting == 0u) {
N#if OS_EVENT_NAME_EN > 0u
X#if 1u > 0u
N                 pevent->OSEventName = (INT8U *)(void *)"?";
N#endif
N                 pip                 = (INT8U)(pevent->OSEventCnt >> 8u);
N                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
N                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
X                 pevent->OSEventType = 0u;
N                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
N                 pevent->OSEventCnt  = 0u;
N                 OSEventFreeList     = pevent;
N                 OS_EXIT_CRITICAL();
X                 {OS_CPU_SR_Restore(cpu_sr);};
N                 *perr               = OS_ERR_NONE;
X                 *perr               = 0u;
N                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
N             } else {
N                 OS_EXIT_CRITICAL();
X                 {OS_CPU_SR_Restore(cpu_sr);};
N                 *perr               = OS_ERR_TASK_WAITING;
X                 *perr               = 73u;
N                 pevent_return       = pevent;
N             }
N             break;
N
N        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
X        case 1u:                                 
N             pip  = (INT8U)(pevent->OSEventCnt >> 8u);                    /* Get PIP of mutex          */
N             prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
X             prio = (INT8U)(pevent->OSEventCnt & ((INT16U)0x00FFu));   
N             ptcb = (OS_TCB *)pevent->OSEventPtr;
N             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
N                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
N                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
N                 }
N             }
N             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mutex        */
N                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
X                 (void)OS_EventTaskRdy(pevent, (void *)0, 0x10u, 0u);
N             }
N#if OS_EVENT_NAME_EN > 0u
X#if 1u > 0u
N             pevent->OSEventName = (INT8U *)(void *)"?";
N#endif
N             pip                 = (INT8U)(pevent->OSEventCnt >> 8u);
N             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
N             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
X             pevent->OSEventType = 0u;
N             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
N             pevent->OSEventCnt  = 0u;
N             OSEventFreeList     = pevent;                 /* Get next free event control block        */
N             OS_EXIT_CRITICAL();
X             {OS_CPU_SR_Restore(cpu_sr);};
N             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
X             if (tasks_waiting == 1u) {                
N                 OS_Sched();                               /* Find highest priority task ready to run  */
N             }
N             *perr         = OS_ERR_NONE;
X             *perr         = 0u;
N             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
N             break;
N
N        default:
N             OS_EXIT_CRITICAL();
X             {OS_CPU_SR_Restore(cpu_sr);};
N             *perr         = OS_ERR_INVALID_OPT;
X             *perr         = 7u;
N             pevent_return = pevent;
N             break;
N    }
N    return (pevent_return);
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                  PEND ON MUTUAL EXCLUSION SEMAPHORE
N*
N* Description: This function waits for a mutual exclusion semaphore.
N*
N* Arguments  : pevent        is a pointer to the event control block associated with the desired
N*                            mutex.
N*
N*              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
N*                            wait for the resource up to the amount of time specified by this argument.
N*                            If you specify 0, however, your task will wait forever at the specified
N*                            mutex or, until the resource becomes available.
N*
N*              perr          is a pointer to where an error message will be deposited.  Possible error
N*                            messages are:
N*                               OS_ERR_NONE        The call was successful and your task owns the mutex
N*                               OS_ERR_TIMEOUT     The mutex was not available within the specified 'timeout'.
N*                               OS_ERR_PEND_ABORT  The wait on the mutex was aborted.
N*                               OS_ERR_EVENT_TYPE  If you didn't pass a pointer to a mutex
N*                               OS_ERR_PEVENT_NULL 'pevent' is a NULL pointer
N*                               OS_ERR_PEND_ISR    If you called this function from an ISR and the result
N*                                                  would lead to a suspension.
N*                               OS_ERR_PIP_LOWER   If the priority of the task that owns the Mutex is
N*                                                  HIGHER (i.e. a lower number) than the PIP.  This error
N*                                                  indicates that you did not set the PIP higher (lower
N*                                                  number) than ALL the tasks that compete for the Mutex.
N*                                                  Unfortunately, this is something that could not be
N*                                                  detected when the Mutex is created because we don't know
N*                                                  what tasks will be using the Mutex.
N*                               OS_ERR_PEND_LOCKED If you called this function when the scheduler is locked
N*
N* Returns    : none
N*
N* Note(s)    : 1) The task that owns the Mutex MUST NOT pend on any other event while it owns the mutex.
N*
N*              2) You MUST NOT change the priority of the task that owns the mutex
N*********************************************************************************************************
N*/
N
Nvoid  OSMutexPend (OS_EVENT  *pevent,
N                   INT32U     timeout,
N                   INT8U     *perr)
N{
N    INT8U      pip;                                        /* Priority Inheritance Priority (PIP)      */
N    INT8U      mprio;                                      /* Mutex owner priority                     */
N    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
N    OS_TCB    *ptcb;
N    OS_EVENT  *pevent2;
N    INT8U      y;
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return;
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
S        *perr = OS_ERR_PEVENT_NULL;
S        return;
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
X    if (pevent->OSEventType != 4u) {       
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return;
N    }
N    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
N        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
X        *perr = 2u;                            
N        return;
N    }
N    if (OSLockNesting > 0u) {                              /* See if called with scheduler locked ...  */
N        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
X        *perr = 13u;                         
N        return;
N    }
N/*$PAGE*/
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    pip = (INT8U)(pevent->OSEventCnt >> 8u);               /* Get PIP from mutex                       */
N                                                           /* Is Mutex available?                      */
N    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
X    if ((INT8U)(pevent->OSEventCnt & ((INT16U)0x00FFu)) == ((INT16U)0x00FFu)) {
N        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
X        pevent->OSEventCnt &= ((INT16U)0xFF00u);        
N        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
N        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
N        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
N            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
X            {OS_CPU_SR_Restore(cpu_sr);};                             
N            *perr = OS_ERR_PIP_LOWER;
X            *perr = 120u;
N        } else {
N            OS_EXIT_CRITICAL();
X            {OS_CPU_SR_Restore(cpu_sr);};
N            *perr = OS_ERR_NONE;
X            *perr = 0u;
N        }
N        return;
N    }
N    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
X    mprio = (INT8U)(pevent->OSEventCnt & ((INT16U)0x00FFu));   
N    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
N    if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
N        if (mprio > OSTCBCur->OSTCBPrio) {
N            y = ptcb->OSTCBY;
N            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0u) {          /*     See if mutex owner is ready   */
N                OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;         /*     Yes, Remove owner from Rdy ...*/
N                if (OSRdyTbl[y] == 0u) {                          /*          ... list at current prio */
N                    OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
N                }
N                rdy = OS_TRUE;
X                rdy = 1u;
N            } else {
N                pevent2 = ptcb->OSTCBEventPtr;
N                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
N                    y = ptcb->OSTCBY;
N                    pevent2->OSEventTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;
N                    if (pevent2->OSEventTbl[y] == 0u) {
N                        pevent2->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
N                    }
N                }
N                rdy = OS_FALSE;                            /* No                                       */
X                rdy = 0u;                             
N            }
N            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
N#if OS_LOWEST_PRIO <= 63u
X#if 10u <= 63u
N            ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3u);
N            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07u);
N#else
S            ptcb->OSTCBY    = (INT8U)((INT8U)(ptcb->OSTCBPrio >> 4u) & 0xFFu);
S            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0Fu);
N#endif
N            ptcb->OSTCBBitY = (OS_PRIO)(1uL << ptcb->OSTCBY);
N            ptcb->OSTCBBitX = (OS_PRIO)(1uL << ptcb->OSTCBX);
N
N            if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
X            if (rdy == 1u) {                           
N                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
N                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
N            } else {
N                pevent2 = ptcb->OSTCBEventPtr;
N                if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
N                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
N                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
N                }
N            }
N            OSTCBPrioTbl[pip] = ptcb;
N        }
N    }
N    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
X    OSTCBCur->OSTCBStat     |= 0x10u;          
N    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
X    OSTCBCur->OSTCBStatPend  = 0u;
N    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
N    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    OS_Sched();                                       /* Find next highest priority task ready         */
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
N        case OS_STAT_PEND_OK:
X        case 0u:
N             *perr = OS_ERR_NONE;
X             *perr = 0u;
N             break;
N
N        case OS_STAT_PEND_ABORT:
X        case 2u:
N             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
X             *perr = 14u;                
N             break;
N
N        case OS_STAT_PEND_TO:
X        case 1u:
N        default:
N             OS_EventTaskRemove(OSTCBCur, pevent);
N             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
X             *perr = 10u;                   
N             break;
N    }
N    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
X    OSTCBCur->OSTCBStat          =  0x00u;       
N    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
X    OSTCBCur->OSTCBStatPend      =  0u;   
N    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
N#if (OS_EVENT_MULTI_EN > 0u)
X#if (1u > 0u)
N    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
N#endif
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                  POST TO A MUTUAL EXCLUSION SEMAPHORE
N*
N* Description: This function signals a mutual exclusion semaphore
N*
N* Arguments  : pevent              is a pointer to the event control block associated with the desired
N*                                  mutex.
N*
N* Returns    : OS_ERR_NONE             The call was successful and the mutex was signaled.
N*              OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a mutex
N*              OS_ERR_PEVENT_NULL      'pevent' is a NULL pointer
N*              OS_ERR_POST_ISR         Attempted to post from an ISR (not valid for MUTEXes)
N*              OS_ERR_NOT_MUTEX_OWNER  The task that did the post is NOT the owner of the MUTEX.
N*              OS_ERR_PIP_LOWER        If the priority of the new task that owns the Mutex is
N*                                      HIGHER (i.e. a lower number) than the PIP.  This error
N*                                      indicates that you did not set the PIP higher (lower
N*                                      number) than ALL the tasks that compete for the Mutex.
N*                                      Unfortunately, this is something that could not be
N*                                      detected when the Mutex is created because we don't know
N*                                      what tasks will be using the Mutex.
N*********************************************************************************************************
N*/
N
NINT8U  OSMutexPost (OS_EVENT *pevent)
N{
N    INT8U      pip;                                   /* Priority inheritance priority                 */
N    INT8U      prio;
N#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
X#if 3u == 3u                           
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
N        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
X        return (5u);                      
N    }
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
S        return (OS_ERR_PEVENT_NULL);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
X    if (pevent->OSEventType != 4u) {  
N        return (OS_ERR_EVENT_TYPE);
X        return (1u);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    pip  = (INT8U)(pevent->OSEventCnt >> 8u);         /* Get priority inheritance priority of mutex    */
N    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
X    prio = (INT8U)(pevent->OSEventCnt & ((INT16U)0x00FFu));   
N    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_NOT_MUTEX_OWNER);
X        return (100u);
N    }
N    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
N        OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
N    }
N    OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
X    OSTCBPrioTbl[pip] = ((OS_TCB *)1);               
N    if (pevent->OSEventGrp != 0u) {                   /* Any task waiting for the mutex?               */
N                                                      /* Yes, Make HPT waiting for mutex ready         */
N        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
X        prio                = OS_EventTaskRdy(pevent, (void *)0, 0x10u, 0u);
N        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
X        pevent->OSEventCnt &= ((INT16U)0xFF00u);   
N        pevent->OSEventCnt |= prio;
N        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
N        if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
N            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
X            {OS_CPU_SR_Restore(cpu_sr);};                        
N            OS_Sched();                               /*      Find highest priority task ready to run  */
N            return (OS_ERR_PIP_LOWER);
X            return (120u);
N        } else {
N            OS_EXIT_CRITICAL();
X            {OS_CPU_SR_Restore(cpu_sr);};
N            OS_Sched();                               /*      Find highest priority task ready to run  */
N            return (OS_ERR_NONE);
X            return (0u);
N        }
N    }
N    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
X    pevent->OSEventCnt |= ((INT16U)0x00FFu);          
N    pevent->OSEventPtr  = (void *)0;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (OS_ERR_NONE);
X    return (0u);
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                     QUERY A MUTUAL EXCLUSION SEMAPHORE
N*
N* Description: This function obtains information about a mutex
N*
N* Arguments  : pevent          is a pointer to the event control block associated with the desired mutex
N*
N*              p_mutex_data    is a pointer to a structure that will contain information about the mutex
N*
N* Returns    : OS_ERR_NONE          The call was successful and the message was sent
N*              OS_ERR_QUERY_ISR     If you called this function from an ISR
N*              OS_ERR_PEVENT_NULL   If 'pevent'       is a NULL pointer
N*              OS_ERR_PDATA_NULL    If 'p_mutex_data' is a NULL pointer
N*              OS_ERR_EVENT_TYPE    If you are attempting to obtain data from a non mutex.
N*********************************************************************************************************
N*/
N
N#if OS_MUTEX_QUERY_EN > 0u
X#if 1u > 0u
NINT8U  OSMutexQuery (OS_EVENT       *pevent,
N                     OS_MUTEX_DATA  *p_mutex_data)
N{
N    INT8U       i;
N    OS_PRIO    *psrc;
N    OS_PRIO    *pdest;
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR   cpu_sr = 0u;
N#endif
N
N
N
N    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
N        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
X        return (6u);                          
N    }
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
S        return (OS_ERR_PEVENT_NULL);
S    }
S    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
S        return (OS_ERR_PDATA_NULL);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
X    if (pevent->OSEventType != 4u) {       
N        return (OS_ERR_EVENT_TYPE);
X        return (1u);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8u);
N    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
X    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & ((INT16U)0x00FFu));
N    if (p_mutex_data->OSOwnerPrio == 0xFFu) {
N        p_mutex_data->OSValue = OS_TRUE;
X        p_mutex_data->OSValue = 1u;
N    } else {
N        p_mutex_data->OSValue = OS_FALSE;
X        p_mutex_data->OSValue = 0u;
N    }
N    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
N    psrc                      = &pevent->OSEventTbl[0];
N    pdest                     = &p_mutex_data->OSEventTbl[0];
N    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
X    for (i = 0u; i < ((10u) / 8u + 1u); i++) {
N        *pdest++ = *psrc++;
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (OS_ERR_NONE);
X    return (0u);
N}
N#endif                                                     /* OS_MUTEX_QUERY_EN                        */
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                RESTORE A TASK BACK TO ITS ORIGINAL PRIORITY
N*
N* Description: This function makes a task ready at the specified priority
N*
N* Arguments  : ptcb            is a pointer to OS_TCB of the task to make ready
N*
N*              prio            is the desired priority
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
Nstatic  void  OSMutex_RdyAtPrio (OS_TCB  *ptcb,
N                                 INT8U    prio)
N{
N    INT8U  y;
N
N
N    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
N    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;
N    if (OSRdyTbl[y] == 0u) {
N        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
N    }
N    ptcb->OSTCBPrio         = prio;
N    OSPrioCur               = prio;                        /* The current task is now at this priority */
N#if OS_LOWEST_PRIO <= 63u
X#if 10u <= 63u
N    ptcb->OSTCBY            = (INT8U)((INT8U)(prio >> 3u) & 0x07u);
N    ptcb->OSTCBX            = (INT8U)(prio & 0x07u);
N#else
S    ptcb->OSTCBY            = (INT8U)((INT8U)(prio >> 4u) & 0x0Fu);
S    ptcb->OSTCBX            = (INT8U) (prio & 0x0Fu);
N#endif
N    ptcb->OSTCBBitY         = (OS_PRIO)(1uL << ptcb->OSTCBY);
N    ptcb->OSTCBBitX         = (OS_PRIO)(1uL << ptcb->OSTCBX);
N    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
N    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
N    OSTCBPrioTbl[prio]      = ptcb;
N
N}
N
N
N#endif                                                     /* OS_MUTEX_EN                              */
N	 	   	  			 		 	 	  		  	  			 			  		 	  				 	 		  	 	  	 		 		   		  	  			 				 		 		  	 	 	     	 					 	   	   	 	  	 		  	  			 	 	  		 		   		   	 			 
L 33 "..\..\uCOS-II\Source\ucos_ii.c" 2
N#include <os_q.c>
L 1 "..\..\uCOS-II\Source\os_q.c" 1
N/*
N*********************************************************************************************************
N*                                                uC/OS-II
N*                                          The Real-Time Kernel
N*                                        MESSAGE QUEUE MANAGEMENT
N*
N*                              (c) Copyright 1992-2010, Micrium, Weston, FL
N*                                           All Rights Reserved
N*
N* File    : OS_Q.C
N* By      : Jean J. Labrosse
N* Version : V2.92
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
N* its use in your product. We provide ALL the source code for your convenience and to help you experience
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
N* licensing fee.
N*********************************************************************************************************
N*/
N
N#ifndef  OS_MASTER_FILE
S#include <ucos_ii.h>
N#endif
N
N#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
X#if (0u > 0u) && (3u > 0u)
S/*
S*********************************************************************************************************
S*                                      ACCEPT MESSAGE FROM QUEUE
S*
S* Description: This function checks the queue to see if a message is available.  Unlike OSQPend(),
S*              OSQAccept() does not suspend the calling task if a message is not available.
S*
S* Arguments  : pevent        is a pointer to the event control block
S*
S*              perr          is a pointer to where an error message will be deposited.  Possible error
S*                            messages are:
S*
S*                            OS_ERR_NONE         The call was successful and your task received a
S*                                                message.
S*                            OS_ERR_EVENT_TYPE   You didn't pass a pointer to a queue
S*                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
S*                            OS_ERR_Q_EMPTY      The queue did not contain any messages
S*
S* Returns    : != (void *)0  is the message in the queue if one is available.  The message is removed
S*                            from the so the next time OSQAccept() is called, the queue will contain
S*                            one less entry.
S*              == (void *)0  if you received a NULL pointer message
S*                            if the queue is empty or,
S*                            if 'pevent' is a NULL pointer or,
S*                            if you passed an invalid event type
S*
S* Note(s)    : As of V2.60, you can now pass NULL pointers through queues.  Because of this, the argument
S*              'perr' has been added to the API to tell you about the outcome of the call.
S*********************************************************************************************************
S*/
S
S#if OS_Q_ACCEPT_EN > 0u
Svoid  *OSQAccept (OS_EVENT  *pevent,
S                  INT8U     *perr)
S{
S    void      *pmsg;
S    OS_Q      *pq;
S#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
S    OS_CPU_SR  cpu_sr = 0u;
S#endif
S
S
S
S#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((void *)0);
S    }
S#endif
S
S#if OS_ARG_CHK_EN > 0u
S    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
S        *perr = OS_ERR_PEVENT_NULL;
S        return ((void *)0);
S    }
S#endif
S    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
S        *perr = OS_ERR_EVENT_TYPE;
S        return ((void *)0);
S    }
S    OS_ENTER_CRITICAL();
S    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
S    if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
S        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
S        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
S        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
S            pq->OSQOut = pq->OSQStart;
S        }
S        *perr = OS_ERR_NONE;
S    } else {
S        *perr = OS_ERR_Q_EMPTY;
S        pmsg  = (void *)0;                       /* Queue is empty                                     */
S    }
S    OS_EXIT_CRITICAL();
S    return (pmsg);                               /* Return message received (or NULL)                  */
S}
S#endif
S/*$PAGE*/
S/*
S*********************************************************************************************************
S*                                        CREATE A MESSAGE QUEUE
S*
S* Description: This function creates a message queue if free event control blocks are available.
S*
S* Arguments  : start         is a pointer to the base address of the message queue storage area.  The
S*                            storage area MUST be declared as an array of pointers to 'void' as follows
S*
S*                            void *MessageStorage[size]
S*
S*              size          is the number of elements in the storage area
S*
S* Returns    : != (OS_EVENT *)0  is a pointer to the event control clock (OS_EVENT) associated with the
S*                                created queue
S*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
S*********************************************************************************************************
S*/
S
SOS_EVENT  *OSQCreate (void    **start,
S                      INT16U    size)
S{
S    OS_EVENT  *pevent;
S    OS_Q      *pq;
S#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
S    OS_CPU_SR  cpu_sr = 0u;
S#endif
S
S
S
S#ifdef OS_SAFETY_CRITICAL_IEC61508
S    if (OSSafetyCriticalStartFlag == OS_TRUE) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_EVENT *)0);
S    }
S#endif
S
S    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
S        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
S    }
S    OS_ENTER_CRITICAL();
S    pevent = OSEventFreeList;                    /* Get next free event control block                  */
S    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
S        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
S    }
S    OS_EXIT_CRITICAL();
S    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
S        OS_ENTER_CRITICAL();
S        pq = OSQFreeList;                        /* Get a free queue control block                     */
S        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
S            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
S            OS_EXIT_CRITICAL();
S            pq->OSQStart           = start;               /*      Initialize the queue                 */
S            pq->OSQEnd             = &start[size];
S            pq->OSQIn              = start;
S            pq->OSQOut             = start;
S            pq->OSQSize            = size;
S            pq->OSQEntries         = 0u;
S            pevent->OSEventType    = OS_EVENT_TYPE_Q;
S            pevent->OSEventCnt     = 0u;
S            pevent->OSEventPtr     = pq;
S#if OS_EVENT_NAME_EN > 0u
S            pevent->OSEventName    = (INT8U *)(void *)"?";
S#endif
S            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
S        } else {
S            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
S            OSEventFreeList    = pevent;
S            OS_EXIT_CRITICAL();
S            pevent = (OS_EVENT *)0;
S        }
S    }
S    return (pevent);
S}
S/*$PAGE*/
S/*
S*********************************************************************************************************
S*                                        DELETE A MESSAGE QUEUE
S*
S* Description: This function deletes a message queue and readies all tasks pending on the queue.
S*
S* Arguments  : pevent        is a pointer to the event control block associated with the desired
S*                            queue.
S*
S*              opt           determines delete options as follows:
S*                            opt == OS_DEL_NO_PEND   Delete the queue ONLY if no task pending
S*                            opt == OS_DEL_ALWAYS    Deletes the queue even if tasks are waiting.
S*                                                    In this case, all the tasks pending will be readied.
S*
S*              perr          is a pointer to an error code that can contain one of the following values:
S*                            OS_ERR_NONE             The call was successful and the queue was deleted
S*                            OS_ERR_DEL_ISR          If you tried to delete the queue from an ISR
S*                            OS_ERR_INVALID_OPT      An invalid option was specified
S*                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the queue
S*                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a queue
S*                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
S*
S* Returns    : pevent        upon error
S*              (OS_EVENT *)0 if the queue was successfully deleted.
S*
S* Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
S*                 the queue MUST check the return code of OSQPend().
S*              2) OSQAccept() callers will not know that the intended queue has been deleted unless
S*                 they check 'pevent' to see that it's a NULL pointer.
S*              3) This call can potentially disable interrupts for a long time.  The interrupt disable
S*                 time is directly proportional to the number of tasks waiting on the queue.
S*              4) Because ALL tasks pending on the queue will be readied, you MUST be careful in
S*                 applications where the queue is used for mutual exclusion because the resource(s)
S*                 will no longer be guarded by the queue.
S*              5) If the storage for the message queue was allocated dynamically (i.e. using a malloc()
S*                 type call) then your application MUST release the memory storage by call the counterpart
S*                 call of the dynamic allocation scheme used.  If the queue storage was created statically
S*                 then, the storage can be reused.
S*********************************************************************************************************
S*/
S
S#if OS_Q_DEL_EN > 0u
SOS_EVENT  *OSQDel (OS_EVENT  *pevent,
S                   INT8U      opt,
S                   INT8U     *perr)
S{
S    BOOLEAN    tasks_waiting;
S    OS_EVENT  *pevent_return;
S    OS_Q      *pq;
S#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
S    OS_CPU_SR  cpu_sr = 0u;
S#endif
S
S
S
S#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_EVENT *)0);
S    }
S#endif
S
S#if OS_ARG_CHK_EN > 0u
S    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
S        *perr = OS_ERR_PEVENT_NULL;
S        return (pevent);
S    }
S#endif
S    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
S        *perr = OS_ERR_EVENT_TYPE;
S        return (pevent);
S    }
S    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
S        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
S        return (pevent);
S    }
S    OS_ENTER_CRITICAL();
S    if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on queue        */
S        tasks_waiting = OS_TRUE;                           /* Yes                                      */
S    } else {
S        tasks_waiting = OS_FALSE;                          /* No                                       */
S    }
S    switch (opt) {
S        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
S             if (tasks_waiting == OS_FALSE) {
S#if OS_EVENT_NAME_EN > 0u
S                 pevent->OSEventName    = (INT8U *)(void *)"?";
S#endif
S                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
S                 pq->OSQPtr             = OSQFreeList;
S                 OSQFreeList            = pq;
S                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
S                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
S                 pevent->OSEventCnt     = 0u;
S                 OSEventFreeList        = pevent;          /* Get next free event control block        */
S                 OS_EXIT_CRITICAL();
S                 *perr                  = OS_ERR_NONE;
S                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
S             } else {
S                 OS_EXIT_CRITICAL();
S                 *perr                  = OS_ERR_TASK_WAITING;
S                 pevent_return          = pevent;
S             }
S             break;
S
S        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
S             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for queue        */
S                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
S             }
S#if OS_EVENT_NAME_EN > 0u
S             pevent->OSEventName    = (INT8U *)(void *)"?";
S#endif
S             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
S             pq->OSQPtr             = OSQFreeList;
S             OSQFreeList            = pq;
S             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
S             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
S             pevent->OSEventCnt     = 0u;
S             OSEventFreeList        = pevent;              /* Get next free event control block        */
S             OS_EXIT_CRITICAL();
S             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
S                 OS_Sched();                               /* Find highest priority task ready to run  */
S             }
S             *perr                  = OS_ERR_NONE;
S             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
S             break;
S
S        default:
S             OS_EXIT_CRITICAL();
S             *perr                  = OS_ERR_INVALID_OPT;
S             pevent_return          = pevent;
S             break;
S    }
S    return (pevent_return);
S}
S#endif
S
S/*$PAGE*/
S/*
S*********************************************************************************************************
S*                                             FLUSH QUEUE
S*
S* Description : This function is used to flush the contents of the message queue.
S*
S* Arguments   : none
S*
S* Returns     : OS_ERR_NONE         upon success
S*               OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a queue
S*               OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
S*
S* WARNING     : You should use this function with great care because, when to flush the queue, you LOOSE
S*               the references to what the queue entries are pointing to and thus, you could cause
S*               'memory leaks'.  In other words, the data you are pointing to that's being referenced
S*               by the queue entries should, most likely, need to be de-allocated (i.e. freed).
S*********************************************************************************************************
S*/
S
S#if OS_Q_FLUSH_EN > 0u
SINT8U  OSQFlush (OS_EVENT *pevent)
S{
S    OS_Q      *pq;
S#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
S    OS_CPU_SR  cpu_sr = 0u;
S#endif
S
S
S
S#if OS_ARG_CHK_EN > 0u
S    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
S        return (OS_ERR_PEVENT_NULL);
S    }
S    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
S        return (OS_ERR_EVENT_TYPE);
S    }
S#endif
S    OS_ENTER_CRITICAL();
S    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
S    pq->OSQIn      = pq->OSQStart;
S    pq->OSQOut     = pq->OSQStart;
S    pq->OSQEntries = 0u;
S    OS_EXIT_CRITICAL();
S    return (OS_ERR_NONE);
S}
S#endif
S
S/*$PAGE*/
S/*
S*********************************************************************************************************
S*                                     PEND ON A QUEUE FOR A MESSAGE
S*
S* Description: This function waits for a message to be sent to a queue
S*
S* Arguments  : pevent        is a pointer to the event control block associated with the desired queue
S*
S*              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
S*                            wait for a message to arrive at the queue up to the amount of time
S*                            specified by this argument.  If you specify 0, however, your task will wait
S*                            forever at the specified queue or, until a message arrives.
S*
S*              perr          is a pointer to where an error message will be deposited.  Possible error
S*                            messages are:
S*
S*                            OS_ERR_NONE         The call was successful and your task received a
S*                                                message.
S*                            OS_ERR_TIMEOUT      A message was not received within the specified 'timeout'.
S*                            OS_ERR_PEND_ABORT   The wait on the queue was aborted.
S*                            OS_ERR_EVENT_TYPE   You didn't pass a pointer to a queue
S*                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
S*                            OS_ERR_PEND_ISR     If you called this function from an ISR and the result
S*                                                would lead to a suspension.
S*                            OS_ERR_PEND_LOCKED  If you called this function with the scheduler is locked
S*
S* Returns    : != (void *)0  is a pointer to the message received
S*              == (void *)0  if you received a NULL pointer message or,
S*                            if no message was received or,
S*                            if 'pevent' is a NULL pointer or,
S*                            if you didn't pass a pointer to a queue.
S*
S* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
S*********************************************************************************************************
S*/
S
Svoid  *OSQPend (OS_EVENT  *pevent,
S                INT32U     timeout,
S                INT8U     *perr)
S{
S    void      *pmsg;
S    OS_Q      *pq;
S#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
S    OS_CPU_SR  cpu_sr = 0u;
S#endif
S
S
S
S#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((void *)0);
S    }
S#endif
S
S#if OS_ARG_CHK_EN > 0u
S    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
S        *perr = OS_ERR_PEVENT_NULL;
S        return ((void *)0);
S    }
S#endif
S    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
S        *perr = OS_ERR_EVENT_TYPE;
S        return ((void *)0);
S    }
S    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
S        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
S        return ((void *)0);
S    }
S    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked ...            */
S        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
S        return ((void *)0);
S    }
S    OS_ENTER_CRITICAL();
S    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
S    if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
S        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
S        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
S        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
S            pq->OSQOut = pq->OSQStart;
S        }
S        OS_EXIT_CRITICAL();
S        *perr = OS_ERR_NONE;
S        return (pmsg);                           /* Return message received                            */
S    }
S    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
S    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
S    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
S    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
S    OS_EXIT_CRITICAL();
S    OS_Sched();                                  /* Find next highest priority task ready to run       */
S    OS_ENTER_CRITICAL();
S    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
S        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
S             pmsg =  OSTCBCur->OSTCBMsg;
S            *perr =  OS_ERR_NONE;
S             break;
S
S        case OS_STAT_PEND_ABORT:
S             pmsg = (void *)0;
S            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
S             break;
S
S        case OS_STAT_PEND_TO:
S        default:
S             OS_EventTaskRemove(OSTCBCur, pevent);
S             pmsg = (void *)0;
S            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
S             break;
S    }
S    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
S    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
S    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
S#if (OS_EVENT_MULTI_EN > 0u)
S    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
S#endif
S    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
S    OS_EXIT_CRITICAL();
S    return (pmsg);                                    /* Return received message                       */
S}
S/*$PAGE*/
S/*
S*********************************************************************************************************
S*                                      ABORT WAITING ON A MESSAGE QUEUE
S*
S* Description: This function aborts & readies any tasks currently waiting on a queue.  This function
S*              should be used to fault-abort the wait on the queue, rather than to normally signal
S*              the queue via OSQPost(), OSQPostFront() or OSQPostOpt().
S*
S* Arguments  : pevent        is a pointer to the event control block associated with the desired queue.
S*
S*              opt           determines the type of ABORT performed:
S*                            OS_PEND_OPT_NONE         ABORT wait for a single task (HPT) waiting on the
S*                                                     queue
S*                            OS_PEND_OPT_BROADCAST    ABORT wait for ALL tasks that are  waiting on the
S*                                                     queue
S*
S*              perr          is a pointer to where an error message will be deposited.  Possible error
S*                            messages are:
S*
S*                            OS_ERR_NONE         No tasks were     waiting on the queue.
S*                            OS_ERR_PEND_ABORT   At least one task waiting on the queue was readied
S*                                                and informed of the aborted wait; check return value
S*                                                for the number of tasks whose wait on the queue
S*                                                was aborted.
S*                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a queue.
S*                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
S*
S* Returns    : == 0          if no tasks were waiting on the queue, or upon error.
S*              >  0          if one or more tasks waiting on the queue are now readied and informed.
S*********************************************************************************************************
S*/
S
S#if OS_Q_PEND_ABORT_EN > 0u
SINT8U  OSQPendAbort (OS_EVENT  *pevent,
S                     INT8U      opt,
S                     INT8U     *perr)
S{
S    INT8U      nbr_tasks;
S#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
S    OS_CPU_SR  cpu_sr = 0u;
S#endif
S
S
S
S#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (0u);
S    }
S#endif
S
S#if OS_ARG_CHK_EN > 0u
S    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
S        *perr = OS_ERR_PEVENT_NULL;
S        return (0u);
S    }
S#endif
S    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
S        *perr = OS_ERR_EVENT_TYPE;
S        return (0u);
S    }
S    OS_ENTER_CRITICAL();
S    if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on queue?        */
S        nbr_tasks = 0u;
S        switch (opt) {
S            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
S                 while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on queue    */
S                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
S                     nbr_tasks++;
S                 }
S                 break;
S
S            case OS_PEND_OPT_NONE:
S            default:                                       /* No,  ready HPT       waiting on queue    */
S                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
S                 nbr_tasks++;
S                 break;
S        }
S        OS_EXIT_CRITICAL();
S        OS_Sched();                                        /* Find HPT ready to run                    */
S        *perr = OS_ERR_PEND_ABORT;
S        return (nbr_tasks);
S    }
S    OS_EXIT_CRITICAL();
S    *perr = OS_ERR_NONE;
S    return (0u);                                           /* No tasks waiting on queue                */
S}
S#endif
S
S/*$PAGE*/
S/*
S*********************************************************************************************************
S*                                        POST MESSAGE TO A QUEUE
S*
S* Description: This function sends a message to a queue
S*
S* Arguments  : pevent        is a pointer to the event control block associated with the desired queue
S*
S*              pmsg          is a pointer to the message to send.
S*
S* Returns    : OS_ERR_NONE           The call was successful and the message was sent
S*              OS_ERR_Q_FULL         If the queue cannot accept any more messages because it is full.
S*              OS_ERR_EVENT_TYPE     If you didn't pass a pointer to a queue.
S*              OS_ERR_PEVENT_NULL    If 'pevent' is a NULL pointer
S*
S* Note(s)    : As of V2.60, this function allows you to send NULL pointer messages.
S*********************************************************************************************************
S*/
S
S#if OS_Q_POST_EN > 0u
SINT8U  OSQPost (OS_EVENT  *pevent,
S                void      *pmsg)
S{
S    OS_Q      *pq;
S#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
S    OS_CPU_SR  cpu_sr = 0u;
S#endif
S
S
S
S#if OS_ARG_CHK_EN > 0u
S    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
S        return (OS_ERR_PEVENT_NULL);
S    }
S#endif
S    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
S        return (OS_ERR_EVENT_TYPE);
S    }
S    OS_ENTER_CRITICAL();
S    if (pevent->OSEventGrp != 0u) {                    /* See if any task pending on queue             */
S                                                       /* Ready highest priority task waiting on event */
S        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
S        OS_EXIT_CRITICAL();
S        OS_Sched();                                    /* Find highest priority task ready to run      */
S        return (OS_ERR_NONE);
S    }
S    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
S    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
S        OS_EXIT_CRITICAL();
S        return (OS_ERR_Q_FULL);
S    }
S    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
S    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
S    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
S        pq->OSQIn = pq->OSQStart;
S    }
S    OS_EXIT_CRITICAL();
S    return (OS_ERR_NONE);
S}
S#endif
S/*$PAGE*/
S/*
S*********************************************************************************************************
S*                                   POST MESSAGE TO THE FRONT OF A QUEUE
S*
S* Description: This function sends a message to a queue but unlike OSQPost(), the message is posted at
S*              the front instead of the end of the queue.  Using OSQPostFront() allows you to send
S*              'priority' messages.
S*
S* Arguments  : pevent        is a pointer to the event control block associated with the desired queue
S*
S*              pmsg          is a pointer to the message to send.
S*
S* Returns    : OS_ERR_NONE           The call was successful and the message was sent
S*              OS_ERR_Q_FULL         If the queue cannot accept any more messages because it is full.
S*              OS_ERR_EVENT_TYPE     If you didn't pass a pointer to a queue.
S*              OS_ERR_PEVENT_NULL    If 'pevent' is a NULL pointer
S*
S* Note(s)    : As of V2.60, this function allows you to send NULL pointer messages.
S*********************************************************************************************************
S*/
S
S#if OS_Q_POST_FRONT_EN > 0u
SINT8U  OSQPostFront (OS_EVENT  *pevent,
S                     void      *pmsg)
S{
S    OS_Q      *pq;
S#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
S    OS_CPU_SR  cpu_sr = 0u;
S#endif
S
S
S
S#if OS_ARG_CHK_EN > 0u
S    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
S        return (OS_ERR_PEVENT_NULL);
S    }
S#endif
S    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
S        return (OS_ERR_EVENT_TYPE);
S    }
S    OS_ENTER_CRITICAL();
S    if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on queue              */
S                                                      /* Ready highest priority task waiting on event  */
S        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
S        OS_EXIT_CRITICAL();
S        OS_Sched();                                   /* Find highest priority task ready to run       */
S        return (OS_ERR_NONE);
S    }
S    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
S    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
S        OS_EXIT_CRITICAL();
S        return (OS_ERR_Q_FULL);
S    }
S    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
S        pq->OSQOut = pq->OSQEnd;
S    }
S    pq->OSQOut--;
S    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
S    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
S    OS_EXIT_CRITICAL();
S    return (OS_ERR_NONE);
S}
S#endif
S/*$PAGE*/
S/*
S*********************************************************************************************************
S*                                        POST MESSAGE TO A QUEUE
S*
S* Description: This function sends a message to a queue.  This call has been added to reduce code size
S*              since it can replace both OSQPost() and OSQPostFront().  Also, this function adds the
S*              capability to broadcast a message to ALL tasks waiting on the message queue.
S*
S* Arguments  : pevent        is a pointer to the event control block associated with the desired queue
S*
S*              pmsg          is a pointer to the message to send.
S*
S*              opt           determines the type of POST performed:
S*                            OS_POST_OPT_NONE         POST to a single waiting task
S*                                                     (Identical to OSQPost())
S*                            OS_POST_OPT_BROADCAST    POST to ALL tasks that are waiting on the queue
S*                            OS_POST_OPT_FRONT        POST as LIFO (Simulates OSQPostFront())
S*                            OS_POST_OPT_NO_SCHED     Indicates that the scheduler will NOT be invoked
S*
S* Returns    : OS_ERR_NONE           The call was successful and the message was sent
S*              OS_ERR_Q_FULL         If the queue cannot accept any more messages because it is full.
S*              OS_ERR_EVENT_TYPE     If you didn't pass a pointer to a queue.
S*              OS_ERR_PEVENT_NULL    If 'pevent' is a NULL pointer
S*
S* Warning    : Interrupts can be disabled for a long time if you do a 'broadcast'.  In fact, the
S*              interrupt disable time is proportional to the number of tasks waiting on the queue.
S*********************************************************************************************************
S*/
S
S#if OS_Q_POST_OPT_EN > 0u
SINT8U  OSQPostOpt (OS_EVENT  *pevent,
S                   void      *pmsg,
S                   INT8U      opt)
S{
S    OS_Q      *pq;
S#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
S    OS_CPU_SR  cpu_sr = 0u;
S#endif
S
S
S
S#if OS_ARG_CHK_EN > 0u
S    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
S        return (OS_ERR_PEVENT_NULL);
S    }
S#endif
S    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
S        return (OS_ERR_EVENT_TYPE);
S    }
S    OS_ENTER_CRITICAL();
S    if (pevent->OSEventGrp != 0x00u) {                /* See if any task pending on queue              */
S        if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
S            while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on queue       */
S                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
S            }
S        } else {                                      /* No,  Post to HPT waiting on queue             */
S            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
S        }
S        OS_EXIT_CRITICAL();
S        if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {	  /* See if scheduler needs to be invoked          */
S            OS_Sched();                               /* Find highest priority task ready to run       */
S        }
S        return (OS_ERR_NONE);
S    }
S    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
S    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
S        OS_EXIT_CRITICAL();
S        return (OS_ERR_Q_FULL);
S    }
S    if ((opt & OS_POST_OPT_FRONT) != 0x00u) {         /* Do we post to the FRONT of the queue?         */
S        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
S            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
S        }
S        pq->OSQOut--;
S        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
S    } else {                                          /* No,  Post as FIFO                             */
S        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
S        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
S            pq->OSQIn = pq->OSQStart;
S        }
S    }
S    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
S    OS_EXIT_CRITICAL();
S    return (OS_ERR_NONE);
S}
S#endif
S/*$PAGE*/
S/*
S*********************************************************************************************************
S*                                        QUERY A MESSAGE QUEUE
S*
S* Description: This function obtains information about a message queue.
S*
S* Arguments  : pevent        is a pointer to the event control block associated with the desired queue
S*
S*              p_q_data      is a pointer to a structure that will contain information about the message
S*                            queue.
S*
S* Returns    : OS_ERR_NONE         The call was successful and the message was sent
S*              OS_ERR_EVENT_TYPE   If you are attempting to obtain data from a non queue.
S*              OS_ERR_PEVENT_NULL  If 'pevent'   is a NULL pointer
S*              OS_ERR_PDATA_NULL   If 'p_q_data' is a NULL pointer
S*********************************************************************************************************
S*/
S
S#if OS_Q_QUERY_EN > 0u
SINT8U  OSQQuery (OS_EVENT  *pevent,
S                 OS_Q_DATA *p_q_data)
S{
S    OS_Q       *pq;
S    INT8U       i;
S    OS_PRIO    *psrc;
S    OS_PRIO    *pdest;
S#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
S    OS_CPU_SR   cpu_sr = 0u;
S#endif
S
S
S
S#if OS_ARG_CHK_EN > 0u
S    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
S        return (OS_ERR_PEVENT_NULL);
S    }
S    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
S        return (OS_ERR_PDATA_NULL);
S    }
S#endif
S    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
S        return (OS_ERR_EVENT_TYPE);
S    }
S    OS_ENTER_CRITICAL();
S    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
S    psrc                 = &pevent->OSEventTbl[0];
S    pdest                = &p_q_data->OSEventTbl[0];
S    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
S        *pdest++ = *psrc++;
S    }
S    pq = (OS_Q *)pevent->OSEventPtr;
S    if (pq->OSQEntries > 0u) {
S        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
S    } else {
S        p_q_data->OSMsg = (void *)0;
S    }
S    p_q_data->OSNMsgs = pq->OSQEntries;
S    p_q_data->OSQSize = pq->OSQSize;
S    OS_EXIT_CRITICAL();
S    return (OS_ERR_NONE);
S}
S#endif                                                 /* OS_Q_QUERY_EN                                */
S
S/*$PAGE*/
S/*
S*********************************************************************************************************
S*                                      QUEUE MODULE INITIALIZATION
S*
S* Description : This function is called by uC/OS-II to initialize the message queue module.  Your
S*               application MUST NOT call this function.
S*
S* Arguments   :  none
S*
S* Returns     : none
S*
S* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
S*********************************************************************************************************
S*/
S
Svoid  OS_QInit (void)
S{
S#if OS_MAX_QS == 1u
S    OSQFreeList         = &OSQTbl[0];                /* Only ONE queue!                                */
S    OSQFreeList->OSQPtr = (OS_Q *)0;
S#endif
S
S#if OS_MAX_QS >= 2u
S    INT16U   ix;
S    INT16U   ix_next;
S    OS_Q    *pq1;
S    OS_Q    *pq2;
S
S
S
S    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
S    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
S        ix_next = ix + 1u;
S        pq1 = &OSQTbl[ix];
S        pq2 = &OSQTbl[ix_next];
S        pq1->OSQPtr = pq2;
S    }
S    pq1         = &OSQTbl[ix];
S    pq1->OSQPtr = (OS_Q *)0;
S    OSQFreeList = &OSQTbl[0];
S#endif
S}
N#endif                                               /* OS_Q_EN                                        */
N	 	   	  			 		 	 	  		  	  			 			  		 	  				 	 		  	 	  	 		 		   		  	  			 				 		 		  	 	 	     	 					 	   	   	 	  	 		  	  			 	 	  		 		   		   	 			 
L 34 "..\..\uCOS-II\Source\ucos_ii.c" 2
N#include <os_sem.c>
L 1 "..\..\uCOS-II\Source\os_sem.c" 1
N/*
N*********************************************************************************************************
N*                                                uC/OS-II
N*                                          The Real-Time Kernel
N*                                          SEMAPHORE MANAGEMENT
N*
N*                              (c) Copyright 1992-2010, Micrium, Weston, FL
N*                                           All Rights Reserved
N*
N* File    : OS_SEM.C
N* By      : Jean J. Labrosse
N* Version : V2.92
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
N* its use in your product. We provide ALL the source code for your convenience and to help you experience
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
N* licensing fee.
N*********************************************************************************************************
N*/
N
N#ifndef  OS_MASTER_FILE
S#include <ucos_ii.h>
N#endif
N
N#if OS_SEM_EN > 0u
X#if 1u > 0u
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           ACCEPT SEMAPHORE
N*
N* Description: This function checks the semaphore to see if a resource is available or, if an event
N*              occurred.  Unlike OSSemPend(), OSSemAccept() does not suspend the calling task if the
N*              resource is not available or the event did not occur.
N*
N* Arguments  : pevent     is a pointer to the event control block
N*
N* Returns    : >  0       if the resource is available or the event did not occur the semaphore is
N*                         decremented to obtain the resource.
N*              == 0       if the resource is not available or the event did not occur or,
N*                         if 'pevent' is a NULL pointer or,
N*                         if you didn't pass a pointer to a semaphore
N*********************************************************************************************************
N*/
N
N#if OS_SEM_ACCEPT_EN > 0u
X#if 1u > 0u
NINT16U  OSSemAccept (OS_EVENT *pevent)
N{
N    INT16U     cnt;
N#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
X#if 3u == 3u                           
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
S        return (0u);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
X    if (pevent->OSEventType != 3u) {    
N        return (0u);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    cnt = pevent->OSEventCnt;
N    if (cnt > 0u) {                                   /* See if resource is available                  */
N        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (cnt);                                     /* Return semaphore count                        */
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           CREATE A SEMAPHORE
N*
N* Description: This function creates a semaphore.
N*
N* Arguments  : cnt           is the initial value for the semaphore.  If the value is 0, no resource is
N*                            available (or no event has occurred).  You initialize the semaphore to a
N*                            non-zero value to specify how many resources are available (e.g. if you have
N*                            10 resources, you would initialize the semaphore to 10).
N*
N* Returns    : != (void *)0  is a pointer to the event control block (OS_EVENT) associated with the
N*                            created semaphore
N*              == (void *)0  if no event control blocks were available
N*********************************************************************************************************
N*/
N
NOS_EVENT  *OSSemCreate (INT16U cnt)
N{
N    OS_EVENT  *pevent;
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
S    if (OSSafetyCriticalStartFlag == OS_TRUE) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_EVENT *)0);
S    }
N#endif
N
N    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
N        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    pevent = OSEventFreeList;                              /* Get next free event control block        */
N    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
N        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
N        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
X        pevent->OSEventType    = 3u;
N        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
N        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
N#if OS_EVENT_NAME_EN > 0u
X#if 1u > 0u
N        pevent->OSEventName    = (INT8U *)(void *)"?";
N#endif
N        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
N    }
N    return (pevent);
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         DELETE A SEMAPHORE
N*
N* Description: This function deletes a semaphore and readies all tasks pending on the semaphore.
N*
N* Arguments  : pevent        is a pointer to the event control block associated with the desired
N*                            semaphore.
N*
N*              opt           determines delete options as follows:
N*                            opt == OS_DEL_NO_PEND   Delete semaphore ONLY if no task pending
N*                            opt == OS_DEL_ALWAYS    Deletes the semaphore even if tasks are waiting.
N*                                                    In this case, all the tasks pending will be readied.
N*
N*              perr          is a pointer to an error code that can contain one of the following values:
N*                            OS_ERR_NONE             The call was successful and the semaphore was deleted
N*                            OS_ERR_DEL_ISR          If you attempted to delete the semaphore from an ISR
N*                            OS_ERR_INVALID_OPT      An invalid option was specified
N*                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the semaphore
N*                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a semaphore
N*                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
N*
N* Returns    : pevent        upon error
N*              (OS_EVENT *)0 if the semaphore was successfully deleted.
N*
N* Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
N*                 the semaphore MUST check the return code of OSSemPend().
N*              2) OSSemAccept() callers will not know that the intended semaphore has been deleted unless
N*                 they check 'pevent' to see that it's a NULL pointer.
N*              3) This call can potentially disable interrupts for a long time.  The interrupt disable
N*                 time is directly proportional to the number of tasks waiting on the semaphore.
N*              4) Because ALL tasks pending on the semaphore will be readied, you MUST be careful in
N*                 applications where the semaphore is used for mutual exclusion because the resource(s)
N*                 will no longer be guarded by the semaphore.
N*********************************************************************************************************
N*/
N
N#if OS_SEM_DEL_EN > 0u
X#if 1u > 0u
NOS_EVENT  *OSSemDel (OS_EVENT  *pevent,
N                     INT8U      opt,
N                     INT8U     *perr)
N{
N    BOOLEAN    tasks_waiting;
N    OS_EVENT  *pevent_return;
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_EVENT *)0);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
S        *perr = OS_ERR_PEVENT_NULL;
S        return (pevent);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
X    if (pevent->OSEventType != 3u) {         
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return (pevent);
N    }
N    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
N        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
X        *perr = 15u;                             
N        return (pevent);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on semaphore    */
N        tasks_waiting = OS_TRUE;                           /* Yes                                      */
X        tasks_waiting = 1u;                            
N    } else {
N        tasks_waiting = OS_FALSE;                          /* No                                       */
X        tasks_waiting = 0u;                           
N    }
N    switch (opt) {
N        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
X        case 0u:                                
N             if (tasks_waiting == OS_FALSE) {
X             if (tasks_waiting == 0u) {
N#if OS_EVENT_NAME_EN > 0u
X#if 1u > 0u
N                 pevent->OSEventName    = (INT8U *)(void *)"?";
N#endif
N                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
X                 pevent->OSEventType    = 0u;
N                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
N                 pevent->OSEventCnt     = 0u;
N                 OSEventFreeList        = pevent;          /* Get next free event control block        */
N                 OS_EXIT_CRITICAL();
X                 {OS_CPU_SR_Restore(cpu_sr);};
N                 *perr                  = OS_ERR_NONE;
X                 *perr                  = 0u;
N                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
N             } else {
N                 OS_EXIT_CRITICAL();
X                 {OS_CPU_SR_Restore(cpu_sr);};
N                 *perr                  = OS_ERR_TASK_WAITING;
X                 *perr                  = 73u;
N                 pevent_return          = pevent;
N             }
N             break;
N
N        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
X        case 1u:                                 
N             while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for semaphore    */
N                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
X                 (void)OS_EventTaskRdy(pevent, (void *)0, 0x01u, 0u);
N             }
N#if OS_EVENT_NAME_EN > 0u
X#if 1u > 0u
N             pevent->OSEventName    = (INT8U *)(void *)"?";
N#endif
N             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
X             pevent->OSEventType    = 0u;
N             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
N             pevent->OSEventCnt     = 0u;
N             OSEventFreeList        = pevent;              /* Get next free event control block        */
N             OS_EXIT_CRITICAL();
X             {OS_CPU_SR_Restore(cpu_sr);};
N             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
X             if (tasks_waiting == 1u) {                
N                 OS_Sched();                               /* Find highest priority task ready to run  */
N             }
N             *perr                  = OS_ERR_NONE;
X             *perr                  = 0u;
N             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
N             break;
N
N        default:
N             OS_EXIT_CRITICAL();
X             {OS_CPU_SR_Restore(cpu_sr);};
N             *perr                  = OS_ERR_INVALID_OPT;
X             *perr                  = 7u;
N             pevent_return          = pevent;
N             break;
N    }
N    return (pevent_return);
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           PEND ON SEMAPHORE
N*
N* Description: This function waits for a semaphore.
N*
N* Arguments  : pevent        is a pointer to the event control block associated with the desired
N*                            semaphore.
N*
N*              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
N*                            wait for the resource up to the amount of time specified by this argument.
N*                            If you specify 0, however, your task will wait forever at the specified
N*                            semaphore or, until the resource becomes available (or the event occurs).
N*
N*              perr          is a pointer to where an error message will be deposited.  Possible error
N*                            messages are:
N*
N*                            OS_ERR_NONE         The call was successful and your task owns the resource
N*                                                or, the event you are waiting for occurred.
N*                            OS_ERR_TIMEOUT      The semaphore was not received within the specified
N*                                                'timeout'.
N*                            OS_ERR_PEND_ABORT   The wait on the semaphore was aborted.
N*                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a semaphore.
N*                            OS_ERR_PEND_ISR     If you called this function from an ISR and the result
N*                                                would lead to a suspension.
N*                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
N*                            OS_ERR_PEND_LOCKED  If you called this function when the scheduler is locked
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N/*$PAGE*/
Nvoid  OSSemPend (OS_EVENT  *pevent,
N                 INT32U     timeout,
N                 INT8U     *perr)
N{
N#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
X#if 3u == 3u                           
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return;
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
S        *perr = OS_ERR_PEVENT_NULL;
S        return;
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
X    if (pevent->OSEventType != 3u) {    
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return;
N    }
N    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
N        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
X        *perr = 2u;                       
N        return;
N    }
N    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
N        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
X        *perr = 13u;                    
N        return;
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
N        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        *perr = OS_ERR_NONE;
X        *perr = 0u;
N        return;
N    }
N                                                      /* Otherwise, must wait until event occurs       */
N    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
X    OSTCBCur->OSTCBStat     |= 0x01u;            
N    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
X    OSTCBCur->OSTCBStatPend  = 0u;
N    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
N    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    OS_Sched();                                       /* Find next highest priority task ready         */
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
N        case OS_STAT_PEND_OK:
X        case 0u:
N             *perr = OS_ERR_NONE;
X             *perr = 0u;
N             break;
N
N        case OS_STAT_PEND_ABORT:
X        case 2u:
N             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
X             *perr = 14u;                
N             break;
N
N        case OS_STAT_PEND_TO:
X        case 1u:
N        default:
N             OS_EventTaskRemove(OSTCBCur, pevent);
N             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
X             *perr = 10u;                   
N             break;
N    }
N    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
X    OSTCBCur->OSTCBStat          =  0x00u;       
N    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
X    OSTCBCur->OSTCBStatPend      =  0u;   
N    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
N#if (OS_EVENT_MULTI_EN > 0u)
X#if (1u > 0u)
N    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
N#endif
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                      ABORT WAITING ON A SEMAPHORE
N*
N* Description: This function aborts & readies any tasks currently waiting on a semaphore.  This function
N*              should be used to fault-abort the wait on the semaphore, rather than to normally signal
N*              the semaphore via OSSemPost().
N*
N* Arguments  : pevent        is a pointer to the event control block associated with the desired
N*                            semaphore.
N*
N*              opt           determines the type of ABORT performed:
N*                            OS_PEND_OPT_NONE         ABORT wait for a single task (HPT) waiting on the
N*                                                     semaphore
N*                            OS_PEND_OPT_BROADCAST    ABORT wait for ALL tasks that are  waiting on the
N*                                                     semaphore
N*
N*              perr          is a pointer to where an error message will be deposited.  Possible error
N*                            messages are:
N*
N*                            OS_ERR_NONE         No tasks were     waiting on the semaphore.
N*                            OS_ERR_PEND_ABORT   At least one task waiting on the semaphore was readied
N*                                                and informed of the aborted wait; check return value
N*                                                for the number of tasks whose wait on the semaphore
N*                                                was aborted.
N*                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a semaphore.
N*                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
N*
N* Returns    : == 0          if no tasks were waiting on the semaphore, or upon error.
N*              >  0          if one or more tasks waiting on the semaphore are now readied and informed.
N*********************************************************************************************************
N*/
N
N#if OS_SEM_PEND_ABORT_EN > 0u
X#if 1u > 0u
NINT8U  OSSemPendAbort (OS_EVENT  *pevent,
N                       INT8U      opt,
N                       INT8U     *perr)
N{
N    INT8U      nbr_tasks;
N#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
X#if 3u == 3u                           
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (0u);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
S        *perr = OS_ERR_PEVENT_NULL;
S        return (0u);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
X    if (pevent->OSEventType != 3u) {    
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return (0u);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting on semaphore?         */
N        nbr_tasks = 0u;
N        switch (opt) {
N            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
X            case 1u:                
N                 while (pevent->OSEventGrp != 0u) {   /* Yes, ready ALL tasks waiting on semaphore     */
N                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
X                     (void)OS_EventTaskRdy(pevent, (void *)0, 0x01u, 2u);
N                     nbr_tasks++;
N                 }
N                 break;
N
N            case OS_PEND_OPT_NONE:
X            case 0u:
N            default:                                  /* No,  ready HPT       waiting on semaphore     */
N                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
X                 (void)OS_EventTaskRdy(pevent, (void *)0, 0x01u, 2u);
N                 nbr_tasks++;
N                 break;
N        }
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        OS_Sched();                                   /* Find HPT ready to run                         */
N        *perr = OS_ERR_PEND_ABORT;
X        *perr = 14u;
N        return (nbr_tasks);
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr = OS_ERR_NONE;
X    *perr = 0u;
N    return (0u);                                      /* No tasks waiting on semaphore                 */
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         POST TO A SEMAPHORE
N*
N* Description: This function signals a semaphore
N*
N* Arguments  : pevent        is a pointer to the event control block associated with the desired
N*                            semaphore.
N*
N* Returns    : OS_ERR_NONE         The call was successful and the semaphore was signaled.
N*              OS_ERR_SEM_OVF      If the semaphore count exceeded its limit.  In other words, you have
N*                                  signalled the semaphore more often than you waited on it with either
N*                                  OSSemAccept() or OSSemPend().
N*              OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a semaphore
N*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
N*********************************************************************************************************
N*/
N
NINT8U  OSSemPost (OS_EVENT *pevent)
N{
N#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
X#if 3u == 3u                           
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
S        return (OS_ERR_PEVENT_NULL);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
X    if (pevent->OSEventType != 3u) {    
N        return (OS_ERR_EVENT_TYPE);
X        return (1u);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
N                                                      /* Ready HPT waiting on event                    */
N        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
X        (void)OS_EventTaskRdy(pevent, (void *)0, 0x01u, 0u);
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        OS_Sched();                                   /* Find HPT ready to run                         */
N        return (OS_ERR_NONE);
X        return (0u);
N    }
N    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
N        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_NONE);
X        return (0u);
N    }
N    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
X    {OS_CPU_SR_Restore(cpu_sr);};                                
N    return (OS_ERR_SEM_OVF);
X    return (51u);
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          QUERY A SEMAPHORE
N*
N* Description: This function obtains information about a semaphore
N*
N* Arguments  : pevent        is a pointer to the event control block associated with the desired
N*                            semaphore
N*
N*              p_sem_data    is a pointer to a structure that will contain information about the
N*                            semaphore.
N*
N* Returns    : OS_ERR_NONE         The call was successful and the message was sent
N*              OS_ERR_EVENT_TYPE   If you are attempting to obtain data from a non semaphore.
N*              OS_ERR_PEVENT_NULL  If 'pevent'     is a NULL pointer.
N*              OS_ERR_PDATA_NULL   If 'p_sem_data' is a NULL pointer
N*********************************************************************************************************
N*/
N
N#if OS_SEM_QUERY_EN > 0u
X#if 1u > 0u
NINT8U  OSSemQuery (OS_EVENT     *pevent,
N                   OS_SEM_DATA  *p_sem_data)
N{
N    INT8U       i;
N    OS_PRIO    *psrc;
N    OS_PRIO    *pdest;
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR   cpu_sr = 0u;
N#endif
N
N
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
S        return (OS_ERR_PEVENT_NULL);
S    }
S    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
S        return (OS_ERR_PDATA_NULL);
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
X    if (pevent->OSEventType != 3u) {         
N        return (OS_ERR_EVENT_TYPE);
X        return (1u);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
N    psrc                   = &pevent->OSEventTbl[0];
N    pdest                  = &p_sem_data->OSEventTbl[0];
N    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
X    for (i = 0u; i < ((10u) / 8u + 1u); i++) {
N        *pdest++ = *psrc++;
N    }
N    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (OS_ERR_NONE);
X    return (0u);
N}
N#endif                                                     /* OS_SEM_QUERY_EN                          */
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              SET SEMAPHORE
N*
N* Description: This function sets the semaphore count to the value specified as an argument.  Typically,
N*              this value would be 0.
N*
N*              You would typically use this function when a semaphore is used as a signaling mechanism
N*              and, you want to reset the count value.
N*
N* Arguments  : pevent     is a pointer to the event control block
N*
N*              cnt        is the new value for the semaphore count.  You would pass 0 to reset the
N*                         semaphore count.
N*
N*              perr       is a pointer to an error code returned by the function as follows:
N*
N*                            OS_ERR_NONE          The call was successful and the semaphore value was set.
N*                            OS_ERR_EVENT_TYPE    If you didn't pass a pointer to a semaphore.
N*                            OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer.
N*                            OS_ERR_TASK_WAITING  If tasks are waiting on the semaphore.
N*********************************************************************************************************
N*/
N
N#if OS_SEM_SET_EN > 0u
X#if 1u > 0u
Nvoid  OSSemSet (OS_EVENT  *pevent,
N                INT16U     cnt,
N                INT8U     *perr)
N{
N#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
X#if 3u == 3u                           
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return;
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
S        *perr = OS_ERR_PEVENT_NULL;
S        return;
S    }
N#endif
N    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
X    if (pevent->OSEventType != 3u) {    
N        *perr = OS_ERR_EVENT_TYPE;
X        *perr = 1u;
N        return;
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    *perr = OS_ERR_NONE;
X    *perr = 0u;
N    if (pevent->OSEventCnt > 0u) {                    /* See if semaphore already has a count          */
N        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
N    } else {                                          /* No                                            */
N        if (pevent->OSEventGrp == 0u) {               /*      See if task(s) waiting?                  */
N            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
N        } else {
N            *perr              = OS_ERR_TASK_WAITING;
X            *perr              = 73u;
N        }
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N}
N#endif
N
N#endif                                                /* OS_SEM_EN                                     */
N	 	   	  			 		 	 	  		  	  			 			  		 	  				 	 		  	 	  	 		 		   		  	  			 				 		 		  	 	 	     	 					 	   	   	 	  	 		  	  			 	 	  		 		   		   	 			 
L 35 "..\..\uCOS-II\Source\ucos_ii.c" 2
N#include <os_task.c>
L 1 "..\..\uCOS-II\Source\os_task.c" 1
N/*
N*********************************************************************************************************
N*                                                uC/OS-II
N*                                          The Real-Time Kernel
N*                                            TASK MANAGEMENT
N*
N*                              (c) Copyright 1992-2010, Micrium, Weston, FL
N*                                           All Rights Reserved
N*
N* File    : OS_TASK.C
N* By      : Jean J. Labrosse
N* Version : V2.92
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
N* its use in your product. We provide ALL the source code for your convenience and to help you experience
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
N* licensing fee.
N*********************************************************************************************************
N*/
N
N#ifndef  OS_MASTER_FILE
S#include <ucos_ii.h>
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        CHANGE PRIORITY OF A TASK
N*
N* Description: This function allows you to change the priority of a task dynamically.  Note that the new
N*              priority MUST be available.
N*
N* Arguments  : oldp     is the old priority
N*
N*              newp     is the new priority
N*
N* Returns    : OS_ERR_NONE            is the call was successful
N*              OS_ERR_PRIO_INVALID    if the priority you specify is higher that the maximum allowed
N*                                     (i.e. >= OS_LOWEST_PRIO)
N*              OS_ERR_PRIO_EXIST      if the new priority already exist.
N*              OS_ERR_PRIO            there is no task with the specified OLD priority (i.e. the OLD task does
N*                                     not exist.
N*              OS_ERR_TASK_NOT_EXIST  if the task is assigned to a Mutex PIP.
N*********************************************************************************************************
N*/
N
N#if OS_TASK_CHANGE_PRIO_EN > 0u
X#if 1u > 0u
NINT8U  OSTaskChangePrio (INT8U  oldprio,
N                         INT8U  newprio)
N{
N#if (OS_EVENT_EN)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u)))
N    OS_EVENT  *pevent;
N#if (OS_EVENT_MULTI_EN > 0u)
X#if (1u > 0u)
N    OS_EVENT **pevents;
N#endif
N#endif
N    OS_TCB    *ptcb;
N    INT8U      y_new;
N    INT8U      x_new;
N    INT8U      y_old;
N    OS_PRIO    bity_new;
N    OS_PRIO    bitx_new;
N    OS_PRIO    bity_old;
N    OS_PRIO    bitx_old;
N#if OS_CRITICAL_METHOD == 3u
X#if 3u == 3u
N    OS_CPU_SR  cpu_sr = 0u;                                 /* Storage for CPU status register         */
N#endif
N
N
N/*$PAGE*/
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (oldprio >= OS_LOWEST_PRIO) {
S        if (oldprio != OS_PRIO_SELF) {
S            return (OS_ERR_PRIO_INVALID);
S        }
S    }
S    if (newprio >= OS_LOWEST_PRIO) {
S        return (OS_ERR_PRIO_INVALID);
S    }
N#endif
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_PRIO_EXIST);
X        return (40u);
N    }
N    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
X    if (oldprio == 0xFFu) {                           
N        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
N    }
N    ptcb = OSTCBPrioTbl[oldprio];
N    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
N        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
X        {OS_CPU_SR_Restore(cpu_sr);};                                  
N        return (OS_ERR_PRIO);
X        return (41u);
N    }
N    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
X    if (ptcb == ((OS_TCB *)1)) {                           
N        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
X        {OS_CPU_SR_Restore(cpu_sr);};                                  
N        return (OS_ERR_TASK_NOT_EXIST);
X        return (67u);
N    }
N#if OS_LOWEST_PRIO <= 63u
X#if 10u <= 63u
N    y_new                 = (INT8U)(newprio >> 3u);         /* Yes, compute new TCB fields             */
N    x_new                 = (INT8U)(newprio & 0x07u);
N#else
S    y_new                 = (INT8U)((INT8U)(newprio >> 4u) & 0x0Fu);
S    x_new                 = (INT8U)(newprio & 0x0Fu);
N#endif
N    bity_new              = (OS_PRIO)(1uL << y_new);
N    bitx_new              = (OS_PRIO)(1uL << x_new);
N
N    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
N    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
N    y_old                 =  ptcb->OSTCBY;
N    bity_old              =  ptcb->OSTCBBitY;
N    bitx_old              =  ptcb->OSTCBBitX;
N    if ((OSRdyTbl[y_old] &   bitx_old) != 0u) {             /* If task is ready make it not            */
N         OSRdyTbl[y_old] &= (OS_PRIO)~bitx_old;
N         if (OSRdyTbl[y_old] == 0u) {
N             OSRdyGrp &= (OS_PRIO)~bity_old;
N         }
N         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
N         OSRdyTbl[y_new] |= bitx_new;
N    }
N
N#if (OS_EVENT_EN)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u)))
N    pevent = ptcb->OSTCBEventPtr;
N    if (pevent != (OS_EVENT *)0) {
N        pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;    /* Remove old task prio from wait list     */
N        if (pevent->OSEventTbl[y_old] == 0u) {
N            pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
N        }
N        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
N        pevent->OSEventTbl[y_new] |= bitx_new;
N    }
N#if (OS_EVENT_MULTI_EN > 0u)
X#if (1u > 0u)
N    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
N        pevents =  ptcb->OSTCBEventMultiPtr;
N        pevent  = *pevents;
N        while (pevent != (OS_EVENT *)0) {
N            pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;   /* Remove old task prio from wait lists */
N            if (pevent->OSEventTbl[y_old] == 0u) {
N                pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
N            }
N            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
N            pevent->OSEventTbl[y_new] |= bitx_new;
N            pevents++;
N            pevent                     = *pevents;
N        }
N    }
N#endif
N#endif
N
N    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
N    ptcb->OSTCBY    = y_new;
N    ptcb->OSTCBX    = x_new;
N    ptcb->OSTCBBitY = bity_new;
N    ptcb->OSTCBBitX = bitx_new;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    if (OSRunning == OS_TRUE) {
X    if (OSRunning == 1u) {
N        OS_Sched();                                         /* Find new highest priority task          */
N    }
N    return (OS_ERR_NONE);
X    return (0u);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            CREATE A TASK
N*
N* Description: This function is used to have uC/OS-II manage the execution of a task.  Tasks can either
N*              be created prior to the start of multitasking or by a running task.  A task cannot be
N*              created by an ISR.
N*
N* Arguments  : task     is a pointer to the task's code
N*
N*              p_arg    is a pointer to an optional data area which can be used to pass parameters to
N*                       the task when the task first executes.  Where the task is concerned it thinks
N*                       it was invoked and passed the argument 'p_arg' as follows:
N*
N*                           void Task (void *p_arg)
N*                           {
N*                               for (;;) {
N*                                   Task code;
N*                               }
N*                           }
N*
N*              ptos     is a pointer to the task's top of stack.  If the configuration constant
N*                       OS_STK_GROWTH is set to 1, the stack is assumed to grow downward (i.e. from high
N*                       memory to low memory).  'pstk' will thus point to the highest (valid) memory
N*                       location of the stack.  If OS_STK_GROWTH is set to 0, 'pstk' will point to the
N*                       lowest memory location of the stack and the stack will grow with increasing
N*                       memory locations.
N*
N*              prio     is the task's priority.  A unique priority MUST be assigned to each task and the
N*                       lower the number, the higher the priority.
N*
N* Returns    : OS_ERR_NONE                      if the function was successful.
N*              OS_ERR_PRIO_EXIST                if the task priority already exist
N*                                               (each task MUST have a unique priority).
N*              OS_ERR_PRIO_INVALID              if the priority you specify is higher that the maximum
N*                                               allowed (i.e. >= OS_LOWEST_PRIO)
N*              OS_ERR_TASK_CREATE_ISR           if you tried to create a task from an ISR.
N*              OS_ERR_ILLEGAL_CREATE_RUN_TIME   if you tried to create a task after safety critical
N*                                               operation started.
N*********************************************************************************************************
N*/
N
N#if OS_TASK_CREATE_EN > 0u
X#if 1u > 0u
NINT8U  OSTaskCreate (void   (*task)(void *p_arg),
N                     void    *p_arg,
N                     OS_STK  *ptos,
N                     INT8U    prio)
N{
N    OS_STK     *psp;
N    INT8U       err;
N#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
X#if 3u == 3u                  
N    OS_CPU_SR   cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
S    if (OSSafetyCriticalStartFlag == OS_TRUE) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
S        return (OS_ERR_PRIO_INVALID);
S    }
N#endif
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_CREATE_ISR);
X        return (60u);
N    }
N    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
N        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
X        OSTCBPrioTbl[prio] = ((OS_TCB *)1); 
N                                             /* ... the same thing until task is created.              */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
N        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
N        if (err == OS_ERR_NONE) {
X        if (err == 0u) {
N            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
X            if (OSRunning == 1u) {       
N                OS_Sched();
N            }
N        } else {
N            OS_ENTER_CRITICAL();
X            {cpu_sr = OS_CPU_SR_Save();};
N            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
N            OS_EXIT_CRITICAL();
X            {OS_CPU_SR_Restore(cpu_sr);};
N        }
N        return (err);
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (OS_ERR_PRIO_EXIST);
X    return (40u);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                     CREATE A TASK (Extended Version)
N*
N* Description: This function is used to have uC/OS-II manage the execution of a task.  Tasks can either
N*              be created prior to the start of multitasking or by a running task.  A task cannot be
N*              created by an ISR.  This function is similar to OSTaskCreate() except that it allows
N*              additional information about a task to be specified.
N*
N* Arguments  : task      is a pointer to the task's code
N*
N*              p_arg     is a pointer to an optional data area which can be used to pass parameters to
N*                        the task when the task first executes.  Where the task is concerned it thinks
N*                        it was invoked and passed the argument 'p_arg' as follows:
N*
N*                            void Task (void *p_arg)
N*                            {
N*                                for (;;) {
N*                                    Task code;
N*                                }
N*                            }
N*
N*              ptos      is a pointer to the task's top of stack.  If the configuration constant
N*                        OS_STK_GROWTH is set to 1, the stack is assumed to grow downward (i.e. from high
N*                        memory to low memory).  'ptos' will thus point to the highest (valid) memory
N*                        location of the stack.  If OS_STK_GROWTH is set to 0, 'ptos' will point to the
N*                        lowest memory location of the stack and the stack will grow with increasing
N*                        memory locations.  'ptos' MUST point to a valid 'free' data item.
N*
N*              prio      is the task's priority.  A unique priority MUST be assigned to each task and the
N*                        lower the number, the higher the priority.
N*
N*              id        is the task's ID (0..65535)
N*
N*              pbos      is a pointer to the task's bottom of stack.  If the configuration constant
N*                        OS_STK_GROWTH is set to 1, the stack is assumed to grow downward (i.e. from high
N*                        memory to low memory).  'pbos' will thus point to the LOWEST (valid) memory
N*                        location of the stack.  If OS_STK_GROWTH is set to 0, 'pbos' will point to the
N*                        HIGHEST memory location of the stack and the stack will grow with increasing
N*                        memory locations.  'pbos' MUST point to a valid 'free' data item.
N*
N*              stk_size  is the size of the stack in number of elements.  If OS_STK is set to INT8U,
N*                        'stk_size' corresponds to the number of bytes available.  If OS_STK is set to
N*                        INT16U, 'stk_size' contains the number of 16-bit entries available.  Finally, if
N*                        OS_STK is set to INT32U, 'stk_size' contains the number of 32-bit entries
N*                        available on the stack.
N*
N*              pext      is a pointer to a user supplied memory location which is used as a TCB extension.
N*                        For example, this user memory can hold the contents of floating-point registers
N*                        during a context switch, the time each task takes to execute, the number of times
N*                        the task has been switched-in, etc.
N*
N*              opt       contains additional information (or options) about the behavior of the task.  The
N*                        LOWER 8-bits are reserved by uC/OS-II while the upper 8 bits can be application
N*                        specific.  See OS_TASK_OPT_??? in uCOS-II.H.  Current choices are:
N*
N*                        OS_TASK_OPT_STK_CHK      Stack checking to be allowed for the task
N*                        OS_TASK_OPT_STK_CLR      Clear the stack when the task is created
N*                        OS_TASK_OPT_SAVE_FP      If the CPU has floating-point registers, save them
N*                                                 during a context switch.
N*
N* Returns    : OS_ERR_NONE                      if the function was successful.
N*              OS_ERR_PRIO_EXIST                if the task priority already exist
N*                                               (each task MUST have a unique priority).
N*              OS_ERR_PRIO_INVALID              if the priority you specify is higher that the maximum
N*                                               allowed (i.e. > OS_LOWEST_PRIO)
N*              OS_ERR_TASK_CREATE_ISR           if you tried to create a task from an ISR.
N*              OS_ERR_ILLEGAL_CREATE_RUN_TIME   if you tried to create a task after safety critical
N*                                               operation started.
N*********************************************************************************************************
N*/
N/*$PAGE*/
N#if OS_TASK_CREATE_EXT_EN > 0u
X#if 1u > 0u
NINT8U  OSTaskCreateExt (void   (*task)(void *p_arg),
N                        void    *p_arg,
N                        OS_STK  *ptos,
N                        INT8U    prio,
N                        INT16U   id,
N                        OS_STK  *pbos,
N                        INT32U   stk_size,
N                        void    *pext,
N                        INT16U   opt)
N{
N    OS_STK     *psp;
N    INT8U       err;
N#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
X#if 3u == 3u                  
N    OS_CPU_SR   cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
S    if (OSSafetyCriticalStartFlag == OS_TRUE) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
S        return (OS_ERR_PRIO_INVALID);
S    }
N#endif
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_CREATE_ISR);
X        return (60u);
N    }
N    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
N        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
X        OSTCBPrioTbl[prio] = ((OS_TCB *)1); 
N                                             /* ... the same thing until task is created.              */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N
N#if (OS_TASK_STAT_STK_CHK_EN > 0u)
X#if (1u > 0u)
N        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
N#endif
N
N        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
N        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
N        if (err == OS_ERR_NONE) {
X        if (err == 0u) {
N            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
X            if (OSRunning == 1u) {                         
N                OS_Sched();
N            }
N        } else {
N            OS_ENTER_CRITICAL();
X            {cpu_sr = OS_CPU_SR_Save();};
N            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
N            OS_EXIT_CRITICAL();
X            {OS_CPU_SR_Restore(cpu_sr);};
N        }
N        return (err);
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (OS_ERR_PRIO_EXIST);
X    return (40u);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            DELETE A TASK
N*
N* Description: This function allows you to delete a task.  The calling task can delete itself by
N*              its own priority number.  The deleted task is returned to the dormant state and can be
N*              re-activated by creating the deleted task again.
N*
N* Arguments  : prio    is the priority of the task to delete.  Note that you can explicitely delete
N*                      the current task without knowing its priority level by setting 'prio' to
N*                      OS_PRIO_SELF.
N*
N* Returns    : OS_ERR_NONE             if the call is successful
N*              OS_ERR_TASK_DEL_IDLE    if you attempted to delete uC/OS-II's idle task
N*              OS_ERR_PRIO_INVALID     if the priority you specify is higher that the maximum allowed
N*                                      (i.e. >= OS_LOWEST_PRIO) or, you have not specified OS_PRIO_SELF.
N*              OS_ERR_TASK_DEL         if the task is assigned to a Mutex PIP.
N*              OS_ERR_TASK_NOT_EXIST   if the task you want to delete does not exist.
N*              OS_ERR_TASK_DEL_ISR     if you tried to delete a task from an ISR
N*
N* Notes      : 1) To reduce interrupt latency, OSTaskDel() 'disables' the task:
N*                    a) by making it not ready
N*                    b) by removing it from any wait lists
N*                    c) by preventing OSTimeTick() from making the task ready to run.
N*                 The task can then be 'unlinked' from the miscellaneous structures in uC/OS-II.
N*              2) The function OS_Dummy() is called after OS_EXIT_CRITICAL() because, on most processors,
N*                 the next instruction following the enable interrupt instruction is ignored.
N*              3) An ISR cannot delete a task.
N*              4) The lock nesting counter is incremented because, for a brief instant, if the current
N*                 task is being deleted, the current task would not be able to be rescheduled because it
N*                 is removed from the ready list.  Incrementing the nesting counter prevents another task
N*                 from being schedule.  This means that an ISR would return to the current task which is
N*                 being deleted.  The rest of the deletion would thus be able to be completed.
N*********************************************************************************************************
N*/
N
N#if OS_TASK_DEL_EN > 0u
X#if 1u > 0u
NINT8U  OSTaskDel (INT8U prio)
N{
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
X#if (1u > 0u) && (5u > 0u)
N    OS_FLAG_NODE *pnode;
N#endif
N    OS_TCB       *ptcb;
N#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
X#if 3u == 3u                             
N    OS_CPU_SR     cpu_sr = 0u;
N#endif
N
N
N
N    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
N        return (OS_ERR_TASK_DEL_ISR);
X        return (64u);
N    }
N    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
X    if (prio == (10u)) {                     
N        return (OS_ERR_TASK_DEL_IDLE);
X        return (62u);
N    }
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
S        if (prio != OS_PRIO_SELF) {
S            return (OS_ERR_PRIO_INVALID);
S        }
S    }
N#endif
N
N/*$PAGE*/
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
X    if (prio == 0xFFu) {                          
N        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
N    }
N    ptcb = OSTCBPrioTbl[prio];
N    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_NOT_EXIST);
X        return (67u);
N    }
N    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
X    if (ptcb == ((OS_TCB *)1)) {                       
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_DEL);
X        return (61u);
N    }
N
N    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
N    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
N        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
N    }
N
N#if (OS_EVENT_EN)
X#if ((((0u > 0u) && (3u > 0u)) || (1u > 0u) || (1u > 0u) || (1u > 0u)))
N    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
N        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
N    }
N#if (OS_EVENT_MULTI_EN > 0u)
X#if (1u > 0u)
N    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
N        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
N    }
N#endif
N#endif
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
X#if (1u > 0u) && (5u > 0u)
N    pnode = ptcb->OSTCBFlagNode;
N    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
N        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
N    }
N#endif
N
N    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
N    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
X    ptcb->OSTCBStat     = 0x00u;                   
N    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
X    ptcb->OSTCBStatPend = 0u;
N    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
N        OSLockNesting++;
N    }
N    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
X    {OS_CPU_SR_Restore(cpu_sr);};                                  
N    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
N    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
X    {cpu_sr = OS_CPU_SR_Save();};                                 
N    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
N        OSLockNesting--;
N    }
N    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
N    OSTaskCtr--;                                        /* One less task being managed                 */
N    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
N    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
N        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
N        OSTCBList                  = ptcb->OSTCBNext;
N    } else {
N        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
N        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
N    }
N    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
N    OSTCBFreeList       = ptcb;
N#if OS_TASK_NAME_EN > 0u
X#if 1u > 0u
N    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
N#endif
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    if (OSRunning == OS_TRUE) {
X    if (OSRunning == 1u) {
N        OS_Sched();                                     /* Find new highest priority task              */
N    }
N    return (OS_ERR_NONE);
X    return (0u);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                    REQUEST THAT A TASK DELETE ITSELF
N*
N* Description: This function is used to:
N*                   a) notify a task to delete itself.
N*                   b) to see if a task requested that the current task delete itself.
N*              This function is a little tricky to understand.  Basically, you have a task that needs
N*              to be deleted however, this task has resources that it has allocated (memory buffers,
N*              semaphores, mailboxes, queues etc.).  The task cannot be deleted otherwise these
N*              resources would not be freed.  The requesting task calls OSTaskDelReq() to indicate that
N*              the task needs to be deleted.  Deleting of the task is however, deferred to the task to
N*              be deleted.  For example, suppose that task #10 needs to be deleted.  The requesting task
N*              example, task #5, would call OSTaskDelReq(10).  When task #10 gets to execute, it calls
N*              this function by specifying OS_PRIO_SELF and monitors the returned value.  If the return
N*              value is OS_ERR_TASK_DEL_REQ, another task requested a task delete.  Task #10 would look like
N*              this:
N*
N*                   void Task(void *p_arg)
N*                   {
N*                       .
N*                       .
N*                       while (1) {
N*                           OSTimeDly(1);
N*                           if (OSTaskDelReq(OS_PRIO_SELF) == OS_ERR_TASK_DEL_REQ) {
N*                               Release any owned resources;
N*                               De-allocate any dynamic memory;
N*                               OSTaskDel(OS_PRIO_SELF);
N*                           }
N*                       }
N*                   }
N*
N* Arguments  : prio    is the priority of the task to request the delete from
N*
N* Returns    : OS_ERR_NONE            if the task exist and the request has been registered
N*              OS_ERR_TASK_NOT_EXIST  if the task has been deleted.  This allows the caller to know whether
N*                                     the request has been executed.
N*              OS_ERR_TASK_DEL        if the task is assigned to a Mutex.
N*              OS_ERR_TASK_DEL_IDLE   if you requested to delete uC/OS-II's idle task
N*              OS_ERR_PRIO_INVALID    if the priority you specify is higher that the maximum allowed
N*                                     (i.e. >= OS_LOWEST_PRIO) or, you have not specified OS_PRIO_SELF.
N*              OS_ERR_TASK_DEL_REQ    if a task (possibly another task) requested that the running task be
N*                                     deleted.
N*********************************************************************************************************
N*/
N/*$PAGE*/
N#if OS_TASK_DEL_EN > 0u
X#if 1u > 0u
NINT8U  OSTaskDelReq (INT8U prio)
N{
N    INT8U      stat;
N    OS_TCB    *ptcb;
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
X    if (prio == (10u)) {                             
N        return (OS_ERR_TASK_DEL_IDLE);
X        return (62u);
N    }
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
S        if (prio != OS_PRIO_SELF) {
S            return (OS_ERR_PRIO_INVALID);
S        }
S    }
N#endif
N    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
X    if (prio == 0xFFu) {                                  
N        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
X        {cpu_sr = OS_CPU_SR_Save();};                                     
N        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (stat);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    ptcb = OSTCBPrioTbl[prio];
N    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
X        return (67u);                          
N    }
N    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
X    if (ptcb == ((OS_TCB *)1)) {                               
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_DEL);
X        return (61u);
N    }
N    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
X    ptcb->OSTCBDelReq = 63u;                     
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (OS_ERR_NONE);
X    return (0u);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        GET THE NAME OF A TASK
N*
N* Description: This function is called to obtain the name of a task.
N*
N* Arguments  : prio      is the priority of the task that you want to obtain the name from.
N*
N*              pname     is a pointer to a pointer to an ASCII string that will receive the name of the task.
N*
N*              perr      is a pointer to an error code that can contain one of the following values:
N*
N*                        OS_ERR_NONE                if the requested task is resumed
N*                        OS_ERR_TASK_NOT_EXIST      if the task has not been created or is assigned to a Mutex
N*                        OS_ERR_PRIO_INVALID        if you specified an invalid priority:
N*                                                   A higher value than the idle task or not OS_PRIO_SELF.
N*                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
N*                        OS_ERR_NAME_GET_ISR        You called this function from an ISR
N*
N*
N* Returns    : The length of the string or 0 if the task does not exist.
N*********************************************************************************************************
N*/
N
N#if OS_TASK_NAME_EN > 0u
X#if 1u > 0u
NINT8U  OSTaskNameGet (INT8U    prio,
N                      INT8U  **pname,
N                      INT8U   *perr)
N{
N    OS_TCB    *ptcb;
N    INT8U      len;
N#if OS_CRITICAL_METHOD == 3u                             /* Allocate storage for CPU status register   */
X#if 3u == 3u                              
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (0u);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
S        if (prio != OS_PRIO_SELF) {
S            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
S            return (0u);
S        }
S    }
S    if (pname == (INT8U **)0) {                          /* Is 'pname' a NULL pointer?                 */
S        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
S        return (0u);
S    }
N#endif
N    if (OSIntNesting > 0u) {                              /* See if trying to call from an ISR          */
N        *perr = OS_ERR_NAME_GET_ISR;
X        *perr = 17u;
N        return (0u);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
X    if (prio == 0xFFu) {                           
N        prio = OSTCBCur->OSTCBPrio;
N    }
N    ptcb = OSTCBPrioTbl[prio];
N    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
N        OS_EXIT_CRITICAL();                              /* No                                         */
X        {OS_CPU_SR_Restore(cpu_sr);};                               
N        *perr = OS_ERR_TASK_NOT_EXIST;
X        *perr = 67u;
N        return (0u);
N    }
N    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
X    if (ptcb == ((OS_TCB *)1)) {                        
N        OS_EXIT_CRITICAL();                              /* Yes                                        */
X        {OS_CPU_SR_Restore(cpu_sr);};                               
N        *perr = OS_ERR_TASK_NOT_EXIST;
X        *perr = 67u;
N        return (0u);
N    }
N    *pname = ptcb->OSTCBTaskName;
N    len    = OS_StrLen(*pname);
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr  = OS_ERR_NONE;
X    *perr  = 0u;
N    return (len);
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        ASSIGN A NAME TO A TASK
N*
N* Description: This function is used to set the name of a task.
N*
N* Arguments  : prio      is the priority of the task that you want the assign a name to.
N*
N*              pname     is a pointer to an ASCII string that contains the name of the task.
N*
N*              perr       is a pointer to an error code that can contain one of the following values:
N*
N*                        OS_ERR_NONE                if the requested task is resumed
N*                        OS_ERR_TASK_NOT_EXIST      if the task has not been created or is assigned to a Mutex
N*                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
N*                        OS_ERR_PRIO_INVALID        if you specified an invalid priority:
N*                                                   A higher value than the idle task or not OS_PRIO_SELF.
N*                        OS_ERR_NAME_SET_ISR        if you called this function from an ISR
N*
N* Returns    : None
N*********************************************************************************************************
N*/
N#if OS_TASK_NAME_EN > 0u
X#if 1u > 0u
Nvoid  OSTaskNameSet (INT8U   prio,
N                     INT8U  *pname,
N                     INT8U  *perr)
N{
N    OS_TCB    *ptcb;
N#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
X#if 3u == 3u                          
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return;
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
S        if (prio != OS_PRIO_SELF) {
S            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
S            return;
S        }
S    }
S    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
S        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
S        return;
S    }
N#endif
N    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
N        *perr = OS_ERR_NAME_SET_ISR;
X        *perr = 18u;
N        return;
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
X    if (prio == 0xFFu) {                       
N        prio = OSTCBCur->OSTCBPrio;
N    }
N    ptcb = OSTCBPrioTbl[prio];
N    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
N        OS_EXIT_CRITICAL();                          /* No                                             */
X        {OS_CPU_SR_Restore(cpu_sr);};                           
N        *perr = OS_ERR_TASK_NOT_EXIST;
X        *perr = 67u;
N        return;
N    }
N    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
X    if (ptcb == ((OS_TCB *)1)) {                    
N        OS_EXIT_CRITICAL();                          /* Yes                                            */
X        {OS_CPU_SR_Restore(cpu_sr);};                           
N        *perr = OS_ERR_TASK_NOT_EXIST;
X        *perr = 67u;
N        return;
N    }
N    ptcb->OSTCBTaskName = pname;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr               = OS_ERR_NONE;
X    *perr               = 0u;
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        RESUME A SUSPENDED TASK
N*
N* Description: This function is called to resume a previously suspended task.  This is the only call that
N*              will remove an explicit task suspension.
N*
N* Arguments  : prio     is the priority of the task to resume.
N*
N* Returns    : OS_ERR_NONE                if the requested task is resumed
N*              OS_ERR_PRIO_INVALID        if the priority you specify is higher that the maximum allowed
N*                                         (i.e. >= OS_LOWEST_PRIO)
N*              OS_ERR_TASK_RESUME_PRIO    if the task to resume does not exist
N*              OS_ERR_TASK_NOT_EXIST      if the task is assigned to a Mutex PIP
N*              OS_ERR_TASK_NOT_SUSPENDED  if the task to resume has not been suspended
N*********************************************************************************************************
N*/
N
N#if OS_TASK_SUSPEND_EN > 0u
X#if 1u > 0u
NINT8U  OSTaskResume (INT8U prio)
N{
N    OS_TCB    *ptcb;
N#if OS_CRITICAL_METHOD == 3u                                  /* Storage for CPU status register       */
X#if 3u == 3u                                   
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
S        return (OS_ERR_PRIO_INVALID);
S    }
N#endif
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    ptcb = OSTCBPrioTbl[prio];
N    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_RESUME_PRIO);
X        return (70u);
N    }
N    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
X    if (ptcb == ((OS_TCB *)1)) {                             
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_NOT_EXIST);
X        return (67u);
N    }
N    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
X    if ((ptcb->OSTCBStat & 0x08u) != 0x00u) {  
N        ptcb->OSTCBStat &= (INT8U)~(INT8U)OS_STAT_SUSPEND;    /* Remove suspension                     */
X        ptcb->OSTCBStat &= (INT8U)~(INT8U)0x08u;     
N        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
X        if (ptcb->OSTCBStat == 0x00u) {                  
N            if (ptcb->OSTCBDly == 0u) {
N                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
N                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
N                OS_EXIT_CRITICAL();
X                {OS_CPU_SR_Restore(cpu_sr);};
N                if (OSRunning == OS_TRUE) {
X                if (OSRunning == 1u) {
N                    OS_Sched();                               /* Find new highest priority task        */
N                }
N            } else {
N                OS_EXIT_CRITICAL();
X                {OS_CPU_SR_Restore(cpu_sr);};
N            }
N        } else {                                              /* Must be pending on event              */
N            OS_EXIT_CRITICAL();
X            {OS_CPU_SR_Restore(cpu_sr);};
N        }
N        return (OS_ERR_NONE);
X        return (0u);
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (OS_ERR_TASK_NOT_SUSPENDED);
X    return (68u);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             STACK CHECKING
N*
N* Description: This function is called to check the amount of free memory left on the specified task's
N*              stack.
N*
N* Arguments  : prio          is the task priority
N*
N*              p_stk_data    is a pointer to a data structure of type OS_STK_DATA.
N*
N* Returns    : OS_ERR_NONE            upon success
N*              OS_ERR_PRIO_INVALID    if the priority you specify is higher that the maximum allowed
N*                                     (i.e. > OS_LOWEST_PRIO) or, you have not specified OS_PRIO_SELF.
N*              OS_ERR_TASK_NOT_EXIST  if the desired task has not been created or is assigned to a Mutex PIP
N*              OS_ERR_TASK_OPT        if you did NOT specified OS_TASK_OPT_STK_CHK when the task was created
N*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
N*********************************************************************************************************
N*/
N#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
X#if (1u > 0u) && (1u > 0u)
NINT8U  OSTaskStkChk (INT8U         prio,
N                     OS_STK_DATA  *p_stk_data)
N{
N    OS_TCB    *ptcb;
N    OS_STK    *pchk;
N    INT32U     nfree;
N    INT32U     size;
N#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
X#if 3u == 3u                            
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
S        if (prio != OS_PRIO_SELF) {
S            return (OS_ERR_PRIO_INVALID);
S        }
S    }
S    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
S        return (OS_ERR_PDATA_NULL);
S    }
N#endif
N    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
N    p_stk_data->OSUsed = 0u;
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
X    if (prio == 0xFFu) {                         
N        prio = OSTCBCur->OSTCBPrio;
N    }
N    ptcb = OSTCBPrioTbl[prio];
N    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_NOT_EXIST);
X        return (67u);
N    }
N    if (ptcb == OS_TCB_RESERVED) {
X    if (ptcb == ((OS_TCB *)1)) {
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_NOT_EXIST);
X        return (67u);
N    }
N    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
X    if ((ptcb->OSTCBOpt & 0x0001u) == 0u) {  
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_OPT);
X        return (69u);
N    }
N    nfree = 0u;
N    size  = ptcb->OSTCBStkSize;
N    pchk  = ptcb->OSTCBStkBottom;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N#if OS_STK_GROWTH == 1u
X#if 1u == 1u
N    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
N        nfree++;
N    }
N#else
S    while (*pchk-- == (OS_STK)0) {
S        nfree++;
S    }
N#endif
N    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
N    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
N    return (OS_ERR_NONE);
X    return (0u);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            SUSPEND A TASK
N*
N* Description: This function is called to suspend a task.  The task can be the calling task if the
N*              priority passed to OSTaskSuspend() is the priority of the calling task or OS_PRIO_SELF.
N*
N* Arguments  : prio     is the priority of the task to suspend.  If you specify OS_PRIO_SELF, the
N*                       calling task will suspend itself and rescheduling will occur.
N*
N* Returns    : OS_ERR_NONE               if the requested task is suspended
N*              OS_ERR_TASK_SUSPEND_IDLE  if you attempted to suspend the idle task which is not allowed.
N*              OS_ERR_PRIO_INVALID       if the priority you specify is higher that the maximum allowed
N*                                        (i.e. >= OS_LOWEST_PRIO) or, you have not specified OS_PRIO_SELF.
N*              OS_ERR_TASK_SUSPEND_PRIO  if the task to suspend does not exist
N*              OS_ERR_TASK_NOT_EXITS     if the task is assigned to a Mutex PIP
N*
N* Note       : You should use this function with great care.  If you suspend a task that is waiting for
N*              an event (i.e. a message, a semaphore, a queue ...) you will prevent this task from
N*              running when the event arrives.
N*********************************************************************************************************
N*/
N
N#if OS_TASK_SUSPEND_EN > 0u
X#if 1u > 0u
NINT8U  OSTaskSuspend (INT8U prio)
N{
N    BOOLEAN    self;
N    OS_TCB    *ptcb;
N    INT8U      y;
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
S        return (OS_ERR_TASK_SUSPEND_IDLE);
S    }
S    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
S        if (prio != OS_PRIO_SELF) {
S            return (OS_ERR_PRIO_INVALID);
S        }
S    }
N#endif
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
X    if (prio == 0xFFu) {                                  
N        prio = OSTCBCur->OSTCBPrio;
N        self = OS_TRUE;
X        self = 1u;
N    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
N        self = OS_TRUE;
X        self = 1u;
N    } else {
N        self = OS_FALSE;                                        /* No suspending another task          */
X        self = 0u;                                         
N    }
N    ptcb = OSTCBPrioTbl[prio];
N    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_SUSPEND_PRIO);
X        return (72u);
N    }
N    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
X    if (ptcb == ((OS_TCB *)1)) {                               
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_NOT_EXIST);
X        return (67u);
N    }
N    y            = ptcb->OSTCBY;
N    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
N    if (OSRdyTbl[y] == 0u) {
N        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
N    }
N    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
X    ptcb->OSTCBStat |= 0x08u;                          
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
X    if (self == 1u) {                                       
N        OS_Sched();                                             /* Find new highest priority task      */
N    }
N    return (OS_ERR_NONE);
X    return (0u);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            QUERY A TASK
N*
N* Description: This function is called to obtain a copy of the desired task's TCB.
N*
N* Arguments  : prio         is the priority of the task to obtain information from.
N*
N*              p_task_data  is a pointer to where the desired task's OS_TCB will be stored.
N*
N* Returns    : OS_ERR_NONE            if the requested task is suspended
N*              OS_ERR_PRIO_INVALID    if the priority you specify is higher that the maximum allowed
N*                                     (i.e. > OS_LOWEST_PRIO) or, you have not specified OS_PRIO_SELF.
N*              OS_ERR_PRIO            if the desired task has not been created
N*              OS_ERR_TASK_NOT_EXIST  if the task is assigned to a Mutex PIP
N*              OS_ERR_PDATA_NULL      if 'p_task_data' is a NULL pointer
N*********************************************************************************************************
N*/
N
N#if OS_TASK_QUERY_EN > 0u
X#if 1u > 0u
NINT8U  OSTaskQuery (INT8U    prio,
N                    OS_TCB  *p_task_data)
N{
N    OS_TCB    *ptcb;
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
S        if (prio != OS_PRIO_SELF) {
S            return (OS_ERR_PRIO_INVALID);
S        }
S    }
S    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
S        return (OS_ERR_PDATA_NULL);
S    }
N#endif
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
X    if (prio == 0xFFu) {                   
N        prio = OSTCBCur->OSTCBPrio;
N    }
N    ptcb = OSTCBPrioTbl[prio];
N    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_PRIO);
X        return (41u);
N    }
N    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
X    if (ptcb == ((OS_TCB *)1)) {                
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_NOT_EXIST);
X        return (67u);
N    }
N                                                 /* Copy TCB into user storage area                    */
N    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (OS_ERR_NONE);
X    return (0u);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                 GET THE CURRENT VALUE OF A TASK REGISTER
N*
N* Description: This function is called to obtain the current value of a task register.  Task registers
N*              are application specific and can be used to store task specific values such as 'error
N*              numbers' (i.e. errno), statistics, etc.  Each task register can hold a 32-bit value.
N*
N* Arguments  : prio      is the priority of the task you want to get the task register from.  If you
N*                        specify OS_PRIO_SELF then the task register of the current task will be obtained.
N*
N*              id        is the 'id' of the desired task register.  Note that the 'id' must be less
N*                        than OS_TASK_REG_TBL_SIZE
N*
N*              perr      is a pointer to a variable that will hold an error code related to this call.
N*
N*                        OS_ERR_NONE            if the call was successful
N*                        OS_ERR_PRIO_INVALID    if you specified an invalid priority
N*                        OS_ERR_ID_INVALID      if the 'id' is not between 0 and OS_TASK_REG_TBL_SIZE-1
N*
N* Returns    : The current value of the task's register or 0 if an error is detected.
N*
N* Note(s)    : The maximum number of task variables is 254
N*********************************************************************************************************
N*/
N
N#if OS_TASK_REG_TBL_SIZE > 0u
X#if 1u > 0u
NINT32U  OSTaskRegGet (INT8U   prio,
N                      INT8U   id,
N                      INT8U  *perr)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N    INT32U     value;
N    OS_TCB    *ptcb;
N
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (0u);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (prio >= OS_LOWEST_PRIO) {
S        if (prio != OS_PRIO_SELF) {
S            *perr = OS_ERR_PRIO_INVALID;
S            return (0u);
S        }
S    }
S    if (id >= OS_TASK_REG_TBL_SIZE) {
S        *perr = OS_ERR_ID_INVALID;
S        return (0u);
S    }
N#endif
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (prio == OS_PRIO_SELF) {                  /* See if need to get register from current task      */
X    if (prio == 0xFFu) {                   
N        ptcb = OSTCBCur;
N    } else {
N        ptcb = OSTCBPrioTbl[prio];
N    }
N    value = ptcb->OSTCBRegTbl[id];
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr = OS_ERR_NONE;
X    *perr = 0u;
N    return (value);
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                 SET THE CURRENT VALUE OF A TASK VARIABLE
N*
N* Description: This function is called to change the current value of a task register.  Task registers
N*              are application specific and can be used to store task specific values such as 'error
N*              numbers' (i.e. errno), statistics, etc.  Each task register can hold a 32-bit value.
N*
N* Arguments  : prio      is the priority of the task you want to set the task register for.  If you
N*                        specify OS_PRIO_SELF then the task register of the current task will be obtained.
N*
N*              id        is the 'id' of the desired task register.  Note that the 'id' must be less
N*                        than OS_TASK_REG_TBL_SIZE
N*
N*              value     is the desired value for the task register.
N*
N*              perr      is a pointer to a variable that will hold an error code related to this call.
N*
N*                        OS_ERR_NONE            if the call was successful
N*                        OS_ERR_PRIO_INVALID    if you specified an invalid priority
N*                        OS_ERR_ID_INVALID      if the 'id' is not between 0 and OS_TASK_REG_TBL_SIZE-1
N*
N* Returns    : The current value of the task's variable or 0 if an error is detected.
N*
N* Note(s)    : The maximum number of task variables is 254
N*********************************************************************************************************
N*/
N
N#if OS_TASK_REG_TBL_SIZE > 0u
X#if 1u > 0u
Nvoid  OSTaskRegSet (INT8U    prio,
N                    INT8U    id,
N                    INT32U   value,
N                    INT8U   *perr)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N    OS_TCB    *ptcb;
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return;
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (prio >= OS_LOWEST_PRIO) {
S        if (prio != OS_PRIO_SELF) {
S            *perr = OS_ERR_PRIO_INVALID;
S            return;
S        }
S    }
S    if (id >= OS_TASK_REG_TBL_SIZE) {
S        *perr = OS_ERR_ID_INVALID;
S        return;
S    }
N#endif
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (prio == OS_PRIO_SELF) {                  /* See if need to get register from current task      */
X    if (prio == 0xFFu) {                   
N        ptcb = OSTCBCur;
N    } else {
N        ptcb = OSTCBPrioTbl[prio];
N    }
N    ptcb->OSTCBRegTbl[id] = value;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    *perr                 = OS_ERR_NONE;
X    *perr                 = 0u;
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              CATCH ACCIDENTAL TASK RETURN
N*
N* Description: This function is called if a task accidentally returns without deleting itself.  In other
N*              words, a task should either be an infinite loop or delete itself if it's done.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N
Nvoid  OS_TaskReturn (void)
N{
N    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
N
N#if OS_TASK_DEL_EN > 0u
X#if 1u > 0u
N    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
X    (void)OSTaskDel(0xFFu);                 
N#else
S    for (;;) {
S        OSTimeDly(OS_TICKS_PER_SEC);
S    }
N#endif
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        CLEAR TASK STACK
N*
N* Description: This function is used to clear the stack of a task (i.e. write all zeros)
N*
N* Arguments  : pbos     is a pointer to the task's bottom of stack.  If the configuration constant
N*                       OS_STK_GROWTH is set to 1, the stack is assumed to grow downward (i.e. from high
N*                       memory to low memory).  'pbos' will thus point to the lowest (valid) memory
N*                       location of the stack.  If OS_STK_GROWTH is set to 0, 'pbos' will point to the
N*                       highest memory location of the stack and the stack will grow with increasing
N*                       memory locations.  'pbos' MUST point to a valid 'free' data item.
N*
N*              size     is the number of 'stack elements' to clear.
N*
N*              opt      contains additional information (or options) about the behavior of the task.  The
N*                       LOWER 8-bits are reserved by uC/OS-II while the upper 8 bits can be application
N*                       specific.  See OS_TASK_OPT_??? in uCOS-II.H.
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
X#if (1u > 0u) && (1u > 0u)
Nvoid  OS_TaskStkClr (OS_STK  *pbos,
N                     INT32U   size,
N                     INT16U   opt)
N{
N    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
X    if ((opt & 0x0001u) != 0x0000u) {       
N        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
X        if ((opt & 0x0002u) != 0x0000u) {   
N#if OS_STK_GROWTH == 1u
X#if 1u == 1u
N            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
N                size--;
N                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
N            }
N#else
S            while (size > 0u) {                        /* Stack grows from LOW to HIGH memory          */
S                size--;
S                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
S            }
N#endif
N        }
N    }
N}
N
N#endif
N	 	   	  			 		 	 	  		  	  			 			  		 	  				 	 		  	 	  	 		 		   		  	  			 				 		 		  	 	 	     	 					 	   	   	 	  	 		  	  			 	 	  		 		   		   	 			 
L 36 "..\..\uCOS-II\Source\ucos_ii.c" 2
N#include <os_time.c>
L 1 "..\..\uCOS-II\Source\os_time.c" 1
N/*
N*********************************************************************************************************
N*                                                uC/OS-II
N*                                          The Real-Time Kernel
N*                                             TIME MANAGEMENT
N*
N*                              (c) Copyright 1992-2010, Micrium, Weston, FL
N*                                           All Rights Reserved
N*
N* File    : OS_TIME.C
N* By      : Jean J. Labrosse
N* Version : V2.92
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
N* its use in your product. We provide ALL the source code for your convenience and to help you experience
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
N* licensing fee.
N*********************************************************************************************************
N*/
N
N#ifndef  OS_MASTER_FILE
S#include <ucos_ii.h>
N#endif
N
N/*
N*********************************************************************************************************
N*                                       DELAY TASK 'n' TICKS
N*
N* Description: This function is called to delay execution of the currently running task until the
N*              specified number of system ticks expires.  This, of course, directly equates to delaying
N*              the current task for some time to expire.  No delay will result If the specified delay is
N*              0.  If the specified delay is greater than 0 then, a context switch will result.
N*
N* Arguments  : ticks     is the time delay that the task will be suspended in number of clock 'ticks'.
N*                        Note that by specifying 0, the task will not be delayed.
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
Nvoid  OSTimeDly (INT32U ticks)
N{
N    INT8U      y;
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
N        return;
N    }
N    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
N        return;
N    }
N    if (ticks > 0u) {                            /* 0 means no delay!                                  */
N        OS_ENTER_CRITICAL();
X        {cpu_sr = OS_CPU_SR_Save();};
N        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
N        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
N        if (OSRdyTbl[y] == 0u) {
N            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
N        }
N        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        OS_Sched();                              /* Find next task to run!                             */
N    }
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                     DELAY TASK FOR SPECIFIED TIME
N*
N* Description: This function is called to delay execution of the currently running task until some time
N*              expires.  This call allows you to specify the delay time in HOURS, MINUTES, SECONDS and
N*              MILLISECONDS instead of ticks.
N*
N* Arguments  : hours     specifies the number of hours that the task will be delayed (max. is 255)
N*              minutes   specifies the number of minutes (max. 59)
N*              seconds   specifies the number of seconds (max. 59)
N*              ms        specifies the number of milliseconds (max. 999)
N*
N* Returns    : OS_ERR_NONE
N*              OS_ERR_TIME_INVALID_MINUTES
N*              OS_ERR_TIME_INVALID_SECONDS
N*              OS_ERR_TIME_INVALID_MS
N*              OS_ERR_TIME_ZERO_DLY
N*              OS_ERR_TIME_DLY_ISR
N*
N* Note(s)    : The resolution on the milliseconds depends on the tick rate.  For example, you can't do
N*              a 10 mS delay if the ticker interrupts every 100 mS.  In this case, the delay would be
N*              set to 0.  The actual delay is rounded to the nearest tick.
N*********************************************************************************************************
N*/
N
N#if OS_TIME_DLY_HMSM_EN > 0u
X#if 1u > 0u
NINT8U  OSTimeDlyHMSM (INT8U   hours,
N                      INT8U   minutes,
N                      INT8U   seconds,
N                      INT16U  ms)
N{
N    INT32U ticks;
N
N
N    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
N        return (OS_ERR_TIME_DLY_ISR);
X        return (85u);
N    }
N    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
N        return (OS_ERR_SCHED_LOCKED);
X        return (50u);
N    }
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (hours == 0u) {
S        if (minutes == 0u) {
S            if (seconds == 0u) {
S                if (ms == 0u) {
S                    return (OS_ERR_TIME_ZERO_DLY);
S                }
S            }
S        }
S    }
S    if (minutes > 59u) {
S        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
S    }
S    if (seconds > 59u) {
S        return (OS_ERR_TIME_INVALID_SECONDS);
S    }
S    if (ms > 999u) {
S        return (OS_ERR_TIME_INVALID_MS);
S    }
N#endif
N                                                 /* Compute the total number of clock ticks required.. */
N                                                 /* .. (rounded to the nearest tick)                   */
N    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
X    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * 1000u
N          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
X          + 1000u * ((INT32U)ms + 500uL / 1000u) / 1000uL;
N    OSTimeDly(ticks);
N    return (OS_ERR_NONE);
X    return (0u);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         RESUME A DELAYED TASK
N*
N* Description: This function is used resume a task that has been delayed through a call to either
N*              OSTimeDly() or OSTimeDlyHMSM().  Note that you can call this function to resume a
N*              task that is waiting for an event with timeout.  This would make the task look
N*              like a timeout occurred.
N*
N* Arguments  : prio                      specifies the priority of the task to resume
N*
N* Returns    : OS_ERR_NONE               Task has been resumed
N*              OS_ERR_PRIO_INVALID       if the priority you specify is higher that the maximum allowed
N*                                        (i.e. >= OS_LOWEST_PRIO)
N*              OS_ERR_TIME_NOT_DLY       Task is not waiting for time to expire
N*              OS_ERR_TASK_NOT_EXIST     The desired task has not been created or has been assigned to a Mutex.
N*********************************************************************************************************
N*/
N
N#if OS_TIME_DLY_RESUME_EN > 0u
X#if 1u > 0u
NINT8U  OSTimeDlyResume (INT8U prio)
N{
N    OS_TCB    *ptcb;
N#if OS_CRITICAL_METHOD == 3u                                   /* Storage for CPU status register      */
X#if 3u == 3u                                    
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    if (prio >= OS_LOWEST_PRIO) {
X    if (prio >= 10u) {
N        return (OS_ERR_PRIO_INVALID);
X        return (42u);
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
N    if (ptcb == (OS_TCB *)0) {
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
X        return (67u);                         
N    }
N    if (ptcb == OS_TCB_RESERVED) {
X    if (ptcb == ((OS_TCB *)1)) {
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
X        return (67u);                         
N    }
N    if (ptcb->OSTCBDly == 0u) {                                /* See if task is delayed               */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
X        return (80u);                           
N    }
N
N    ptcb->OSTCBDly = 0u;                                       /* Clear the time delay                 */
N    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
X    if ((ptcb->OSTCBStat & (0x01u | 0x02u | 0x04u | 0x10u | 0x20u)) != 0x00u) {
N        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
X        ptcb->OSTCBStat     &= ~(0x01u | 0x02u | 0x04u | 0x10u | 0x20u);               
N        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
X        ptcb->OSTCBStatPend  =  1u;                
N    } else {
N        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
X        ptcb->OSTCBStatPend  =  0u;
N    }
N    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
X    if ((ptcb->OSTCBStat & 0x08u) == 0x00u) {   
N        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
N        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        OS_Sched();                                            /* See if this is new highest priority  */
N    } else {
N        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
X        {OS_CPU_SR_Restore(cpu_sr);};                                     
N    }
N    return (OS_ERR_NONE);
X    return (0u);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         GET CURRENT SYSTEM TIME
N*
N* Description: This function is used by your application to obtain the current value of the 32-bit
N*              counter which keeps track of the number of clock ticks.
N*
N* Arguments  : none
N*
N* Returns    : The current value of OSTime
N*********************************************************************************************************
N*/
N
N#if OS_TIME_GET_SET_EN > 0u
X#if 1u > 0u
NINT32U  OSTimeGet (void)
N{
N    INT32U     ticks;
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    ticks = OSTime;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (ticks);
N}
N#endif
N
N/*
N*********************************************************************************************************
N*                                            SET SYSTEM CLOCK
N*
N* Description: This function sets the 32-bit counter which keeps track of the number of clock ticks.
N*
N* Arguments  : ticks      specifies the new value that OSTime needs to take.
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
N#if OS_TIME_GET_SET_EN > 0u
X#if 1u > 0u
Nvoid  OSTimeSet (INT32U ticks)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    OSTime = ticks;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N}
N#endif
N	 	   	  			 		 	 	  		  	  			 			  		 	  				 	 		  	 	  	 		 		   		  	  			 				 		 		  	 	 	     	 					 	   	   	 	  	 		  	  			 	 	  		 		   		   	 			 
L 37 "..\..\uCOS-II\Source\ucos_ii.c" 2
N#include <os_tmr.c>
L 1 "..\..\uCOS-II\Source\os_tmr.c" 1
N/*
N************************************************************************************************************************
N*                                                uC/OS-II
N*                                          The Real-Time Kernel
N*                                            TIMER MANAGEMENT
N*
N*                              (c) Copyright 1992-2010, Micrium, Weston, FL
N*                                           All Rights Reserved
N*
N*
N* File    : OS_TMR.C
N* By      : Jean J. Labrosse
N* Version : V2.92
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
N* its use in your product. We provide ALL the source code for your convenience and to help you experience
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
N* licensing fee.
N************************************************************************************************************************
N*/
N
N#include <ucos_ii.h>
N
N/*
N************************************************************************************************************************
N*                                                        NOTES
N*
N* 1) Your application MUST define the following #define constants:
N*
N*    OS_TASK_TMR_PRIO          The priority of the Timer management task
N*    OS_TASK_TMR_STK_SIZE      The size     of the Timer management task's stack
N*
N* 2) You must call OSTmrSignal() to notify the Timer management task that it's time to update the timers.
N************************************************************************************************************************
N*/
N
N/*
N************************************************************************************************************************
N*                                                     CONSTANTS
N************************************************************************************************************************
N*/
N
N#define  OS_TMR_LINK_DLY       0u
N#define  OS_TMR_LINK_PERIODIC  1u
N
N/*
N************************************************************************************************************************
N*                                                  LOCAL PROTOTYPES
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
Nstatic  OS_TMR  *OSTmr_Alloc         (void);
Nstatic  void     OSTmr_Free          (OS_TMR *ptmr);
Nstatic  void     OSTmr_InitTask      (void);
Nstatic  void     OSTmr_Link          (OS_TMR *ptmr, INT8U type);
Nstatic  void     OSTmr_Unlink        (OS_TMR *ptmr);
Nstatic  void     OSTmr_Task          (void   *p_arg);
N#endif
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                                   CREATE A TIMER
N*
N* Description: This function is called by your application code to create a timer.
N*
N* Arguments  : dly           Initial delay.
N*                            If the timer is configured for ONE-SHOT mode, this is the timeout used
N*                            If the timer is configured for PERIODIC mode, this is the first timeout to wait for
N*                               before the timer starts entering periodic mode
N*
N*              period        The 'period' being repeated for the timer.
N*                               If you specified 'OS_TMR_OPT_PERIODIC' as an option, when the timer expires, it will
N*                               automatically restart with the same period.
N*
N*              opt           Specifies either:
N*                               OS_TMR_OPT_ONE_SHOT       The timer counts down only once
N*                               OS_TMR_OPT_PERIODIC       The timer counts down and then reloads itself
N*
N*              callback      Is a pointer to a callback function that will be called when the timer expires.  The
N*                               callback function must be declared as follows:
N*
N*                               void MyCallback (OS_TMR *ptmr, void *p_arg);
N*
N*              callback_arg  Is an argument (a pointer) that is passed to the callback function when it is called.
N*
N*              pname         Is a pointer to an ASCII string that is used to name the timer.  Names are useful for
N*                               debugging.
N*
N*              perr          Is a pointer to an error code.  '*perr' will contain one of the following:
N*                               OS_ERR_NONE
N*                               OS_ERR_TMR_INVALID_DLY     you specified an invalid delay
N*                               OS_ERR_TMR_INVALID_PERIOD  you specified an invalid period
N*                               OS_ERR_TMR_INVALID_OPT     you specified an invalid option
N*                               OS_ERR_TMR_ISR             if the call was made from an ISR
N*                               OS_ERR_TMR_NON_AVAIL       if there are no free timers from the timer pool
N*
N* Returns    : A pointer to an OS_TMR data structure.
N*              This is the 'handle' that your application will use to reference the timer created.
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
NOS_TMR  *OSTmrCreate (INT32U           dly,
N                      INT32U           period,
N                      INT8U            opt,
N                      OS_TMR_CALLBACK  callback,
N                      void            *callback_arg,
N                      INT8U           *pname,
N                      INT8U           *perr)
N{
N    OS_TMR   *ptmr;
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_TMR *)0);
S    }
N#endif
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
S    if (OSSafetyCriticalStartFlag == OS_TRUE) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return ((OS_TMR *)0);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    switch (opt) {                                          /* Validate arguments                                     */
S        case OS_TMR_OPT_PERIODIC:
S             if (period == 0u) {
S                 *perr = OS_ERR_TMR_INVALID_PERIOD;
S                 return ((OS_TMR *)0);
S             }
S             break;
S
S        case OS_TMR_OPT_ONE_SHOT:
S             if (dly == 0u) {
S                 *perr = OS_ERR_TMR_INVALID_DLY;
S                 return ((OS_TMR *)0);
S             }
S             break;
S
S        default:
S             *perr = OS_ERR_TMR_INVALID_OPT;
S             return ((OS_TMR *)0);
S    }
N#endif
N    if (OSIntNesting > 0u) {                                /* See if trying to call from an ISR                      */
N        *perr  = OS_ERR_TMR_ISR;
X        *perr  = 139u;
N        return ((OS_TMR *)0);
N    }
N    OSSchedLock();
N    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
N    if (ptmr == (OS_TMR *)0) {
N        OSSchedUnlock();
N        *perr = OS_ERR_TMR_NON_AVAIL;
X        *perr = 134u;
N        return ((OS_TMR *)0);
N    }
N    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
X    ptmr->OSTmrState       = 1u;           
N    ptmr->OSTmrDly         = dly;
N    ptmr->OSTmrPeriod      = period;
N    ptmr->OSTmrOpt         = opt;
N    ptmr->OSTmrCallback    = callback;
N    ptmr->OSTmrCallbackArg = callback_arg;
N#if OS_TMR_CFG_NAME_EN > 0u
X#if 1u > 0u
N    if (pname == (INT8U *)0) {                              /* Is 'pname' a NULL pointer?                             */
N        ptmr->OSTmrName    = (INT8U *)(void *)"?";
N    } else {
N        ptmr->OSTmrName    = pname;
N    }
N#endif
N    OSSchedUnlock();
N    *perr = OS_ERR_NONE;
X    *perr = 0u;
N    return (ptmr);
N}
N#endif
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                                   DELETE A TIMER
N*
N* Description: This function is called by your application code to delete a timer.
N*
N* Arguments  : ptmr          Is a pointer to the timer to stop and delete.
N*
N*              perr          Is a pointer to an error code.  '*perr' will contain one of the following:
N*                               OS_ERR_NONE
N*                               OS_ERR_TMR_INVALID        'ptmr'  is a NULL pointer
N*                               OS_ERR_TMR_INVALID_TYPE   'ptmr'  is not pointing to an OS_TMR
N*                               OS_ERR_TMR_ISR            if the function was called from an ISR
N*                               OS_ERR_TMR_INACTIVE       if the timer was not created
N*                               OS_ERR_TMR_INVALID_STATE  the timer is in an invalid state
N*
N* Returns    : OS_TRUE       If the call was successful
N*              OS_FALSE      If not
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
NBOOLEAN  OSTmrDel (OS_TMR  *ptmr,
N                   INT8U   *perr)
N{
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (OS_FALSE);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (ptmr == (OS_TMR *)0) {
S        *perr = OS_ERR_TMR_INVALID;
S        return (OS_FALSE);
S    }
N#endif
N    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
X    if (ptmr->OSTmrType != 100u) {                    
N        *perr = OS_ERR_TMR_INVALID_TYPE;
X        *perr = 137u;
N        return (OS_FALSE);
X        return (0u);
N    }
N    if (OSIntNesting > 0u) {                                /* See if trying to call from an ISR                      */
N        *perr  = OS_ERR_TMR_ISR;
X        *perr  = 139u;
N        return (OS_FALSE);
X        return (0u);
N    }
N    OSSchedLock();
N    switch (ptmr->OSTmrState) {
N        case OS_TMR_STATE_RUNNING:
X        case 3u:
N             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
N             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
N             OSSchedUnlock();
N             *perr = OS_ERR_NONE;
X             *perr = 0u;
N             return (OS_TRUE);
X             return (1u);
N
N        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
X        case 1u:                           
N        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
X        case 2u:                         
N             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
N             OSSchedUnlock();
N             *perr = OS_ERR_NONE;
X             *perr = 0u;
N             return (OS_TRUE);
X             return (1u);
N
N        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
X        case 0u:                            
N             OSSchedUnlock();
N             *perr = OS_ERR_TMR_INACTIVE;
X             *perr = 135u;
N             return (OS_FALSE);
X             return (0u);
N
N        default:
N             OSSchedUnlock();
N             *perr = OS_ERR_TMR_INVALID_STATE;
X             *perr = 141u;
N             return (OS_FALSE);
X             return (0u);
N    }
N}
N#endif
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                             GET THE NAME OF A TIMER
N*
N* Description: This function is called to obtain the name of a timer.
N*
N* Arguments  : ptmr          Is a pointer to the timer to obtain the name for
N*
N*              pdest         Is a pointer to pointer to where the name of the timer will be placed.
N*
N*              perr          Is a pointer to an error code.  '*perr' will contain one of the following:
N*                               OS_ERR_NONE               The call was successful
N*                               OS_ERR_TMR_INVALID_DEST   'pdest' is a NULL pointer
N*                               OS_ERR_TMR_INVALID        'ptmr'  is a NULL pointer
N*                               OS_ERR_TMR_INVALID_TYPE   'ptmr'  is not pointing to an OS_TMR
N*                               OS_ERR_NAME_GET_ISR       if the call was made from an ISR
N*                               OS_ERR_TMR_INACTIVE       'ptmr'  points to a timer that is not active
N*                               OS_ERR_TMR_INVALID_STATE  the timer is in an invalid state
N*
N* Returns    : The length of the string or 0 if the timer does not exist.
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u && OS_TMR_CFG_NAME_EN > 0u
X#if 1u > 0u && 1u > 0u
NINT8U  OSTmrNameGet (OS_TMR   *ptmr,
N                     INT8U   **pdest,
N                     INT8U    *perr)
N{
N    INT8U  len;
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (0u);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (pdest == (INT8U **)0) {
S        *perr = OS_ERR_TMR_INVALID_DEST;
S        return (0u);
S    }
S    if (ptmr == (OS_TMR *)0) {
S        *perr = OS_ERR_TMR_INVALID;
S        return (0u);
S    }
N#endif
N    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
X    if (ptmr->OSTmrType != 100u) {               
N        *perr = OS_ERR_TMR_INVALID_TYPE;
X        *perr = 137u;
N        return (0u);
N    }
N    if (OSIntNesting > 0u) {                           /* See if trying to call from an ISR                           */
N        *perr = OS_ERR_NAME_GET_ISR;
X        *perr = 17u;
N        return (0u);
N    }
N    OSSchedLock();
N    switch (ptmr->OSTmrState) {
N        case OS_TMR_STATE_RUNNING:
X        case 3u:
N        case OS_TMR_STATE_STOPPED:
X        case 1u:
N        case OS_TMR_STATE_COMPLETED:
X        case 2u:
N             *pdest = ptmr->OSTmrName;
N             len    = OS_StrLen(*pdest);
N             OSSchedUnlock();
N             *perr = OS_ERR_NONE;
X             *perr = 0u;
N             return (len);
N
N        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
X        case 0u:                       
N             OSSchedUnlock();
N             *perr = OS_ERR_TMR_INACTIVE;
X             *perr = 135u;
N             return (0u);
N
N        default:
N             OSSchedUnlock();
N             *perr = OS_ERR_TMR_INVALID_STATE;
X             *perr = 141u;
N             return (0u);
N    }
N}
N#endif
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                    GET HOW MUCH TIME IS LEFT BEFORE A TIMER EXPIRES
N*
N* Description: This function is called to get the number of ticks before a timer times out.
N*
N* Arguments  : ptmr          Is a pointer to the timer to obtain the remaining time from.
N*
N*              perr          Is a pointer to an error code.  '*perr' will contain one of the following:
N*                               OS_ERR_NONE
N*                               OS_ERR_TMR_INVALID        'ptmr' is a NULL pointer
N*                               OS_ERR_TMR_INVALID_TYPE   'ptmr'  is not pointing to an OS_TMR
N*                               OS_ERR_TMR_ISR            if the call was made from an ISR
N*                               OS_ERR_TMR_INACTIVE       'ptmr' points to a timer that is not active
N*                               OS_ERR_TMR_INVALID_STATE  the timer is in an invalid state
N*
N* Returns    : The time remaining for the timer to expire.  The time represents 'timer' increments.  In other words, if
N*              OSTmr_Task() is signaled every 1/10 of a second then the returned value represents the number of 1/10 of
N*              a second remaining before the timer expires.
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
NINT32U  OSTmrRemainGet (OS_TMR  *ptmr,
N                        INT8U   *perr)
N{
N    INT32U  remain;
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (0u);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (ptmr == (OS_TMR *)0) {
S        *perr = OS_ERR_TMR_INVALID;
S        return (0u);
S    }
N#endif
N    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
X    if (ptmr->OSTmrType != 100u) {               
N        *perr = OS_ERR_TMR_INVALID_TYPE;
X        *perr = 137u;
N        return (0u);
N    }
N    if (OSIntNesting > 0u) {                           /* See if trying to call from an ISR                           */
N        *perr = OS_ERR_TMR_ISR;
X        *perr = 139u;
N        return (0u);
N    }
N    OSSchedLock();
N    switch (ptmr->OSTmrState) {
N        case OS_TMR_STATE_RUNNING:
X        case 3u:
N             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
N             OSSchedUnlock();
N             *perr  = OS_ERR_NONE;
X             *perr  = 0u;
N             return (remain);
N
N        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
X        case 1u:                      
N             switch (ptmr->OSTmrOpt) {
N                 case OS_TMR_OPT_PERIODIC:
X                 case 2u:
N                      if (ptmr->OSTmrDly == 0u) {
N                          remain = ptmr->OSTmrPeriod;
N                      } else {
N                          remain = ptmr->OSTmrDly;
N                      }
N                      OSSchedUnlock();
N                      *perr  = OS_ERR_NONE;
X                      *perr  = 0u;
N                      break;
N
N                 case OS_TMR_OPT_ONE_SHOT:
X                 case 1u:
N                 default:
N                      remain = ptmr->OSTmrDly;
N                      OSSchedUnlock();
N                      *perr  = OS_ERR_NONE;
X                      *perr  = 0u;
N                      break;
N             }
N             return (remain);
N
N        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
X        case 2u:                    
N             OSSchedUnlock();
N             *perr = OS_ERR_NONE;
X             *perr = 0u;
N             return (0u);
N
N        case OS_TMR_STATE_UNUSED:
X        case 0u:
N             OSSchedUnlock();
N             *perr = OS_ERR_TMR_INACTIVE;
X             *perr = 135u;
N             return (0u);
N
N        default:
N             OSSchedUnlock();
N             *perr = OS_ERR_TMR_INVALID_STATE;
X             *perr = 141u;
N             return (0u);
N    }
N}
N#endif
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                    FIND OUT WHAT STATE A TIMER IS IN
N*
N* Description: This function is called to determine what state the timer is in:
N*
N*                  OS_TMR_STATE_UNUSED     the timer has not been created
N*                  OS_TMR_STATE_STOPPED    the timer has been created but has not been started or has been stopped
N*                  OS_TMR_STATE_COMPLETED  the timer is in ONE-SHOT mode and has completed it's timeout
N*                  OS_TMR_STATE_RUNNING    the timer is currently running
N*
N* Arguments  : ptmr          Is a pointer to the desired timer
N*
N*              perr          Is a pointer to an error code.  '*perr' will contain one of the following:
N*                               OS_ERR_NONE
N*                               OS_ERR_TMR_INVALID        'ptmr' is a NULL pointer
N*                               OS_ERR_TMR_INVALID_TYPE   'ptmr'  is not pointing to an OS_TMR
N*                               OS_ERR_TMR_ISR            if the call was made from an ISR
N*                               OS_ERR_TMR_INACTIVE       'ptmr' points to a timer that is not active
N*                               OS_ERR_TMR_INVALID_STATE  if the timer is not in a valid state
N*
N* Returns    : The current state of the timer (see description).
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
NINT8U  OSTmrStateGet (OS_TMR  *ptmr,
N                      INT8U   *perr)
N{
N    INT8U  state;
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (0u);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (ptmr == (OS_TMR *)0) {
S        *perr = OS_ERR_TMR_INVALID;
S        return (0u);
S    }
N#endif
N    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
X    if (ptmr->OSTmrType != 100u) {               
N        *perr = OS_ERR_TMR_INVALID_TYPE;
X        *perr = 137u;
N        return (0u);
N    }
N    if (OSIntNesting > 0u) {                           /* See if trying to call from an ISR                           */
N        *perr = OS_ERR_TMR_ISR;
X        *perr = 139u;
N        return (0u);
N    }
N    OSSchedLock();
N    state = ptmr->OSTmrState;
N    switch (state) {
N        case OS_TMR_STATE_UNUSED:
X        case 0u:
N        case OS_TMR_STATE_STOPPED:
X        case 1u:
N        case OS_TMR_STATE_COMPLETED:
X        case 2u:
N        case OS_TMR_STATE_RUNNING:
X        case 3u:
N             *perr = OS_ERR_NONE;
X             *perr = 0u;
N             break;
N
N        default:
N             *perr = OS_ERR_TMR_INVALID_STATE;
X             *perr = 141u;
N             break;
N    }
N    OSSchedUnlock();
N    return (state);
N}
N#endif
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                                   START A TIMER
N*
N* Description: This function is called by your application code to start a timer.
N*
N* Arguments  : ptmr          Is a pointer to an OS_TMR
N*
N*              perr          Is a pointer to an error code.  '*perr' will contain one of the following:
N*                               OS_ERR_NONE
N*                               OS_ERR_TMR_INVALID
N*                               OS_ERR_TMR_INVALID_TYPE    'ptmr'  is not pointing to an OS_TMR
N*                               OS_ERR_TMR_ISR             if the call was made from an ISR
N*                               OS_ERR_TMR_INACTIVE        if the timer was not created
N*                               OS_ERR_TMR_INVALID_STATE   the timer is in an invalid state
N*
N* Returns    : OS_TRUE    if the timer was started
N*              OS_FALSE   if an error was detected
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
NBOOLEAN  OSTmrStart (OS_TMR   *ptmr,
N                     INT8U    *perr)
N{
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (OS_FALSE);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (ptmr == (OS_TMR *)0) {
S        *perr = OS_ERR_TMR_INVALID;
S        return (OS_FALSE);
S    }
N#endif
N    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
X    if (ptmr->OSTmrType != 100u) {                    
N        *perr = OS_ERR_TMR_INVALID_TYPE;
X        *perr = 137u;
N        return (OS_FALSE);
X        return (0u);
N    }
N    if (OSIntNesting > 0u) {                                /* See if trying to call from an ISR                      */
N        *perr  = OS_ERR_TMR_ISR;
X        *perr  = 139u;
N        return (OS_FALSE);
X        return (0u);
N    }
N    OSSchedLock();
N    switch (ptmr->OSTmrState) {
N        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
X        case 3u:                           
N             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
N             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
X             OSTmr_Link(ptmr, 0u);              
N             OSSchedUnlock();
N             *perr = OS_ERR_NONE;
X             *perr = 0u;
N             return (OS_TRUE);
X             return (1u);
N
N        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
X        case 1u:                           
N        case OS_TMR_STATE_COMPLETED:
X        case 2u:
N             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
X             OSTmr_Link(ptmr, 0u);              
N             OSSchedUnlock();
N             *perr = OS_ERR_NONE;
X             *perr = 0u;
N             return (OS_TRUE);
X             return (1u);
N
N        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
X        case 0u:                            
N             OSSchedUnlock();
N             *perr = OS_ERR_TMR_INACTIVE;
X             *perr = 135u;
N             return (OS_FALSE);
X             return (0u);
N
N        default:
N             OSSchedUnlock();
N             *perr = OS_ERR_TMR_INVALID_STATE;
X             *perr = 141u;
N             return (OS_FALSE);
X             return (0u);
N    }
N}
N#endif
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                                   STOP A TIMER
N*
N* Description: This function is called by your application code to stop a timer.
N*
N* Arguments  : ptmr          Is a pointer to the timer to stop.
N*
N*              opt           Allows you to specify an option to this functions which can be:
N*
N*                               OS_TMR_OPT_NONE          Do nothing special but stop the timer
N*                               OS_TMR_OPT_CALLBACK      Execute the callback function, pass it the callback argument
N*                                                        specified when the timer was created.
N*                               OS_TMR_OPT_CALLBACK_ARG  Execute the callback function, pass it the callback argument
N*                                                        specified in THIS function call
N*
N*              callback_arg  Is a pointer to a 'new' callback argument that can be passed to the callback function
N*                               instead of the timer's callback argument.  In other words, use 'callback_arg' passed in
N*                               THIS function INSTEAD of ptmr->OSTmrCallbackArg
N*
N*              perr          Is a pointer to an error code.  '*perr' will contain one of the following:
N*                               OS_ERR_NONE
N*                               OS_ERR_TMR_INVALID         'ptmr' is a NULL pointer
N*                               OS_ERR_TMR_INVALID_TYPE    'ptmr'  is not pointing to an OS_TMR
N*                               OS_ERR_TMR_ISR             if the function was called from an ISR
N*                               OS_ERR_TMR_INACTIVE        if the timer was not created
N*                               OS_ERR_TMR_INVALID_OPT     if you specified an invalid option for 'opt'
N*                               OS_ERR_TMR_STOPPED         if the timer was already stopped
N*                               OS_ERR_TMR_INVALID_STATE   the timer is in an invalid state
N*                               OS_ERR_TMR_NO_CALLBACK     if the timer does not have a callback function defined
N*
N* Returns    : OS_TRUE       If we stopped the timer (if the timer is already stopped, we also return OS_TRUE)
N*              OS_FALSE      If not
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
NBOOLEAN  OSTmrStop (OS_TMR  *ptmr,
N                    INT8U    opt,
N                    void    *callback_arg,
N                    INT8U   *perr)
N{
N    OS_TMR_CALLBACK  pfnct;
N
N
N#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (OS_FALSE);
S    }
N#endif
N
N#if OS_ARG_CHK_EN > 0u
X#if 0u > 0u
S    if (ptmr == (OS_TMR *)0) {
S        *perr = OS_ERR_TMR_INVALID;
S        return (OS_FALSE);
S    }
N#endif
N    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
X    if (ptmr->OSTmrType != 100u) {                          
N        *perr = OS_ERR_TMR_INVALID_TYPE;
X        *perr = 137u;
N        return (OS_FALSE);
X        return (0u);
N    }
N    if (OSIntNesting > 0u) {                                      /* See if trying to call from an ISR                */
N        *perr  = OS_ERR_TMR_ISR;
X        *perr  = 139u;
N        return (OS_FALSE);
X        return (0u);
N    }
N    OSSchedLock();
N    switch (ptmr->OSTmrState) {
N        case OS_TMR_STATE_RUNNING:
X        case 3u:
N             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
N             *perr = OS_ERR_NONE;
X             *perr = 0u;
N             switch (opt) {
N                 case OS_TMR_OPT_CALLBACK:
X                 case 3u:
N                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
N                      if (pfnct != (OS_TMR_CALLBACK)0) {
N                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
N                      } else {
N                          *perr = OS_ERR_TMR_NO_CALLBACK;
X                          *perr = 143u;
N                      }
N                      break;
N
N                 case OS_TMR_OPT_CALLBACK_ARG:
X                 case 4u:
N                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
N                      if (pfnct != (OS_TMR_CALLBACK)0) {
N                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
N                      } else {
N                          *perr = OS_ERR_TMR_NO_CALLBACK;
X                          *perr = 143u;
N                      }
N                      break;
N
N                 case OS_TMR_OPT_NONE:
X                 case 0u:
N                      break;
N
N                 default:
N                     *perr = OS_ERR_TMR_INVALID_OPT;
X                     *perr = 132u;
N                     break;
N             }
N             OSSchedUnlock();
N             return (OS_TRUE);
X             return (1u);
N
N        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
X        case 2u:                               
N        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
X        case 1u:                                 
N             OSSchedUnlock();
N             *perr = OS_ERR_TMR_STOPPED;
X             *perr = 142u;
N             return (OS_TRUE);
X             return (1u);
N
N        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
X        case 0u:                                  
N             OSSchedUnlock();
N             *perr = OS_ERR_TMR_INACTIVE;
X             *perr = 135u;
N             return (OS_FALSE);
X             return (0u);
N
N        default:
N             OSSchedUnlock();
N             *perr = OS_ERR_TMR_INVALID_STATE;
X             *perr = 141u;
N             return (OS_FALSE);
X             return (0u);
N    }
N}
N#endif
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                      SIGNAL THAT IT'S TIME TO UPDATE THE TIMERS
N*
N* Description: This function is typically called by the ISR that occurs at the timer tick rate and is used to signal to
N*              OSTmr_Task() that it's time to update the timers.
N*
N* Arguments  : none
N*
N* Returns    : OS_ERR_NONE         The call was successful and the timer task was signaled.
N*              OS_ERR_SEM_OVF      If OSTmrSignal() was called more often than OSTmr_Task() can handle the timers.
N*                                  This would indicate that your system is heavily loaded.
N*              OS_ERR_EVENT_TYPE   Unlikely you would get this error because the semaphore used for signaling is created
N*                                  by uC/OS-II.
N*              OS_ERR_PEVENT_NULL  Again, unlikely you would ever get this error because the semaphore used for signaling
N*                                  is created by uC/OS-II.
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
NINT8U  OSTmrSignal (void)
N{
N    INT8U  err;
N
N
N    err = OSSemPost(OSTmrSemSignal);
N    return (err);
N}
N#endif
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                               ALLOCATE AND FREE A TIMER
N*
N* Description: This function is called to allocate a timer.
N*
N* Arguments  : none
N*
N* Returns    : a pointer to a timer if one is available
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
Nstatic  OS_TMR  *OSTmr_Alloc (void)
N{
N    OS_TMR *ptmr;
N
N
N    if (OSTmrFreeList == (OS_TMR *)0) {
N        return ((OS_TMR *)0);
N    }
N    ptmr            = (OS_TMR *)OSTmrFreeList;
N    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
N    ptmr->OSTmrNext = (OS_TCB *)0;
N    ptmr->OSTmrPrev = (OS_TCB *)0;
N    OSTmrUsed++;
N    OSTmrFree--;
N    return (ptmr);
N}
N#endif
N
N
N/*
N************************************************************************************************************************
N*                                             RETURN A TIMER TO THE FREE LIST
N*
N* Description: This function is called to return a timer object to the free list of timers.
N*
N* Arguments  : ptmr     is a pointer to the timer to free
N*
N* Returns    : none
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
Nstatic  void  OSTmr_Free (OS_TMR *ptmr)
N{
N    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
X    ptmr->OSTmrState       = 0u;       
N    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
X    ptmr->OSTmrOpt         = 0u;
N    ptmr->OSTmrPeriod      = 0u;
N    ptmr->OSTmrMatch       = 0u;
N    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
N    ptmr->OSTmrCallbackArg = (void *)0;
N#if OS_TMR_CFG_NAME_EN > 0u
X#if 1u > 0u
N    ptmr->OSTmrName        = (INT8U *)(void *)"?";
N#endif
N
N    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
N    ptmr->OSTmrNext        = OSTmrFreeList;
N    OSTmrFreeList          = ptmr;
N
N    OSTmrUsed--;                                       /* Update timer object statistics                              */
N    OSTmrFree++;
N}
N#endif
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                                    INITIALIZATION
N*                                          INITIALIZE THE FREE LIST OF TIMERS
N*
N* Description: This function is called by OSInit() to initialize the free list of OS_TMRs.
N*
N* Arguments  : none
N*
N* Returns    : none
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
Nvoid  OSTmr_Init (void)
N{
N#if OS_EVENT_NAME_EN > 0u
X#if 1u > 0u
N    INT8U    err;
N#endif
N    INT16U   ix;
N    INT16U   ix_next;
N    OS_TMR  *ptmr1;
N    OS_TMR  *ptmr2;
N
N
N    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
N    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
N
N    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
X    for (ix = 0u; ix < (8u - 1u); ix++) {                    
N        ix_next = ix + 1u;
N        ptmr1 = &OSTmrTbl[ix];
N        ptmr2 = &OSTmrTbl[ix_next];
N        ptmr1->OSTmrType    = OS_TMR_TYPE;
X        ptmr1->OSTmrType    = 100u;
N        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
X        ptmr1->OSTmrState   = 0u;                       
N        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
N#if OS_TMR_CFG_NAME_EN > 0u
X#if 1u > 0u
N        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
N#endif
N    }
N    ptmr1               = &OSTmrTbl[ix];
N    ptmr1->OSTmrType    = OS_TMR_TYPE;
X    ptmr1->OSTmrType    = 100u;
N    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
X    ptmr1->OSTmrState   = 0u;                           
N    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
N#if OS_TMR_CFG_NAME_EN > 0u
X#if 1u > 0u
N    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
N#endif
N    OSTmrTime           = 0u;
N    OSTmrUsed           = 0u;
N    OSTmrFree           = OS_TMR_CFG_MAX;
X    OSTmrFree           = 8u;
N    OSTmrFreeList       = &OSTmrTbl[0];
N    OSTmrSem            = OSSemCreate(1u);
N    OSTmrSemSignal      = OSSemCreate(0u);
N
N#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
X#if 1u > 0u                                                
N    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
N    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
N#endif
N
N    OSTmr_InitTask();
N}
N#endif
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                          INITIALIZE THE TIMER MANAGEMENT TASK
N*
N* Description: This function is called by OSTmrInit() to create the timer management task.
N*                               * Arguments  : none
N*
N* Returns    : none
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
Nstatic  void  OSTmr_InitTask (void)
N{
N#if OS_TASK_NAME_EN > 0u
X#if 1u > 0u
N    INT8U  err;
N#endif
N
N
N#if OS_TASK_CREATE_EXT_EN > 0u
X#if 1u > 0u
N    #if OS_STK_GROWTH == 1u
X    #if 1u == 1u
N    (void)OSTaskCreateExt(OSTmr_Task,
N                          (void *)0,                                       /* No arguments passed to OSTmrTask()      */
N                          &OSTmrTaskStk[OS_TASK_TMR_STK_SIZE - 1u],        /* Set Top-Of-Stack                        */
X                          &OSTmrTaskStk[15u - 1u],         
N                          OS_TASK_TMR_PRIO,
X                          (10u - 2),
N                          OS_TASK_TMR_ID,
X                          65533u,
N                          &OSTmrTaskStk[0],                                /* Set Bottom-Of-Stack                     */
N                          OS_TASK_TMR_STK_SIZE,
X                          15u,
N                          (void *)0,                                       /* No TCB extension                        */
N                          OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);      /* Enable stack checking + clear stack     */
X                          0x0001u | 0x0002u);       
N    #else
S    (void)OSTaskCreateExt(OSTmr_Task,
S                          (void *)0,                                       /* No arguments passed to OSTmrTask()      */
S                          &OSTmrTaskStk[0],                                /* Set Top-Of-Stack                        */
S                          OS_TASK_TMR_PRIO,
S                          OS_TASK_TMR_ID,
S                          &OSTmrTaskStk[OS_TASK_TMR_STK_SIZE - 1u],        /* Set Bottom-Of-Stack                     */
S                          OS_TASK_TMR_STK_SIZE,
S                          (void *)0,                                       /* No TCB extension                        */
S                          OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);      /* Enable stack checking + clear stack     */
N    #endif
N#else
S    #if OS_STK_GROWTH == 1u
S    (void)OSTaskCreate(OSTmr_Task,
S                       (void *)0,
S                       &OSTmrTaskStk[OS_TASK_TMR_STK_SIZE - 1u],
S                       OS_TASK_TMR_PRIO);
S    #else
S    (void)OSTaskCreate(OSTmr_Task,
S                       (void *)0,
S                       &OSTmrTaskStk[0],
S                       OS_TASK_TMR_PRIO);
S    #endif
N#endif
N
N#if OS_TASK_NAME_EN > 0u
X#if 1u > 0u
N    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
X    OSTaskNameSet((10u - 2), (INT8U *)(void *)"uC/OS-II Tmr", &err);
N#endif
N}
N#endif
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                         INSERT A TIMER INTO THE TIMER WHEEL
N*
N* Description: This function is called to insert the timer into the timer wheel.  The timer is always inserted at the
N*              beginning of the list.
N*
N* Arguments  : ptmr          Is a pointer to the timer to insert.
N*
N*              type          Is either:
N*                               OS_TMR_LINK_PERIODIC    Means to re-insert the timer after a period expired
N*                               OS_TMR_LINK_DLY         Means to insert    the timer the first time
N*
N* Returns    : none
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
Nstatic  void  OSTmr_Link (OS_TMR  *ptmr,
N                          INT8U    type)
N{
N    OS_TMR       *ptmr1;
N    OS_TMR_WHEEL *pspoke;
N    INT16U        spoke;
N
N
N    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
X    ptmr->OSTmrState = 3u;
N    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
X    if (type == 1u) {                             
N        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
N    } else {
N        if (ptmr->OSTmrDly == 0u) {
N            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
N        } else {
N            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
N        }
N    }
N    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
X    spoke  = (INT16U)(ptmr->OSTmrMatch % 8u);
N    pspoke = &OSTmrWheelTbl[spoke];
N
N    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
N        pspoke->OSTmrFirst   = ptmr;
N        ptmr->OSTmrNext      = (OS_TMR *)0;
N        pspoke->OSTmrEntries = 1u;
N    } else {
N        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
N        pspoke->OSTmrFirst   = ptmr;
N        ptmr->OSTmrNext      = (void *)ptmr1;
N        ptmr1->OSTmrPrev     = (void *)ptmr;
N        pspoke->OSTmrEntries++;
N    }
N    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
N}
N#endif
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                         REMOVE A TIMER FROM THE TIMER WHEEL
N*
N* Description: This function is called to remove the timer from the timer wheel.
N*
N* Arguments  : ptmr          Is a pointer to the timer to remove.
N*
N* Returns    : none
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
Nstatic  void  OSTmr_Unlink (OS_TMR *ptmr)
N{
N    OS_TMR        *ptmr1;
N    OS_TMR        *ptmr2;
N    OS_TMR_WHEEL  *pspoke;
N    INT16U         spoke;
N
N
N    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
X    spoke  = (INT16U)(ptmr->OSTmrMatch % 8u);
N    pspoke = &OSTmrWheelTbl[spoke];
N
N    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
N        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
N        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
N        if (ptmr1 != (OS_TMR *)0) {
N            ptmr1->OSTmrPrev = (void *)0;
N        }
N    } else {
N        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
N        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
N        ptmr1->OSTmrNext = ptmr2;
N        if (ptmr2 != (OS_TMR *)0) {
N            ptmr2->OSTmrPrev = (void *)ptmr1;
N        }
N    }
N    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
X    ptmr->OSTmrState = 1u;
N    ptmr->OSTmrNext  = (void *)0;
N    ptmr->OSTmrPrev  = (void *)0;
N    pspoke->OSTmrEntries--;
N}
N#endif
N
N/*$PAGE*/
N/*
N************************************************************************************************************************
N*                                                 TIMER MANAGEMENT TASK
N*
N* Description: This task is created by OSTmrInit().
N*
N* Arguments  : none
N*
N* Returns    : none
N************************************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 1u > 0u
Nstatic  void  OSTmr_Task (void *p_arg)
N{
N    INT8U            err;
N    OS_TMR          *ptmr;
N    OS_TMR          *ptmr_next;
N    OS_TMR_CALLBACK  pfnct;
N    OS_TMR_WHEEL    *pspoke;
N    INT16U           spoke;
N
N
N    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
N    for (;;) {
N        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
N        OSSchedLock();
N        OSTmrTime++;                                             /* Increment the current time                        */
N        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
X        spoke  = (INT16U)(OSTmrTime % 8u);     
N        pspoke = &OSTmrWheelTbl[spoke];
N        ptmr   = pspoke->OSTmrFirst;
N        while (ptmr != (OS_TMR *)0) {
N            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
N                                                                 /* ... timer could get unlinked from the wheel.      */
N            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
N                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
N                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
X                if (ptmr->OSTmrOpt == 2u) {
N                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
X                    OSTmr_Link(ptmr, 1u);       
N                } else {
N                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
X                    ptmr->OSTmrState = 2u;    
N                }
N                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
N                if (pfnct != (OS_TMR_CALLBACK)0) {
N                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
N                }
N            }
N            ptmr = ptmr_next;
N        }
N        OSSchedUnlock();
N    }
N}
N#endif
N	 	   	  			 		 	 	  		  	  			 			  		 	  				 	 		  	 	  	 		 		   		  	  			 				 		 		  	 	 	     	 					 	   	   	 	  	 		  	  			 	 	  		 		   		   	 			 
L 38 "..\..\uCOS-II\Source\ucos_ii.c" 2
N	 	   	  			 		 	 	  		  	  			 			  		 	  				 	 		  	 	  	 		 		   		  	  			 				 		 		  	 	 	     	 					 	   	   	 	  	 		  	  			 	 	  		 		   		   	 			 
